
TestAndMeasurement.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000022c4  00002358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d1  0080011c  0080011c  00002374  2**0
                  ALLOC
  3 .comment      00000024  00000000  00000000  00002374  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002398  2**2
                  CONTENTS, READONLY, OCTETS
  5 .debug_aranges 00000410  00000000  00000000  000023d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   0000925d  00000000  00000000  000027e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00002578  00000000  00000000  0000ba45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   0000af90  00000000  00000000  0000dfbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  00000b88  00000000  00000000  00018f50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00002710  00000000  00000000  00019ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00005e59  00000000  00000000  0001c1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000008c0  00000000  00000000  00022041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
       0:	89 c0       	rjmp	.+274    	; 0x114 <__ctors_end>
       2:	00 00       	nop
       4:	a3 c0       	rjmp	.+326    	; 0x14c <__bad_interrupt>
       6:	00 00       	nop
       8:	a1 c0       	rjmp	.+322    	; 0x14c <__bad_interrupt>
       a:	00 00       	nop
       c:	9f c0       	rjmp	.+318    	; 0x14c <__bad_interrupt>
       e:	00 00       	nop
      10:	9d c0       	rjmp	.+314    	; 0x14c <__bad_interrupt>
      12:	00 00       	nop
      14:	9b c0       	rjmp	.+310    	; 0x14c <__bad_interrupt>
      16:	00 00       	nop
      18:	99 c0       	rjmp	.+306    	; 0x14c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	97 c0       	rjmp	.+302    	; 0x14c <__bad_interrupt>
      1e:	00 00       	nop
      20:	95 c0       	rjmp	.+298    	; 0x14c <__bad_interrupt>
      22:	00 00       	nop
      24:	93 c0       	rjmp	.+294    	; 0x14c <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 dd 0e 	jmp	0x1dba	; 0x1dba <__vector_10>
      2c:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <__vector_11>
      30:	8d c0       	rjmp	.+282    	; 0x14c <__bad_interrupt>
      32:	00 00       	nop
      34:	8b c0       	rjmp	.+278    	; 0x14c <__bad_interrupt>
      36:	00 00       	nop
      38:	89 c0       	rjmp	.+274    	; 0x14c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	87 c0       	rjmp	.+270    	; 0x14c <__bad_interrupt>
      3e:	00 00       	nop
      40:	85 c0       	rjmp	.+266    	; 0x14c <__bad_interrupt>
      42:	00 00       	nop
      44:	83 c0       	rjmp	.+262    	; 0x14c <__bad_interrupt>
      46:	00 00       	nop
      48:	81 c0       	rjmp	.+258    	; 0x14c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7f c0       	rjmp	.+254    	; 0x14c <__bad_interrupt>
      4e:	00 00       	nop
      50:	7d c0       	rjmp	.+250    	; 0x14c <__bad_interrupt>
      52:	00 00       	nop
      54:	7b c0       	rjmp	.+246    	; 0x14c <__bad_interrupt>
      56:	00 00       	nop
      58:	79 c0       	rjmp	.+242    	; 0x14c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 c3 09 	jmp	0x1386	; 0x1386 <__vector_23>
      60:	75 c0       	rjmp	.+234    	; 0x14c <__bad_interrupt>
      62:	00 00       	nop
      64:	73 c0       	rjmp	.+230    	; 0x14c <__bad_interrupt>
      66:	00 00       	nop
      68:	71 c0       	rjmp	.+226    	; 0x14c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6f c0       	rjmp	.+222    	; 0x14c <__bad_interrupt>
      6e:	00 00       	nop
      70:	6d c0       	rjmp	.+218    	; 0x14c <__bad_interrupt>
      72:	00 00       	nop
      74:	6b c0       	rjmp	.+214    	; 0x14c <__bad_interrupt>
      76:	00 00       	nop
      78:	69 c0       	rjmp	.+210    	; 0x14c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	67 c0       	rjmp	.+206    	; 0x14c <__bad_interrupt>
      7e:	00 00       	nop
      80:	65 c0       	rjmp	.+202    	; 0x14c <__bad_interrupt>
      82:	00 00       	nop
      84:	63 c0       	rjmp	.+198    	; 0x14c <__bad_interrupt>
      86:	00 00       	nop
      88:	61 c0       	rjmp	.+194    	; 0x14c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5f c0       	rjmp	.+190    	; 0x14c <__bad_interrupt>
      8e:	00 00       	nop
      90:	5d c0       	rjmp	.+186    	; 0x14c <__bad_interrupt>
      92:	00 00       	nop
      94:	5b c0       	rjmp	.+182    	; 0x14c <__bad_interrupt>
      96:	00 00       	nop
      98:	59 c0       	rjmp	.+178    	; 0x14c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	57 c0       	rjmp	.+174    	; 0x14c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	55 c0       	rjmp	.+170    	; 0x14c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	53 c0       	rjmp	.+166    	; 0x14c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	51 c0       	rjmp	.+162    	; 0x14c <__bad_interrupt>
      aa:	00 00       	nop

000000ac <ProductString>:
      ac:	10 03 47 00 70 00 69 00 62 00 55 00 73 00 62 00     ..G.p.i.b.U.s.b.
      bc:	00 00                                               ..

000000be <ManufacturerString>:
      be:	16 03 58 00 79 00 70 00 68 00 72 00 6f 00 4c 00     ..X.y.p.h.r.o.L.
      ce:	61 00 62 00 73 00 00 00                             a.b.s...

000000d6 <LanguageString>:
      d6:	04 03 09 04                                         ....

000000da <ConfigurationDescriptor>:
      da:	09 02 27 00 01 01 00 c0 32 09 04 00 00 02 fe 03     ..'.....2.......
      ea:	01 00 07 05 03 02 40 00 05 07 05 82 02 40 00 05     ......@......@..
      fa:	00 00 00 00 00 00 00                                .......

00000101 <DeviceDescriptor>:
     101:	12 01 10 01 00 00 00 08 eb 03 65 20 01 00 01 02     ..........e ....
     111:	03 01 00                                            ...

00000114 <__ctors_end>:
     114:	11 24       	eor	r1, r1
     116:	1f be       	out	0x3f, r1	; 63
     118:	cf ef       	ldi	r28, 0xFF	; 255
     11a:	da e0       	ldi	r29, 0x0A	; 10
     11c:	de bf       	out	0x3e, r29	; 62
     11e:	cd bf       	out	0x3d, r28	; 61

00000120 <__do_copy_data>:
     120:	11 e0       	ldi	r17, 0x01	; 1

00000122 <.Loc.1>:
     122:	a0 e0       	ldi	r26, 0x00	; 0

00000124 <.Loc.2>:
     124:	b1 e0       	ldi	r27, 0x01	; 1

00000126 <.Loc.3>:
     126:	e4 ec       	ldi	r30, 0xC4	; 196

00000128 <.Loc.4>:
     128:	f2 e2       	ldi	r31, 0x22	; 34

0000012a <.Loc.5>:
     12a:	02 c0       	rjmp	.+4      	; 0x130 <.L__do_copy_data_start>

0000012c <.L__do_copy_data_loop>:
     12c:	05 90       	lpm	r0, Z+

0000012e <.Loc.7>:
     12e:	0d 92       	st	X+, r0

00000130 <.L__do_copy_data_start>:
     130:	ac 31       	cpi	r26, 0x1C	; 28

00000132 <.Loc.9>:
     132:	b1 07       	cpc	r27, r17

00000134 <.Loc.10>:
     134:	d9 f7       	brne	.-10     	; 0x12c <.L__do_copy_data_loop>

00000136 <__do_clear_bss>:
     136:	21 e0       	ldi	r18, 0x01	; 1

00000138 <.Loc.1>:
     138:	ac e1       	ldi	r26, 0x1C	; 28

0000013a <.Loc.2>:
     13a:	b1 e0       	ldi	r27, 0x01	; 1

0000013c <.Loc.3>:
     13c:	01 c0       	rjmp	.+2      	; 0x140 <.Loc.5>

0000013e <.Loc.4>:
     13e:	1d 92       	st	X+, r1

00000140 <.Loc.5>:
     140:	ad 3e       	cpi	r26, 0xED	; 237

00000142 <.Loc.6>:
     142:	b2 07       	cpc	r27, r18

00000144 <.Loc.7>:
     144:	e1 f7       	brne	.-8      	; 0x13e <.Loc.4>

00000146 <L0^A>:
     146:	f6 d7       	rcall	.+4076   	; 0x1134 <main>
     148:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <_exit>

0000014c <__bad_interrupt>:
     14c:	59 cf       	rjmp	.-334    	; 0x0 <__vectors>

0000014e <TMC_SetInternalSerial>:
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     14e:	ef e5       	ldi	r30, 0x5F	; 95
     150:	f0 e0       	ldi	r31, 0x00	; 0
     152:	3f b7       	in	r19, 0x3f	; 63

00000154 <.LBB362>:
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     154:	f8 94       	cli

00000156 <.LBE362>:
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	uint8_t    len;
	GlobalInterruptDisable();

	uint8_t SigReadAddress = 0x0E;
	tmc_serial_string.Header.Type = DTYPE_String;
     156:	93 e0       	ldi	r25, 0x03	; 3
     158:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <tmc_serial_string+0x1>

0000015c <.LVL3>:

	len = 0;
	if (addGPIBAddress)
     15c:	88 23       	and	r24, r24
     15e:	09 f4       	brne	.+2      	; 0x162 <.LVL4>

00000160 <L0^A>:
     160:	5c c0       	rjmp	.+184    	; 0x21a <.L7>

00000162 <.LVL4>:
	{	
		tmc_serial_string.UnicodeString[len++] = cpu_to_le16('G');
     162:	87 e4       	ldi	r24, 0x47	; 71
     164:	90 e0       	ldi	r25, 0x00	; 0

00000166 <.LVL5>:
     166:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <tmc_serial_string+0x3>
     16a:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <tmc_serial_string+0x2>

0000016e <.LVL6>:
		tmc_serial_string.UnicodeString[len++] = cpu_to_le16('P');
     16e:	80 e5       	ldi	r24, 0x50	; 80
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <tmc_serial_string+0x5>
     176:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <tmc_serial_string+0x4>

0000017a <.LVL7>:
		tmc_serial_string.UnicodeString[len++] = cpu_to_le16('I');
     17a:	89 e4       	ldi	r24, 0x49	; 73
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <tmc_serial_string+0x7>
     182:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <tmc_serial_string+0x6>

00000186 <.LVL8>:
		tmc_serial_string.UnicodeString[len++] = cpu_to_le16('B');
     186:	82 e4       	ldi	r24, 0x42	; 66
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <tmc_serial_string+0x9>
     18e:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <tmc_serial_string+0x8>

00000192 <.LVL9>:
		tmc_serial_string.UnicodeString[len++] = cpu_to_le16('_');
     192:	f0 93 85 01 	sts	0x0185, r31	; 0x800185 <tmc_serial_string+0xb>
     196:	e0 93 84 01 	sts	0x0184, r30	; 0x800184 <tmc_serial_string+0xa>

0000019a <.Loc.33>:
		tmc_serial_string.UnicodeString[len++] = cpu_to_le16('0' + (gpib_addr/10));
     19a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>

0000019e <.LVL10>:
     19e:	6a e0       	ldi	r22, 0x0A	; 10
     1a0:	0e 94 35 11 	call	0x226a	; 0x226a <__udivmodqi4>
     1a4:	48 2f       	mov	r20, r24
     1a6:	50 e0       	ldi	r21, 0x00	; 0
     1a8:	40 5d       	subi	r20, 0xD0	; 208
     1aa:	5f 4f       	sbci	r21, 0xFF	; 255

000001ac <.Loc.36>:
     1ac:	50 93 87 01 	sts	0x0187, r21	; 0x800187 <tmc_serial_string+0xd>
     1b0:	40 93 86 01 	sts	0x0186, r20	; 0x800186 <tmc_serial_string+0xc>

000001b4 <.LVL11>:
		tmc_serial_string.UnicodeString[len++] = cpu_to_le16('0' + (gpib_addr%10));
     1b4:	89 2f       	mov	r24, r25
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	c0 96       	adiw	r24, 0x30	; 48

000001ba <.Loc.39>:
     1ba:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <tmc_serial_string+0xf>
     1be:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <tmc_serial_string+0xe>

000001c2 <.LVL12>:
		tmc_serial_string.UnicodeString[len++] = cpu_to_le16('_');
     1c2:	f0 93 8b 01 	sts	0x018B, r31	; 0x80018b <tmc_serial_string+0x11>
     1c6:	e0 93 8a 01 	sts	0x018A, r30	; 0x80018a <tmc_serial_string+0x10>

000001ca <.Loc.42>:
     1ca:	88 e0       	ldi	r24, 0x08	; 8

000001cc <.L2>:
	len = 0;
     1cc:	20 e0       	ldi	r18, 0x00	; 0
     1ce:	6e e0       	ldi	r22, 0x0E	; 14

000001d0 <.LBB364>:
	}
	for (uint8_t SerialCharNum = 0; SerialCharNum < (80 / 4); SerialCharNum++)
	{
		uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     1d0:	71 e2       	ldi	r23, 0x21	; 33

000001d2 <.L6>:
     1d2:	98 2f       	mov	r25, r24
     1d4:	92 0f       	add	r25, r18

000001d6 <.LBB367>:
     1d6:	e6 2f       	mov	r30, r22
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	70 93 57 00 	sts	0x0057, r23	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
     1de:	e4 91       	lpm	r30, Z

000001e0 <.LBE367>:

		if (SerialCharNum & 0x01)
     1e0:	20 ff       	sbrs	r18, 0
     1e2:	03 c0       	rjmp	.+6      	; 0x1ea <.L3>

000001e4 <.Loc.54>:
		{
			SerialByte >>= 4;
     1e4:	e2 95       	swap	r30

000001e6 <.LVL17>:
     1e6:	ef 70       	andi	r30, 0x0F	; 15

000001e8 <.LVL18>:
			SigReadAddress++;
     1e8:	6f 5f       	subi	r22, 0xFF	; 255

000001ea <.L3>:
		}

		SerialByte &= 0x0F;
     1ea:	ef 70       	andi	r30, 0x0F	; 15

000001ec <.Loc.61>:

		tmc_serial_string.UnicodeString[len++] = cpu_to_le16( (SerialByte >= 10) ?
     1ec:	4e 2f       	mov	r20, r30
     1ee:	50 e0       	ldi	r21, 0x00	; 0

000001f0 <.Loc.62>:
     1f0:	ea 30       	cpi	r30, 0x0A	; 10
     1f2:	a8 f0       	brcs	.+42     	; 0x21e <.L4>

000001f4 <.Loc.63>:
     1f4:	49 5c       	subi	r20, 0xC9	; 201
     1f6:	5f 4f       	sbci	r21, 0xFF	; 255

000001f8 <.L5>:
     1f8:	e9 2f       	mov	r30, r25

000001fa <.LVL22>:
     1fa:	f0 e0       	ldi	r31, 0x00	; 0

000001fc <.Loc.66>:
     1fc:	ee 0f       	add	r30, r30
     1fe:	ff 1f       	adc	r31, r31
     200:	e4 58       	subi	r30, 0x84	; 132
     202:	fe 4f       	sbci	r31, 0xFE	; 254
     204:	51 83       	std	Z+1, r21	; 0x01
     206:	40 83       	st	Z, r20

00000208 <.LBE365>:
	for (uint8_t SerialCharNum = 0; SerialCharNum < (80 / 4); SerialCharNum++)
     208:	2f 5f       	subi	r18, 0xFF	; 255

0000020a <.LVL23>:
     20a:	24 31       	cpi	r18, 0x14	; 20
     20c:	11 f7       	brne	.-60     	; 0x1d2 <.L6>

0000020e <.LBE364>:
												                        (('A' - 10) + SerialByte) : ('0' + SerialByte) );
	}
	tmc_serial_string.Header.Size = len*2 + sizeof(USB_Descriptor_Header_t);
     20e:	8b 5e       	subi	r24, 0xEB	; 235

00000210 <.LVL24>:
     210:	88 0f       	add	r24, r24

00000212 <.LVL25>:
     212:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <tmc_serial_string>

00000216 <.LBB369>:
				SREG = GlobalIntState;
     216:	3f bf       	out	0x3f, r19	; 63

00000218 <.LBE369>:

	SetGlobalInterruptMask(CurrentGlobalInt);
}
     218:	08 95       	ret

0000021a <.L7>:
	len = 0;
     21a:	80 e0       	ldi	r24, 0x00	; 0

0000021c <.LVL29>:
     21c:	d7 cf       	rjmp	.-82     	; 0x1cc <.L2>

0000021e <.L4>:
		tmc_serial_string.UnicodeString[len++] = cpu_to_le16( (SerialByte >= 10) ?
     21e:	40 5d       	subi	r20, 0xD0	; 208
     220:	5f 4f       	sbci	r21, 0xFF	; 255

00000222 <.LVL31>:
     222:	ea cf       	rjmp	.-44     	; 0x1f8 <.L5>

00000224 <charToval>:
		}
	}
}

static uint8_t charToval(char c)
{
     224:	98 2f       	mov	r25, r24

00000226 <.LVL33>:
	uint8_t val;
	val = 0;
	if ( (c >= '0') && (c <= '9') )
     226:	80 ed       	ldi	r24, 0xD0	; 208

00000228 <.LVL34>:
     228:	89 0f       	add	r24, r25

0000022a <.Loc.96>:
     22a:	8a 30       	cpi	r24, 0x0A	; 10
     22c:	40 f0       	brcs	.+16     	; 0x23e <.L13>

0000022e <.Loc.97>:
		val = c-'0';
	if ( (c >= 'a') && (c <= 'f') )
     22e:	8f e9       	ldi	r24, 0x9F	; 159
     230:	89 0f       	add	r24, r25

00000232 <.Loc.99>:
     232:	86 30       	cpi	r24, 0x06	; 6
     234:	18 f4       	brcc	.+6      	; 0x23c <.L15>

00000236 <.Loc.100>:
		val = c-'a'+10;
     236:	89 ea       	ldi	r24, 0xA9	; 169

00000238 <.L16>:
	if ( (c >= 'A') && (c <= 'F') )
		val = c-'A'+10;
     238:	89 0f       	add	r24, r25

0000023a <.L12>:
	return val;
}
     23a:	08 95       	ret

0000023c <.L15>:
	val = 0;
     23c:	80 e0       	ldi	r24, 0x00	; 0

0000023e <.L13>:
	if ( (c >= 'A') && (c <= 'F') )
     23e:	2f eb       	ldi	r18, 0xBF	; 191
     240:	29 0f       	add	r18, r25

00000242 <.Loc.108>:
     242:	26 30       	cpi	r18, 0x06	; 6
     244:	d0 f7       	brcc	.-12     	; 0x23a <.L12>

00000246 <.Loc.109>:
		val = c-'A'+10;
     246:	89 ec       	ldi	r24, 0xC9	; 201

00000248 <.LVL39>:
     248:	f7 cf       	rjmp	.-18     	; 0x238 <.L16>

0000024a <is_timedout>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     24a:	85 e3       	ldi	r24, 0x35	; 53

0000024c <.L1^B1>:
     24c:	8a 95       	dec	r24
     24e:	f1 f7       	brne	.-4      	; 0x24c <.L1^B1>
     250:	00 00       	nop

00000252 <.LBE375>:
	if (timeout_val == 0)
     252:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <timeout_val>
     256:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <timeout_val+0x1>
     25a:	a0 91 77 01 	lds	r26, 0x0177	; 0x800177 <timeout_val+0x2>
     25e:	b0 91 78 01 	lds	r27, 0x0178	; 0x800178 <timeout_val+0x3>

00000262 <.Loc.126>:
     262:	00 97       	sbiw	r24, 0x00	; 0
     264:	a1 05       	cpc	r26, r1
     266:	b1 05       	cpc	r27, r1
     268:	69 f0       	breq	.+26     	; 0x284 <.L19>

0000026a <.Loc.127>:
	timeout_val--;
     26a:	01 97       	sbiw	r24, 0x01	; 1
     26c:	a1 09       	sbc	r26, r1
     26e:	b1 09       	sbc	r27, r1
     270:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <timeout_val>
     274:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <timeout_val+0x1>
     278:	a0 93 77 01 	sts	0x0177, r26	; 0x800177 <timeout_val+0x2>
     27c:	b0 93 78 01 	sts	0x0178, r27	; 0x800178 <timeout_val+0x3>

00000280 <.Loc.129>:
	return false;
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	08 95       	ret

00000284 <.L19>:
		return true;
     284:	81 e0       	ldi	r24, 0x01	; 1

00000286 <.Loc.132>:
}
     286:	08 95       	ret

00000288 <tmc_gpib_write_timedout>:
	USB_USBTask();
     288:	0e 94 1b 11 	call	0x2236	; 0x2236 <USB_USBTask>

0000028c <.LVL42>:
	return IsTMCBulkOUTReset | IsTMCBulkINReset;
     28c:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <IsTMCBulkOUTReset>
     290:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <IsTMCBulkINReset>

00000294 <.Loc.137>:
}
     294:	89 2b       	or	r24, r25
     296:	08 95       	ret

00000298 <tmc_gpib_read_timedout>:
	USB_USBTask();
     298:	0e 94 1b 11 	call	0x2236	; 0x2236 <USB_USBTask>

0000029c <.LVL43>:
	return IsTMCBulkINReset | IsTMCBulkOUTReset;
     29c:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <IsTMCBulkINReset>
     2a0:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <IsTMCBulkOUTReset>

000002a4 <.Loc.142>:
}
     2a4:	89 2b       	or	r24, r25
     2a6:	08 95       	ret

000002a8 <Jump_To_Bootloader>:
    USB_Disable();
     2a8:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <USB_Disable>

000002ac <.LVL44>:
    cli();
     2ac:	f8 94       	cli

000002ae <.LBB376>:
	__builtin_avr_delay_cycles(__ticks_dc);
     2ae:	2f ef       	ldi	r18, 0xFF	; 255
     2b0:	87 ea       	ldi	r24, 0xA7	; 167
     2b2:	91 e6       	ldi	r25, 0x61	; 97

000002b4 <.L1^B2>:
     2b4:	21 50       	subi	r18, 0x01	; 1
     2b6:	80 40       	sbci	r24, 0x00	; 0
     2b8:	90 40       	sbci	r25, 0x00	; 0
     2ba:	e1 f7       	brne	.-8      	; 0x2b4 <.L1^B2>
     2bc:	00 c0       	rjmp	.+0      	; 0x2be <L0^A>

000002be <L0^A>:
     2be:	00 00       	nop

000002c0 <.LBB383>:
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     2c0:	88 e1       	ldi	r24, 0x18	; 24
     2c2:	9c e0       	ldi	r25, 0x0C	; 12
     2c4:	0f b6       	in	r0, 0x3f	; 63
     2c6:	f8 94       	cli
     2c8:	a8 95       	wdr
     2ca:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     2ce:	0f be       	out	0x3f, r0	; 63
     2d0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>

000002d4 <.LBB385>:
     2d4:	ef ef       	ldi	r30, 0xFF	; 255
     2d6:	f9 e6       	ldi	r31, 0x69	; 105
     2d8:	28 e1       	ldi	r18, 0x18	; 24

000002da <.L1^B3>:
     2da:	e1 50       	subi	r30, 0x01	; 1
     2dc:	f0 40       	sbci	r31, 0x00	; 0
     2de:	20 40       	sbci	r18, 0x00	; 0
     2e0:	e1 f7       	brne	.-8      	; 0x2da <.L1^B3>
     2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <L0^A>

000002e4 <L0^A>:
     2e4:	00 00       	nop

000002e6 <.LBE391>:
	((void (*)(void))0x7000)();
     2e6:	e0 e0       	ldi	r30, 0x00	; 0
     2e8:	f0 e7       	ldi	r31, 0x70	; 112
     2ea:	09 95       	icall

000002ec <.L23>:
    for (;;);
     2ec:	ff cf       	rjmp	.-2      	; 0x2ec <.L23>

000002ee <findGpibdevice>:
	addr = gpib_search();
     2ee:	0e 94 ce 0b 	call	0x179c	; 0x179c <gpib_search>

000002f2 <.LVL52>:
     2f2:	98 2f       	mov	r25, r24

000002f4 <.LVL53>:
	devicepresent = (addr < 255);
     2f4:	81 e0       	ldi	r24, 0x01	; 1

000002f6 <.LVL54>:
     2f6:	9f 3f       	cpi	r25, 0xFF	; 255
     2f8:	11 f4       	brne	.+4      	; 0x2fe <.L27>
     2fa:	80 e0       	ldi	r24, 0x00	; 0

000002fc <.Loc.196>:
		addr = 1;
     2fc:	91 e0       	ldi	r25, 0x01	; 1

000002fe <.L27>:
	gpib_addr = addr; /* set global GPIB address to found address*/
     2fe:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <gpib_addr>

00000302 <.Loc.199>:
}
     302:	08 95       	ret

00000304 <identifyGpibDevice>:
{
     304:	0f 93       	push	r16

00000306 <.LCFI0>:
     306:	1f 93       	push	r17

00000308 <.LCFI1>:
     308:	cf 93       	push	r28

0000030a <.LCFI2>:
     30a:	df 93       	push	r29

0000030c <.LCFI3>:
     30c:	00 d0       	rcall	.+0      	; 0x30e <L0^A>

0000030e <L0^A>:
     30e:	cd b7       	in	r28, 0x3d	; 61
     310:	de b7       	in	r29, 0x3e	; 62

00000312 <.LCFI5>:
	tmc_serial_string.Header.Size = 0;
     312:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <tmc_serial_string>

00000316 <.LBB402>:
	timeout_val = timeout;
     316:	80 ea       	ldi	r24, 0xA0	; 160
     318:	96 e8       	ldi	r25, 0x86	; 134
     31a:	a1 e0       	ldi	r26, 0x01	; 1
     31c:	b0 e0       	ldi	r27, 0x00	; 0
     31e:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <timeout_val>
     322:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <timeout_val+0x1>
     326:	a0 93 77 01 	sts	0x0177, r26	; 0x800177 <timeout_val+0x2>
     32a:	b0 93 78 01 	sts	0x0178, r27	; 0x800178 <timeout_val+0x3>

0000032e <.LBE402>:
	gpib_make_listener(gpib_addr, is_timedout);
     32e:	65 e2       	ldi	r22, 0x25	; 37
     330:	71 e0       	ldi	r23, 0x01	; 1
     332:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     336:	0e 94 9a 0b 	call	0x1734	; 0x1734 <gpib_make_listener>

0000033a <.LVL59>:
	if (timeout_val != 0) gpib_writedat('*', false, is_timedout);
     33a:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <timeout_val>
     33e:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <timeout_val+0x1>
     342:	a0 91 77 01 	lds	r26, 0x0177	; 0x800177 <timeout_val+0x2>
     346:	b0 91 78 01 	lds	r27, 0x0178	; 0x800178 <timeout_val+0x3>
     34a:	89 2b       	or	r24, r25
     34c:	8a 2b       	or	r24, r26
     34e:	8b 2b       	or	r24, r27
     350:	09 f4       	brne	.+2      	; 0x354 <.Loc.217>

00000352 <L0^A>:
     352:	61 c0       	rjmp	.+194    	; 0x416 <.L63>

00000354 <.Loc.217>:
     354:	45 e2       	ldi	r20, 0x25	; 37
     356:	51 e0       	ldi	r21, 0x01	; 1
     358:	60 e0       	ldi	r22, 0x00	; 0
     35a:	8a e2       	ldi	r24, 0x2A	; 42
     35c:	0e 94 be 0b 	call	0x177c	; 0x177c <gpib_writedat>

00000360 <.LVL60>:
	if (timeout_val != 0) gpib_writedat('I', false, is_timedout);
     360:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <timeout_val>
     364:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <timeout_val+0x1>
     368:	a0 91 77 01 	lds	r26, 0x0177	; 0x800177 <timeout_val+0x2>
     36c:	b0 91 78 01 	lds	r27, 0x0178	; 0x800178 <timeout_val+0x3>
     370:	89 2b       	or	r24, r25
     372:	8a 2b       	or	r24, r26
     374:	8b 2b       	or	r24, r27
     376:	09 f4       	brne	.+2      	; 0x37a <.Loc.220>

00000378 <L0^A>:
     378:	4e c0       	rjmp	.+156    	; 0x416 <.L63>

0000037a <.Loc.220>:
     37a:	45 e2       	ldi	r20, 0x25	; 37
     37c:	51 e0       	ldi	r21, 0x01	; 1
     37e:	60 e0       	ldi	r22, 0x00	; 0
     380:	89 e4       	ldi	r24, 0x49	; 73
     382:	0e 94 be 0b 	call	0x177c	; 0x177c <gpib_writedat>

00000386 <.LVL61>:
	if (timeout_val != 0) gpib_writedat('D', false, is_timedout);
     386:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <timeout_val>
     38a:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <timeout_val+0x1>
     38e:	a0 91 77 01 	lds	r26, 0x0177	; 0x800177 <timeout_val+0x2>
     392:	b0 91 78 01 	lds	r27, 0x0178	; 0x800178 <timeout_val+0x3>
     396:	89 2b       	or	r24, r25
     398:	8a 2b       	or	r24, r26
     39a:	8b 2b       	or	r24, r27
     39c:	e1 f1       	breq	.+120    	; 0x416 <.L63>

0000039e <.Loc.223>:
     39e:	45 e2       	ldi	r20, 0x25	; 37
     3a0:	51 e0       	ldi	r21, 0x01	; 1
     3a2:	60 e0       	ldi	r22, 0x00	; 0
     3a4:	84 e4       	ldi	r24, 0x44	; 68
     3a6:	0e 94 be 0b 	call	0x177c	; 0x177c <gpib_writedat>

000003aa <.LVL62>:
	if (timeout_val != 0) gpib_writedat('N', false, is_timedout);
     3aa:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <timeout_val>
     3ae:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <timeout_val+0x1>
     3b2:	a0 91 77 01 	lds	r26, 0x0177	; 0x800177 <timeout_val+0x2>
     3b6:	b0 91 78 01 	lds	r27, 0x0178	; 0x800178 <timeout_val+0x3>
     3ba:	89 2b       	or	r24, r25
     3bc:	8a 2b       	or	r24, r26
     3be:	8b 2b       	or	r24, r27
     3c0:	51 f1       	breq	.+84     	; 0x416 <.L63>

000003c2 <.Loc.226>:
     3c2:	45 e2       	ldi	r20, 0x25	; 37
     3c4:	51 e0       	ldi	r21, 0x01	; 1
     3c6:	60 e0       	ldi	r22, 0x00	; 0
     3c8:	8e e4       	ldi	r24, 0x4E	; 78
     3ca:	0e 94 be 0b 	call	0x177c	; 0x177c <gpib_writedat>

000003ce <.LVL63>:
	if (timeout_val != 0) gpib_writedat('?', false, is_timedout);
     3ce:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <timeout_val>
     3d2:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <timeout_val+0x1>
     3d6:	a0 91 77 01 	lds	r26, 0x0177	; 0x800177 <timeout_val+0x2>
     3da:	b0 91 78 01 	lds	r27, 0x0178	; 0x800178 <timeout_val+0x3>
     3de:	89 2b       	or	r24, r25
     3e0:	8a 2b       	or	r24, r26
     3e2:	8b 2b       	or	r24, r27
     3e4:	c1 f0       	breq	.+48     	; 0x416 <.L63>

000003e6 <.Loc.229>:
     3e6:	45 e2       	ldi	r20, 0x25	; 37
     3e8:	51 e0       	ldi	r21, 0x01	; 1
     3ea:	60 e0       	ldi	r22, 0x00	; 0
     3ec:	8f e3       	ldi	r24, 0x3F	; 63
     3ee:	0e 94 be 0b 	call	0x177c	; 0x177c <gpib_writedat>

000003f2 <.LVL64>:
	if (timeout_val != 0) gpib_writedat('\n', true, is_timedout);
     3f2:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <timeout_val>
     3f6:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <timeout_val+0x1>
     3fa:	a0 91 77 01 	lds	r26, 0x0177	; 0x800177 <timeout_val+0x2>
     3fe:	b0 91 78 01 	lds	r27, 0x0178	; 0x800178 <timeout_val+0x3>
     402:	89 2b       	or	r24, r25
     404:	8a 2b       	or	r24, r26
     406:	8b 2b       	or	r24, r27
     408:	31 f0       	breq	.+12     	; 0x416 <.L63>

0000040a <.Loc.232>:
     40a:	45 e2       	ldi	r20, 0x25	; 37
     40c:	51 e0       	ldi	r21, 0x01	; 1
     40e:	61 e0       	ldi	r22, 0x01	; 1
     410:	8a e0       	ldi	r24, 0x0A	; 10
     412:	0e 94 be 0b 	call	0x177c	; 0x177c <gpib_writedat>

00000416 <.L63>:
	gpib_untalk_unlisten(is_timedout);
     416:	85 e2       	ldi	r24, 0x25	; 37
     418:	91 e0       	ldi	r25, 0x01	; 1
     41a:	0e 94 65 0b 	call	0x16ca	; 0x16ca <gpib_untalk_unlisten>

0000041e <.LVL66>:
	if (timeout_val != 0) 
     41e:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <timeout_val>
     422:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <timeout_val+0x1>
     426:	a0 91 77 01 	lds	r26, 0x0177	; 0x800177 <timeout_val+0x2>
     42a:	b0 91 78 01 	lds	r27, 0x0178	; 0x800178 <timeout_val+0x3>
     42e:	89 2b       	or	r24, r25
     430:	8a 2b       	or	r24, r26
     432:	8b 2b       	or	r24, r27
     434:	09 f4       	brne	.+2      	; 0x438 <.LBB404>

00000436 <L0^A>:
     436:	5a c1       	rjmp	.+692    	; 0x6ec <.L34>

00000438 <.LBB404>:
	timeout_val = timeout;
     438:	80 ea       	ldi	r24, 0xA0	; 160
     43a:	96 e8       	ldi	r25, 0x86	; 134
     43c:	a1 e0       	ldi	r26, 0x01	; 1
     43e:	b0 e0       	ldi	r27, 0x00	; 0
     440:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <timeout_val>
     444:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <timeout_val+0x1>
     448:	a0 93 77 01 	sts	0x0177, r26	; 0x800177 <timeout_val+0x2>
     44c:	b0 93 78 01 	sts	0x0178, r27	; 0x800178 <timeout_val+0x3>

00000450 <.LBE404>:
		gpib_make_talker(gpib_addr, is_timedout);
     450:	65 e2       	ldi	r22, 0x25	; 37
     452:	71 e0       	ldi	r23, 0x01	; 1
     454:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     458:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <gpib_make_talker>

0000045c <.LVL69>:
	hascomma = false; /* does the response contain a , character? */
     45c:	00 e0       	ldi	r16, 0x00	; 0

0000045e <.Loc.244>:
		len = 0;
     45e:	10 e0       	ldi	r17, 0x00	; 0

00000460 <.L40>:
			c = gpib_readdat(&eoi, &timedout, is_timedout);
     460:	45 e2       	ldi	r20, 0x25	; 37
     462:	51 e0       	ldi	r21, 0x01	; 1
     464:	be 01       	movw	r22, r28
     466:	6f 5f       	subi	r22, 0xFF	; 255
     468:	7f 4f       	sbci	r23, 0xFF	; 255
     46a:	ce 01       	movw	r24, r28
     46c:	02 96       	adiw	r24, 0x02	; 2
     46e:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <gpib_readdat>

00000472 <.LVL71>:
			hascomma = hascomma || (c == ',');
     472:	01 11       	cpse	r16, r1
     474:	31 c0       	rjmp	.+98     	; 0x4d8 <.L64>

00000476 <.LVL72>:
     476:	01 e0       	ldi	r16, 0x01	; 1
     478:	8c 32       	cpi	r24, 0x2C	; 44
     47a:	09 f0       	breq	.+2      	; 0x47e <.L35>
     47c:	00 e0       	ldi	r16, 0x00	; 0

0000047e <.L35>:
			if ( (c=='\"') || (c=='*') || (c=='/') || (c=='\\') || (c==':') || (c=='?') || (c==' ') || (c==',') || (c=='&') ) /* YEP, a comma and amphersand is allowed in USBTMC spec, but R&S SW does not like this... */
     47e:	98 2f       	mov	r25, r24
     480:	9f 7e       	andi	r25, 0xEF	; 239
     482:	9a 32       	cpi	r25, 0x2A	; 42
     484:	59 f1       	breq	.+86     	; 0x4dc <.L70>

00000486 <.Loc.253>:
     486:	9f 32       	cpi	r25, 0x2F	; 47
     488:	49 f1       	breq	.+82     	; 0x4dc <.L70>

0000048a <.Loc.254>:
     48a:	8c 35       	cpi	r24, 0x5C	; 92
     48c:	39 f1       	breq	.+78     	; 0x4dc <.L70>

0000048e <.Loc.255>:
     48e:	98 2f       	mov	r25, r24
     490:	9d 7f       	andi	r25, 0xFD	; 253
     492:	90 32       	cpi	r25, 0x20	; 32
     494:	19 f1       	breq	.+70     	; 0x4dc <.L70>

00000496 <.Loc.256>:
     496:	8c 32       	cpi	r24, 0x2C	; 44
     498:	09 f1       	breq	.+66     	; 0x4dc <.L70>

0000049a <.Loc.257>:
     49a:	86 32       	cpi	r24, 0x26	; 38
     49c:	f9 f0       	breq	.+62     	; 0x4dc <.L70>

0000049e <.Loc.258>:
			if ( (c >=32) && (c <=126))
     49e:	90 ee       	ldi	r25, 0xE0	; 224
     4a0:	98 0f       	add	r25, r24

000004a2 <.Loc.260>:
     4a2:	9f 35       	cpi	r25, 0x5F	; 95
     4a4:	50 f4       	brcc	.+20     	; 0x4ba <.L38>

000004a6 <.L37>:
				tmc_serial_string.UnicodeString[len++] = cpu_to_le16(c);
     4a6:	e1 2f       	mov	r30, r17
     4a8:	f0 e0       	ldi	r31, 0x00	; 0

000004aa <.Loc.263>:
     4aa:	ee 0f       	add	r30, r30
     4ac:	ff 1f       	adc	r31, r31
     4ae:	e4 58       	subi	r30, 0x84	; 132
     4b0:	fe 4f       	sbci	r31, 0xFE	; 254
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	91 83       	std	Z+1, r25	; 0x01
     4b6:	80 83       	st	Z, r24

000004b8 <.Loc.264>:
     4b8:	1f 5f       	subi	r17, 0xFF	; 255

000004ba <.L38>:
		while ((len < TMC_MAX_SERIAL_STRING_LENGTH) && (!timedout) && (!eoi));
     4ba:	12 33       	cpi	r17, 0x32	; 50
     4bc:	30 f4       	brcc	.+12     	; 0x4ca <.L39>

000004be <.Loc.267>:
     4be:	89 81       	ldd	r24, Y+1	; 0x01

000004c0 <.LVL76>:
     4c0:	81 11       	cpse	r24, r1
     4c2:	03 c0       	rjmp	.+6      	; 0x4ca <.L39>

000004c4 <.Loc.269>:
     4c4:	8a 81       	ldd	r24, Y+2	; 0x02
     4c6:	88 23       	and	r24, r24
     4c8:	59 f2       	breq	.-106    	; 0x460 <.L40>

000004ca <.L39>:
     4ca:	e1 2f       	mov	r30, r17
     4cc:	f0 e0       	ldi	r31, 0x00	; 0
     4ce:	ee 0f       	add	r30, r30
     4d0:	ff 1f       	adc	r31, r31
     4d2:	e4 58       	subi	r30, 0x84	; 132
     4d4:	fe 4f       	sbci	r31, 0xFE	; 254
     4d6:	05 c0       	rjmp	.+10     	; 0x4e2 <.L41>

000004d8 <.L64>:
			hascomma = hascomma || (c == ',');
     4d8:	01 e0       	ldi	r16, 0x01	; 1

000004da <.LVL78>:
     4da:	d1 cf       	rjmp	.-94     	; 0x47e <.L35>

000004dc <.L70>:
				c='_';
     4dc:	8f e5       	ldi	r24, 0x5F	; 95

000004de <.LVL79>:
     4de:	e3 cf       	rjmp	.-58     	; 0x4a6 <.L37>

000004e0 <.L43>:
			len--;
     4e0:	11 50       	subi	r17, 0x01	; 1

000004e2 <.L41>:
		while ((tmc_serial_string.UnicodeString[len-1] == '_') && (len > 1))
     4e2:	92 91       	ld	r25, -Z
     4e4:	82 91       	ld	r24, -Z
     4e6:	8f 35       	cpi	r24, 0x5F	; 95
     4e8:	91 05       	cpc	r25, r1
     4ea:	11 f4       	brne	.+4      	; 0x4f0 <.L42>

000004ec <.Loc.277>:
     4ec:	12 30       	cpi	r17, 0x02	; 2
     4ee:	c0 f7       	brcc	.-16     	; 0x4e0 <.L43>

000004f0 <.L42>:
		tmc_serial_string.Header.Size = len*2 + sizeof(USB_Descriptor_Header_t);
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	81 0f       	add	r24, r17
     4f4:	88 0f       	add	r24, r24

000004f6 <.Loc.280>:
     4f6:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <tmc_serial_string>

000004fa <.Loc.281>:
		gpib_untalk_unlisten(is_timedout);
     4fa:	85 e2       	ldi	r24, 0x25	; 37
     4fc:	91 e0       	ldi	r25, 0x01	; 1
     4fe:	0e 94 65 0b 	call	0x16ca	; 0x16ca <gpib_untalk_unlisten>

00000502 <.LVL81>:
		if ( (timeout_val == 0) || (len==0) ) /* no response to *IDN? string*/
     502:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <timeout_val>
     506:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <timeout_val+0x1>
     50a:	a0 91 77 01 	lds	r26, 0x0177	; 0x800177 <timeout_val+0x2>
     50e:	b0 91 78 01 	lds	r27, 0x0178	; 0x800178 <timeout_val+0x3>
     512:	89 2b       	or	r24, r25
     514:	8a 2b       	or	r24, r26
     516:	8b 2b       	or	r24, r27
     518:	11 f0       	breq	.+4      	; 0x51e <.L44>

0000051a <.Loc.284>:
     51a:	11 11       	cpse	r17, r1
     51c:	d3 c0       	rjmp	.+422    	; 0x6c4 <.L45>

0000051e <.L44>:
	timeout_val = timeout;
     51e:	80 ea       	ldi	r24, 0xA0	; 160
     520:	96 e8       	ldi	r25, 0x86	; 134
     522:	a1 e0       	ldi	r26, 0x01	; 1
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <timeout_val>
     52a:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <timeout_val+0x1>
     52e:	a0 93 77 01 	sts	0x0177, r26	; 0x800177 <timeout_val+0x2>
     532:	b0 93 78 01 	sts	0x0178, r27	; 0x800178 <timeout_val+0x3>

00000536 <.LBE406>:
			gpib_make_listener(gpib_addr, is_timedout);
     536:	65 e2       	ldi	r22, 0x25	; 37
     538:	71 e0       	ldi	r23, 0x01	; 1
     53a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     53e:	0e 94 9a 0b 	call	0x1734	; 0x1734 <gpib_make_listener>

00000542 <.LVL84>:
			if (timeout_val != 0) gpib_writedat('I', false, is_timedout);
     542:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <timeout_val>
     546:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <timeout_val+0x1>
     54a:	a0 91 77 01 	lds	r26, 0x0177	; 0x800177 <timeout_val+0x2>
     54e:	b0 91 78 01 	lds	r27, 0x0178	; 0x800178 <timeout_val+0x3>
     552:	89 2b       	or	r24, r25
     554:	8a 2b       	or	r24, r26
     556:	8b 2b       	or	r24, r27
     558:	e1 f1       	breq	.+120    	; 0x5d2 <.L62>

0000055a <.Loc.293>:
     55a:	45 e2       	ldi	r20, 0x25	; 37
     55c:	51 e0       	ldi	r21, 0x01	; 1
     55e:	60 e0       	ldi	r22, 0x00	; 0
     560:	89 e4       	ldi	r24, 0x49	; 73
     562:	0e 94 be 0b 	call	0x177c	; 0x177c <gpib_writedat>

00000566 <.LVL85>:
			if (timeout_val != 0) gpib_writedat('D', false, is_timedout);
     566:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <timeout_val>
     56a:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <timeout_val+0x1>
     56e:	a0 91 77 01 	lds	r26, 0x0177	; 0x800177 <timeout_val+0x2>
     572:	b0 91 78 01 	lds	r27, 0x0178	; 0x800178 <timeout_val+0x3>
     576:	89 2b       	or	r24, r25
     578:	8a 2b       	or	r24, r26
     57a:	8b 2b       	or	r24, r27
     57c:	51 f1       	breq	.+84     	; 0x5d2 <.L62>

0000057e <.Loc.296>:
     57e:	45 e2       	ldi	r20, 0x25	; 37
     580:	51 e0       	ldi	r21, 0x01	; 1
     582:	60 e0       	ldi	r22, 0x00	; 0
     584:	84 e4       	ldi	r24, 0x44	; 68
     586:	0e 94 be 0b 	call	0x177c	; 0x177c <gpib_writedat>

0000058a <.LVL86>:
			if (timeout_val != 0) gpib_writedat('?', false, is_timedout);
     58a:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <timeout_val>
     58e:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <timeout_val+0x1>
     592:	a0 91 77 01 	lds	r26, 0x0177	; 0x800177 <timeout_val+0x2>
     596:	b0 91 78 01 	lds	r27, 0x0178	; 0x800178 <timeout_val+0x3>
     59a:	89 2b       	or	r24, r25
     59c:	8a 2b       	or	r24, r26
     59e:	8b 2b       	or	r24, r27
     5a0:	c1 f0       	breq	.+48     	; 0x5d2 <.L62>

000005a2 <.Loc.299>:
     5a2:	45 e2       	ldi	r20, 0x25	; 37
     5a4:	51 e0       	ldi	r21, 0x01	; 1
     5a6:	60 e0       	ldi	r22, 0x00	; 0
     5a8:	8f e3       	ldi	r24, 0x3F	; 63
     5aa:	0e 94 be 0b 	call	0x177c	; 0x177c <gpib_writedat>

000005ae <.LVL87>:
			if (timeout_val != 0) gpib_writedat('\n', true, is_timedout);
     5ae:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <timeout_val>
     5b2:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <timeout_val+0x1>
     5b6:	a0 91 77 01 	lds	r26, 0x0177	; 0x800177 <timeout_val+0x2>
     5ba:	b0 91 78 01 	lds	r27, 0x0178	; 0x800178 <timeout_val+0x3>
     5be:	89 2b       	or	r24, r25
     5c0:	8a 2b       	or	r24, r26
     5c2:	8b 2b       	or	r24, r27
     5c4:	31 f0       	breq	.+12     	; 0x5d2 <.L62>

000005c6 <.Loc.302>:
     5c6:	45 e2       	ldi	r20, 0x25	; 37
     5c8:	51 e0       	ldi	r21, 0x01	; 1
     5ca:	61 e0       	ldi	r22, 0x01	; 1
     5cc:	8a e0       	ldi	r24, 0x0A	; 10
     5ce:	0e 94 be 0b 	call	0x177c	; 0x177c <gpib_writedat>

000005d2 <.L62>:
			gpib_untalk_unlisten(is_timedout);
     5d2:	85 e2       	ldi	r24, 0x25	; 37
     5d4:	91 e0       	ldi	r25, 0x01	; 1
     5d6:	0e 94 65 0b 	call	0x16ca	; 0x16ca <gpib_untalk_unlisten>

000005da <.LVL89>:
			if (timeout_val != 0) 
     5da:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <timeout_val>
     5de:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <timeout_val+0x1>
     5e2:	a0 91 77 01 	lds	r26, 0x0177	; 0x800177 <timeout_val+0x2>
     5e6:	b0 91 78 01 	lds	r27, 0x0178	; 0x800178 <timeout_val+0x3>
     5ea:	89 2b       	or	r24, r25
     5ec:	8a 2b       	or	r24, r26
     5ee:	8b 2b       	or	r24, r27
     5f0:	09 f4       	brne	.+2      	; 0x5f4 <.LBB408>

000005f2 <L0^A>:
     5f2:	68 c0       	rjmp	.+208    	; 0x6c4 <.L45>

000005f4 <.LBB408>:
	timeout_val = timeout;
     5f4:	80 ea       	ldi	r24, 0xA0	; 160
     5f6:	96 e8       	ldi	r25, 0x86	; 134
     5f8:	a1 e0       	ldi	r26, 0x01	; 1
     5fa:	b0 e0       	ldi	r27, 0x00	; 0
     5fc:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <timeout_val>
     600:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <timeout_val+0x1>
     604:	a0 93 77 01 	sts	0x0177, r26	; 0x800177 <timeout_val+0x2>
     608:	b0 93 78 01 	sts	0x0178, r27	; 0x800178 <timeout_val+0x3>

0000060c <.LBE408>:
				gpib_make_talker(gpib_addr, is_timedout);
     60c:	65 e2       	ldi	r22, 0x25	; 37
     60e:	71 e0       	ldi	r23, 0x01	; 1
     610:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     614:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <gpib_make_talker>

00000618 <.LVL92>:
				len = 0;
     618:	10 e0       	ldi	r17, 0x00	; 0

0000061a <.L54>:
					c = gpib_readdat(&eoi, &timedout, is_timedout);
     61a:	45 e2       	ldi	r20, 0x25	; 37
     61c:	51 e0       	ldi	r21, 0x01	; 1
     61e:	be 01       	movw	r22, r28
     620:	6f 5f       	subi	r22, 0xFF	; 255
     622:	7f 4f       	sbci	r23, 0xFF	; 255
     624:	ce 01       	movw	r24, r28
     626:	02 96       	adiw	r24, 0x02	; 2
     628:	c5 d7       	rcall	.+3978   	; 0x15b4 <gpib_readdat>

0000062a <.LVL94>:
					hascomma = hascomma || (c == ',');
     62a:	01 11       	cpse	r16, r1
     62c:	36 c0       	rjmp	.+108    	; 0x69a <.L71>

0000062e <.Loc.319>:
     62e:	01 e0       	ldi	r16, 0x01	; 1

00000630 <.LVL95>:
     630:	8c 32       	cpi	r24, 0x2C	; 44
     632:	09 f0       	breq	.+2      	; 0x636 <.L49>
     634:	00 e0       	ldi	r16, 0x00	; 0

00000636 <.L49>:
					if ( (c=='\"') || (c=='*') || (c=='/') || (c=='\\') || (c==':') || (c=='?') || (c==' ') || (c==',') || (c=='&'))
     636:	98 2f       	mov	r25, r24
     638:	9f 7e       	andi	r25, 0xEF	; 239
     63a:	9a 32       	cpi	r25, 0x2A	; 42
     63c:	81 f1       	breq	.+96     	; 0x69e <.L77>

0000063e <.Loc.323>:
     63e:	9f 32       	cpi	r25, 0x2F	; 47
     640:	71 f1       	breq	.+92     	; 0x69e <.L77>

00000642 <.Loc.324>:
     642:	8c 35       	cpi	r24, 0x5C	; 92
     644:	61 f1       	breq	.+88     	; 0x69e <.L77>

00000646 <.Loc.325>:
     646:	98 2f       	mov	r25, r24
     648:	9d 7f       	andi	r25, 0xFD	; 253
     64a:	90 32       	cpi	r25, 0x20	; 32
     64c:	41 f1       	breq	.+80     	; 0x69e <.L77>

0000064e <.Loc.326>:
     64e:	8c 32       	cpi	r24, 0x2C	; 44
     650:	31 f1       	breq	.+76     	; 0x69e <.L77>

00000652 <.Loc.327>:
     652:	86 32       	cpi	r24, 0x26	; 38
     654:	21 f1       	breq	.+72     	; 0x69e <.L77>

00000656 <.Loc.328>:
					if ( (c >=32) && (c <=126) )
     656:	90 ee       	ldi	r25, 0xE0	; 224
     658:	98 0f       	add	r25, r24

0000065a <.Loc.330>:
     65a:	9f 35       	cpi	r25, 0x5F	; 95
     65c:	58 f4       	brcc	.+22     	; 0x674 <.L52>

0000065e <.L51>:
						tmc_serial_string.UnicodeString[len++] = cpu_to_le16(c);
     65e:	e1 2f       	mov	r30, r17
     660:	f0 e0       	ldi	r31, 0x00	; 0

00000662 <.Loc.333>:
     662:	ee 0f       	add	r30, r30
     664:	ff 1f       	adc	r31, r31
     666:	e4 58       	subi	r30, 0x84	; 132
     668:	fe 4f       	sbci	r31, 0xFE	; 254
     66a:	28 2f       	mov	r18, r24
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	31 83       	std	Z+1, r19	; 0x01
     670:	20 83       	st	Z, r18

00000672 <.Loc.334>:
     672:	1f 5f       	subi	r17, 0xFF	; 255

00000674 <.L52>:
				while ((len < TMC_MAX_SERIAL_STRING_LENGTH) && (!timedout) && (!eoi) && (c != '\r') && (c != '\n'));
     674:	12 33       	cpi	r17, 0x32	; 50
     676:	50 f4       	brcc	.+20     	; 0x68c <.L53>

00000678 <.Loc.337>:
     678:	99 81       	ldd	r25, Y+1	; 0x01
     67a:	91 11       	cpse	r25, r1
     67c:	07 c0       	rjmp	.+14     	; 0x68c <.L53>

0000067e <.Loc.338>:
     67e:	9a 81       	ldd	r25, Y+2	; 0x02
     680:	91 11       	cpse	r25, r1
     682:	04 c0       	rjmp	.+8      	; 0x68c <.L53>

00000684 <.Loc.339>:
     684:	8d 30       	cpi	r24, 0x0D	; 13
     686:	11 f0       	breq	.+4      	; 0x68c <.L53>

00000688 <.Loc.340>:
     688:	8a 30       	cpi	r24, 0x0A	; 10
     68a:	39 f6       	brne	.-114    	; 0x61a <.L54>

0000068c <.L53>:
     68c:	e1 2f       	mov	r30, r17
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	ee 0f       	add	r30, r30
     692:	ff 1f       	adc	r31, r31

00000694 <.LVL98>:
     694:	e4 58       	subi	r30, 0x84	; 132
     696:	fe 4f       	sbci	r31, 0xFE	; 254
     698:	05 c0       	rjmp	.+10     	; 0x6a4 <.L55>

0000069a <.L71>:
					hascomma = hascomma || (c == ',');
     69a:	01 e0       	ldi	r16, 0x01	; 1

0000069c <.LVL100>:
     69c:	cc cf       	rjmp	.-104    	; 0x636 <.L49>

0000069e <.L77>:
						c='_';
     69e:	8f e5       	ldi	r24, 0x5F	; 95

000006a0 <.LVL101>:
     6a0:	de cf       	rjmp	.-68     	; 0x65e <.L51>

000006a2 <.L57>:
					len--;
     6a2:	11 50       	subi	r17, 0x01	; 1

000006a4 <.L55>:
				while ((tmc_serial_string.UnicodeString[len-1] == '_') && (len > 1))
     6a4:	92 91       	ld	r25, -Z
     6a6:	82 91       	ld	r24, -Z
     6a8:	8f 35       	cpi	r24, 0x5F	; 95
     6aa:	91 05       	cpc	r25, r1
     6ac:	11 f4       	brne	.+4      	; 0x6b2 <.L56>

000006ae <.Loc.349>:
     6ae:	12 30       	cpi	r17, 0x02	; 2
     6b0:	c0 f7       	brcc	.-16     	; 0x6a2 <.L57>

000006b2 <.L56>:
				tmc_serial_string.Header.Size = len*2 + sizeof(USB_Descriptor_Header_t);
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	81 0f       	add	r24, r17
     6b6:	88 0f       	add	r24, r24

000006b8 <.Loc.352>:
     6b8:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <tmc_serial_string>

000006bc <.Loc.353>:
				gpib_untalk_unlisten(is_timedout);
     6bc:	85 e2       	ldi	r24, 0x25	; 37
     6be:	91 e0       	ldi	r25, 0x01	; 1
     6c0:	0e 94 65 0b 	call	0x16ca	; 0x16ca <gpib_untalk_unlisten>

000006c4 <.L45>:
		if (!hascomma)
     6c4:	00 23       	and	r16, r16
     6c6:	51 f1       	breq	.+84     	; 0x71c <.L58>

000006c8 <.L60>:
						tmc_serial_string.UnicodeString[len++] = cpu_to_le16(c);
     6c8:	01 e0       	ldi	r16, 0x01	; 1

000006ca <.L59>:
		if ((timeout_val == 0) || (len == 0)  || (!hascomma) ) /* timeout happened or length is 0 => build a serial number based on GPIB address */
     6ca:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <timeout_val>
     6ce:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <timeout_val+0x1>
     6d2:	a0 91 77 01 	lds	r26, 0x0177	; 0x800177 <timeout_val+0x2>
     6d6:	b0 91 78 01 	lds	r27, 0x0178	; 0x800178 <timeout_val+0x3>
     6da:	89 2b       	or	r24, r25
     6dc:	8a 2b       	or	r24, r26
     6de:	8b 2b       	or	r24, r27
     6e0:	29 f0       	breq	.+10     	; 0x6ec <.L34>

000006e2 <.Loc.359>:
     6e2:	11 23       	and	r17, r17
     6e4:	19 f0       	breq	.+6      	; 0x6ec <.L34>

000006e6 <.Loc.360>:
	gotStringViaGPIB = true;
     6e6:	11 e0       	ldi	r17, 0x01	; 1

000006e8 <.LVL105>:
		if ((timeout_val == 0) || (len == 0)  || (!hascomma) ) /* timeout happened or length is 0 => build a serial number based on GPIB address */
     6e8:	01 11       	cpse	r16, r1
     6ea:	03 c0       	rjmp	.+6      	; 0x6f2 <.L61>

000006ec <.L34>:
			TMC_SetInternalSerial(true);
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	2f dd       	rcall	.-1442   	; 0x14e <TMC_SetInternalSerial>

000006f0 <.LVL107>:
			gotStringViaGPIB = false;
     6f0:	10 e0       	ldi	r17, 0x00	; 0

000006f2 <.L61>:
	gpib_ren(false);
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	7c d6       	rcall	.+3320   	; 0x13ee <gpib_ren>

000006f6 <.LBB410>:
     6f6:	2f ef       	ldi	r18, 0xFF	; 255
     6f8:	81 ee       	ldi	r24, 0xE1	; 225
     6fa:	94 e0       	ldi	r25, 0x04	; 4

000006fc <.L1^B4>:
     6fc:	21 50       	subi	r18, 0x01	; 1
     6fe:	80 40       	sbci	r24, 0x00	; 0
     700:	90 40       	sbci	r25, 0x00	; 0
     702:	e1 f7       	brne	.-8      	; 0x6fc <.L1^B4>
     704:	00 c0       	rjmp	.+0      	; 0x706 <L0^A>

00000706 <L0^A>:
     706:	00 00       	nop

00000708 <.LBE413>:
	gpib_ren(true);
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	71 d6       	rcall	.+3298   	; 0x13ee <gpib_ren>

0000070c <.LVL111>:
}
     70c:	81 2f       	mov	r24, r17
     70e:	0f 90       	pop	r0
     710:	0f 90       	pop	r0
     712:	df 91       	pop	r29
     714:	cf 91       	pop	r28
     716:	1f 91       	pop	r17

00000718 <.LVL112>:
     718:	0f 91       	pop	r16
     71a:	08 95       	ret

0000071c <.L58>:
			if ( (tmc_serial_string.UnicodeString[0] = 'H') &&
     71c:	88 e4       	ldi	r24, 0x48	; 72
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <tmc_serial_string+0x3>
     724:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <tmc_serial_string+0x2>

00000728 <.Loc.383>:
				 (tmc_serial_string.UnicodeString[1] = 'P') &&
     728:	80 e5       	ldi	r24, 0x50	; 80
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <tmc_serial_string+0x5>
     730:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <tmc_serial_string+0x4>

00000734 <.Loc.384>:
     734:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <tmc_serial_string+0x6>
     738:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <tmc_serial_string+0x7>
     73c:	c0 97       	sbiw	r24, 0x30	; 48
     73e:	0a 97       	sbiw	r24, 0x0a	; 10
     740:	08 f4       	brcc	.+2      	; 0x744 <L0^A+0x2>

00000742 <L0^A>:
     742:	c2 cf       	rjmp	.-124    	; 0x6c8 <.L60>
     744:	c2 cf       	rjmp	.-124    	; 0x6ca <.L59>

00000746 <check_bootloaderEntry>:
	if ( !(PINB & (1<<2)) ) /* check if PB2 is LOW*/
     746:	1a 9b       	sbis	0x03, 2	; 3

00000748 <.Loc.388>:
		Jump_To_Bootloader();
     748:	af cd       	rjmp	.-1186   	; 0x2a8 <Jump_To_Bootloader>

0000074a <.LVL114>:
}
     74a:	08 95       	ret

0000074c <eeprom_update_if_changed>:
{
     74c:	1f 93       	push	r17

0000074e <.LCFI6>:
     74e:	cf 93       	push	r28

00000750 <.LCFI7>:
     750:	df 93       	push	r29

00000752 <.LCFI8>:
     752:	d8 2f       	mov	r29, r24
     754:	c9 2f       	mov	r28, r25
     756:	16 2f       	mov	r17, r22

00000758 <.L137>:
	eeprom_busy_wait();
     758:	f9 99       	sbic	0x1f, 1	; 31
     75a:	fe cf       	rjmp	.-4      	; 0x758 <.L137>

0000075c <.Loc.396>:
	oldval = eeprom_read_byte((uint8_t*)addr); /* read previous gpib address */
     75c:	8d 2f       	mov	r24, r29

0000075e <.LVL116>:
     75e:	9c 2f       	mov	r25, r28
     760:	0e 94 4a 11 	call	0x2294	; 0x2294 <eeprom_read_byte>

00000764 <.LVL117>:
	if (oldval != value)
     764:	81 17       	cp	r24, r17
     766:	51 f0       	breq	.+20     	; 0x77c <.L136>

00000768 <.L139>:
		eeprom_busy_wait();
     768:	f9 99       	sbic	0x1f, 1	; 31
     76a:	fe cf       	rjmp	.-4      	; 0x768 <.L139>

0000076c <.Loc.404>:
		eeprom_write_byte((uint8_t*)addr, value);		
     76c:	61 2f       	mov	r22, r17
     76e:	8d 2f       	mov	r24, r29

00000770 <.LVL118>:
     770:	9c 2f       	mov	r25, r28

00000772 <.Loc.406>:
}
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	1f 91       	pop	r17

00000778 <.LVL119>:
		eeprom_write_byte((uint8_t*)addr, value);		
     778:	0c 94 52 11 	jmp	0x22a4	; 0x22a4 <eeprom_write_byte>

0000077c <.L136>:
}
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17

00000782 <.LVL121>:
     782:	08 95       	ret

00000784 <SetupHardware>:
	MCUSR &= ~(1 << WDRF);
     784:	84 b7       	in	r24, 0x34	; 52
     786:	87 7f       	andi	r24, 0xF7	; 247
     788:	84 bf       	out	0x34, r24	; 52

0000078a <.LBB414>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     78a:	0f b6       	in	r0, 0x3f	; 63
     78c:	f8 94       	cli
     78e:	a8 95       	wdr
     790:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     794:	88 61       	ori	r24, 0x18	; 24
     796:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     79a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     79e:	0f be       	out	0x3f, r0	; 63

000007a0 <.LBB417>:
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     7a0:	80 e8       	ldi	r24, 0x80	; 128
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	0f b6       	in	r0, 0x3f	; 63
     7a6:	f8 94       	cli
     7a8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     7ac:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     7b0:	0f be       	out	0x3f, r0	; 63

000007b2 <.LBE417>:
	USB_Init();
     7b2:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <USB_Init>

000007b6 <.LBB419>:
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     7b6:	e0 ee       	ldi	r30, 0xE0	; 224
     7b8:	f0 e0       	ldi	r31, 0x00	; 0
     7ba:	80 81       	ld	r24, Z
     7bc:	81 60       	ori	r24, 0x01	; 1
     7be:	80 83       	st	Z, r24

000007c0 <.LBE419>:
	TMC_SetInternalSerial(false);
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	c5 dc       	rcall	.-1654   	; 0x14e <TMC_SetInternalSerial>

000007c4 <.LVL125>:
	DDRF |= (1<<5);
     7c4:	85 9a       	sbi	0x10, 5	; 16

000007c6 <.Loc.431>:
	LED(1);
     7c6:	8d 9a       	sbi	0x11, 5	; 17

000007c8 <.Loc.433>:
}
     7c8:	08 95       	ret

000007ca <EVENT_USB_Device_Connect>:
}
     7ca:	08 95       	ret

000007cc <EVENT_USB_Device_Disconnect>:
     7cc:	08 95       	ret

000007ce <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     7ce:	42 e3       	ldi	r20, 0x32	; 50
     7d0:	61 ec       	ldi	r22, 0xC1	; 193
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <Endpoint_ConfigureEndpoint_Prv>

000007d8 <.LBB425>:
     7d8:	42 e3       	ldi	r20, 0x32	; 50
     7da:	61 e8       	ldi	r22, 0x81	; 129
     7dc:	82 e0       	ldi	r24, 0x02	; 2
     7de:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <Endpoint_ConfigureEndpoint_Prv>

000007e2 <.LBB429>:
     7e2:	42 e3       	ldi	r20, 0x32	; 50
     7e4:	60 e8       	ldi	r22, 0x80	; 128
     7e6:	83 e0       	ldi	r24, 0x03	; 3
     7e8:	0c 94 e4 0d 	jmp	0x1bc8	; 0x1bc8 <Endpoint_ConfigureEndpoint_Prv>

000007ec <EVENT_USB_Device_ControlRequest>:
{
     7ec:	cf 93       	push	r28

000007ee <.LCFI9>:
	if ( ((USB_ControlRequest.wIndex == INTERFACE_ID_TestAndMeasurement) && ((USB_ControlRequest.bmRequestType & REQREC_INTERFACE)!=0)) ||
     7ee:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <USB_ControlRequest+0x4>
     7f2:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <USB_ControlRequest+0x5>

000007f6 <.Loc.501>:
     7f6:	00 97       	sbiw	r24, 0x00	; 0
     7f8:	31 f4       	brne	.+12     	; 0x806 <.L147>

000007fa <.Loc.502>:
     7fa:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <USB_ControlRequest>
     7fe:	80 fd       	sbrc	r24, 0
     800:	0b c0       	rjmp	.+22     	; 0x818 <.L148>

00000802 <.L146>:
}
     802:	cf 91       	pop	r28
     804:	08 95       	ret

00000806 <.L147>:
	if ( ((USB_ControlRequest.wIndex == INTERFACE_ID_TestAndMeasurement) && ((USB_ControlRequest.bmRequestType & REQREC_INTERFACE)!=0)) ||
     806:	82 38       	cpi	r24, 0x82	; 130
     808:	91 05       	cpc	r25, r1
     80a:	11 f0       	breq	.+4      	; 0x810 <.L150>

0000080c <.Loc.505>:
	     (((USB_ControlRequest.wIndex == TMC_IN_EPADDR) || (USB_ControlRequest.wIndex == TMC_OUT_EPADDR)) && ((USB_ControlRequest.bmRequestType & REQREC_ENDPOINT)!=0))     )
     80c:	03 97       	sbiw	r24, 0x03	; 3
     80e:	c9 f7       	brne	.-14     	; 0x802 <.L146>

00000810 <.L150>:
     810:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <USB_ControlRequest>
     814:	81 ff       	sbrs	r24, 1
     816:	f5 cf       	rjmp	.-22     	; 0x802 <.L146>

00000818 <.L148>:
		switch (USB_ControlRequest.bRequest)
     818:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <USB_ControlRequest+0x1>

0000081c <.Loc.509>:
     81c:	87 30       	cpi	r24, 0x07	; 7
     81e:	09 f4       	brne	.+2      	; 0x822 <L0^A+0x2>

00000820 <L0^A>:
     820:	1b c1       	rjmp	.+566    	; 0xa58 <.L151>
     822:	08 f0       	brcs	.+2      	; 0x826 <L0^A+0x2>

00000824 <L0^A>:
     824:	41 c0       	rjmp	.+130    	; 0x8a8 <.L152>
     826:	84 30       	cpi	r24, 0x04	; 4
     828:	09 f4       	brne	.+2      	; 0x82c <L0^A+0x2>

0000082a <L0^A>:
     82a:	de c0       	rjmp	.+444    	; 0x9e8 <.L153>
     82c:	30 f5       	brcc	.+76     	; 0x87a <.L154>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	09 f4       	brne	.+2      	; 0x834 <L0^A+0x2>

00000832 <L0^A>:
     832:	7e c0       	rjmp	.+252    	; 0x930 <.L155>
     834:	83 30       	cpi	r24, 0x03	; 3
     836:	09 f4       	brne	.+2      	; 0x83a <L0^A+0x2>

00000838 <L0^A>:
     838:	b1 c0       	rjmp	.+354    	; 0x99c <.L156>
     83a:	81 30       	cpi	r24, 0x01	; 1
     83c:	11 f7       	brne	.-60     	; 0x802 <.L146>

0000083e <.Loc.510>:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
     83e:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <USB_ControlRequest>
     842:	92 3a       	cpi	r25, 0xA2	; 162
     844:	f1 f6       	brne	.-68     	; 0x802 <.L146>

00000846 <.Loc.512>:
					if (RequestInProgress != 0)
     846:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <RequestInProgress>
     84a:	91 11       	cpse	r25, r1
     84c:	6d c0       	rjmp	.+218    	; 0x928 <.L175>

0000084e <.Loc.514>:
					else if (USB_ControlRequest.wValue != CurrentTransferTag)
     84e:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <CurrentTransferTag>

00000852 <.Loc.516>:
     852:	20 91 e7 01 	lds	r18, 0x01E7	; 0x8001e7 <USB_ControlRequest+0x2>
     856:	30 91 e8 01 	lds	r19, 0x01E8	; 0x8001e8 <USB_ControlRequest+0x3>
     85a:	92 17       	cp	r25, r18
     85c:	13 06       	cpc	r1, r19
     85e:	09 f0       	breq	.+2      	; 0x862 <.Loc.517>

00000860 <L0^A>:
     860:	65 c0       	rjmp	.+202    	; 0x92c <.L176>

00000862 <.Loc.517>:
						RequestInProgress = Req_InitiateAbortBulkOut;
     862:	91 e0       	ldi	r25, 0x01	; 1
     864:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <RequestInProgress>

00000868 <.L166>:
IsTMCBulkOUTReset = true;
     868:	91 e0       	ldi	r25, 0x01	; 1
     86a:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <IsTMCBulkOUTReset>

0000086e <.LBB529>:
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     86e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     872:	97 7f       	andi	r25, 0xF7	; 247
     874:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00000878 <.LBB531>:
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     878:	3e c0       	rjmp	.+124    	; 0x8f6 <.L193>

0000087a <.L154>:
     87a:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <USB_ControlRequest>

0000087e <.LBE531>:
		switch (USB_ControlRequest.bRequest)
     87e:	85 30       	cpi	r24, 0x05	; 5
     880:	09 f0       	breq	.+2      	; 0x884 <.Loc.531>

00000882 <L0^A>:
     882:	cc c0       	rjmp	.+408    	; 0xa1c <.L191>

00000884 <.Loc.531>:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     884:	91 3a       	cpi	r25, 0xA1	; 161
     886:	09 f0       	breq	.+2      	; 0x88a <.Loc.533>

00000888 <L0^A>:
     888:	bc cf       	rjmp	.-136    	; 0x802 <.L146>

0000088a <.Loc.533>:
					if (RequestInProgress != 0)
     88a:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <RequestInProgress>
     88e:	99 23       	and	r25, r25
     890:	09 f4       	brne	.+2      	; 0x894 <.LBB533>

00000892 <L0^A>:
     892:	bc c0       	rjmp	.+376    	; 0xa0c <.L170>

00000894 <.LBB533>:
     894:	83 e8       	ldi	r24, 0x83	; 131
     896:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

0000089a <.L194>:
				UEINTX &= ~(1 << RXSTPI);
     89a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     89e:	87 7f       	andi	r24, 0xF7	; 247
     8a0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

000008a4 <.LBB537>:
				UEDATX = Data;
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	27 c0       	rjmp	.+78     	; 0x8f6 <.L193>

000008a8 <.L152>:
		switch (USB_ControlRequest.bRequest)
     8a8:	80 3a       	cpi	r24, 0xA0	; 160
     8aa:	09 f4       	brne	.+2      	; 0x8ae <L0^A+0x2>

000008ac <L0^A>:
     8ac:	07 c1       	rjmp	.+526    	; 0xabc <.L160>
     8ae:	30 f5       	brcc	.+76     	; 0x8fc <.L161>
     8b0:	80 34       	cpi	r24, 0x40	; 64
     8b2:	09 f4       	brne	.+2      	; 0x8b6 <L0^A+0x2>

000008b4 <L0^A>:
     8b4:	e6 c0       	rjmp	.+460    	; 0xa82 <.L162>
     8b6:	80 38       	cpi	r24, 0x80	; 128
     8b8:	09 f0       	breq	.+2      	; 0x8bc <.Loc.550>

000008ba <L0^A>:
     8ba:	a3 cf       	rjmp	.-186    	; 0x802 <.L146>

000008bc <.Loc.550>:
				btag = USB_ControlRequest.wValue;
     8bc:	c0 91 e7 01 	lds	r28, 0x01E7	; 0x8001e7 <USB_ControlRequest+0x2>

000008c0 <.LBB540>:
	timeout_val = timeout;
     8c0:	80 e5       	ldi	r24, 0x50	; 80
     8c2:	93 ec       	ldi	r25, 0xC3	; 195
     8c4:	a0 e0       	ldi	r26, 0x00	; 0
     8c6:	b0 e0       	ldi	r27, 0x00	; 0
     8c8:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <timeout_val>
     8cc:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <timeout_val+0x1>
     8d0:	a0 93 77 01 	sts	0x0177, r26	; 0x800177 <timeout_val+0x2>
     8d4:	b0 93 78 01 	sts	0x0178, r27	; 0x800178 <timeout_val+0x3>

000008d8 <.LBE540>:
				statusReg =  gpib_readStatusByte(gpib_addr, is_timedout);
     8d8:	65 e2       	ldi	r22, 0x25	; 37
     8da:	71 e0       	ldi	r23, 0x01	; 1
     8dc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     8e0:	b6 d6       	rcall	.+3436   	; 0x164e <gpib_readStatusByte>

000008e2 <.LBB542>:
				UEINTX &= ~(1 << RXSTPI);
     8e2:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8e6:	97 7f       	andi	r25, 0xF7	; 247
     8e8:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

000008ec <.LBB544>:
				UEDATX = Data;
     8ec:	91 e0       	ldi	r25, 0x01	; 1
     8ee:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

000008f2 <.LBB546>:
     8f2:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

000008f6 <.L193>:
     8f6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     8fa:	48 c0       	rjmp	.+144    	; 0x98c <.L195>

000008fc <.L161>:
		switch (USB_ControlRequest.bRequest)
     8fc:	81 3a       	cpi	r24, 0xA1	; 161
     8fe:	09 f4       	brne	.+2      	; 0x902 <.LVUS78+0x1>

00000900 <L0^A>:
     900:	e5 c0       	rjmp	.+458    	; 0xacc <.L164>
     902:	82 3a       	cpi	r24, 0xA2	; 162
     904:	09 f0       	breq	.+2      	; 0x908 <.LBB551>

00000906 <L0^A>:
     906:	7d cf       	rjmp	.-262    	; 0x802 <.L146>

00000908 <.LBB551>:
	timeout_val = timeout;
     908:	80 e5       	ldi	r24, 0x50	; 80
     90a:	93 ec       	ldi	r25, 0xC3	; 195
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <timeout_val>
     914:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <timeout_val+0x1>
     918:	a0 93 77 01 	sts	0x0177, r26	; 0x800177 <timeout_val+0x2>
     91c:	b0 93 78 01 	sts	0x0178, r27	; 0x800178 <timeout_val+0x3>

00000920 <.LBE551>:
				gpib_localLockout(is_timedout);
     920:	85 e2       	ldi	r24, 0x25	; 37
     922:	91 e0       	ldi	r25, 0x01	; 1
     924:	3c d6       	rcall	.+3192   	; 0x159e <gpib_localLockout>

00000926 <.LBB553>:
				UEINTX &= ~(1 << RXSTPI);
     926:	b9 cf       	rjmp	.-142    	; 0x89a <.L194>

00000928 <.L175>:
						TMCRequestStatus = TMC_STATUS_SPLIT_IN_PROGRESS;
     928:	83 e8       	ldi	r24, 0x83	; 131
     92a:	9e cf       	rjmp	.-196    	; 0x868 <.L166>

0000092c <.L176>:
						TMCRequestStatus = TMC_STATUS_TRANSFER_NOT_IN_PROGRESS;
     92c:	81 e8       	ldi	r24, 0x81	; 129
     92e:	9c cf       	rjmp	.-200    	; 0x868 <.L166>

00000930 <.L155>:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
     930:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <USB_ControlRequest>
     934:	92 3a       	cpi	r25, 0xA2	; 162
     936:	09 f0       	breq	.+2      	; 0x93a <.Loc.593>

00000938 <L0^A>:
     938:	64 cf       	rjmp	.-312    	; 0x802 <.L146>

0000093a <.Loc.593>:
					if (RequestInProgress != Req_InitiateAbortBulkOut)
     93a:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <RequestInProgress>

0000093e <.Loc.595>:
     93e:	91 30       	cpi	r25, 0x01	; 1
     940:	09 f0       	breq	.+2      	; 0x944 <.Loc.596>

00000942 <L0^A>:
     942:	62 c0       	rjmp	.+196    	; 0xa08 <.L180>

00000944 <.Loc.596>:
					else if (IsTMCBulkOUTReset)
     944:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <IsTMCBulkOUTReset>
     948:	91 11       	cpse	r25, r1
     94a:	03 c0       	rjmp	.+6      	; 0x952 <.L169>

0000094c <.L197>:
					  RequestInProgress = 0;
     94c:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <RequestInProgress>

00000950 <.Loc.600>:
	uint8_t TMCRequestStatus = TMC_STATUS_SUCCESS;
     950:	81 e0       	ldi	r24, 0x01	; 1

00000952 <.L169>:
     952:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     956:	97 7f       	andi	r25, 0xF7	; 247
     958:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

0000095c <.LBB557>:
				UEDATX = Data;
     95c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

00000960 <.LBB559>:
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     960:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

00000964 <.Loc.614>:
				UEDATX = (Data >> 8);
     964:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

00000968 <.LBE559>:
					Endpoint_Write_32_LE(LastTransferLength);
     968:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <LastTransferLength>
     96c:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <LastTransferLength+0x1>

00000970 <.LBB561>:
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     970:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

00000974 <.LBE561>:
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	a0 e0       	ldi	r26, 0x00	; 0

00000978 <.LBB564>:
				UEDATX = (Data >> 8);
     978:	89 2f       	mov	r24, r25
     97a:	9a 2f       	mov	r25, r26
     97c:	ab 2f       	mov	r26, r27
     97e:	bb 27       	eor	r27, r27

00000980 <.LVL153>:
     980:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

00000984 <.Loc.625>:
				UEDATX = (Data >> 16);
     984:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

00000988 <.L196>:
				UEDATX = Data;
     988:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

0000098c <.L195>:
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     98c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     990:	8e 77       	andi	r24, 0x7E	; 126
     992:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00000996 <.LBE569>:
}
     996:	cf 91       	pop	r28

00000998 <.Loc.643>:
				Endpoint_ClearStatusStage();
     998:	0c 94 18 0e 	jmp	0x1c30	; 0x1c30 <Endpoint_ClearStatusStage>

0000099c <.L156>:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
     99c:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <USB_ControlRequest>
     9a0:	92 3a       	cpi	r25, 0xA2	; 162
     9a2:	09 f0       	breq	.+2      	; 0x9a6 <.Loc.646>

000009a4 <L0^A>:
     9a4:	2e cf       	rjmp	.-420    	; 0x802 <.L146>

000009a6 <.Loc.646>:
					if (RequestInProgress != 0)
     9a6:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <RequestInProgress>
     9aa:	91 11       	cpse	r25, r1
     9ac:	19 c0       	rjmp	.+50     	; 0x9e0 <.L178>

000009ae <.Loc.648>:
					else if (USB_ControlRequest.wValue != CurrentTransferTag)
     9ae:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <CurrentTransferTag>

000009b2 <.Loc.650>:
     9b2:	20 91 e7 01 	lds	r18, 0x01E7	; 0x8001e7 <USB_ControlRequest+0x2>
     9b6:	30 91 e8 01 	lds	r19, 0x01E8	; 0x8001e8 <USB_ControlRequest+0x3>
     9ba:	92 17       	cp	r25, r18
     9bc:	13 06       	cpc	r1, r19
     9be:	91 f4       	brne	.+36     	; 0x9e4 <.L179>

000009c0 <.Loc.651>:
						RequestInProgress = Req_InitiateAbortBulkIn;
     9c0:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <RequestInProgress>

000009c4 <.Loc.654>:
	uint8_t TMCRequestStatus = TMC_STATUS_SUCCESS;
     9c4:	81 e0       	ldi	r24, 0x01	; 1

000009c6 <.L168>:
					IsTMCBulkINReset = true;
     9c6:	91 e0       	ldi	r25, 0x01	; 1
     9c8:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <IsTMCBulkINReset>

000009cc <.LBB571>:
				UEINTX &= ~(1 << RXSTPI);
     9cc:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     9d0:	97 7f       	andi	r25, 0xF7	; 247
     9d2:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

000009d6 <.LBB573>:
				UEDATX = Data;
     9d6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

000009da <.LBE573>:
					Endpoint_Write_8(CurrentTransferTag);
     9da:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <CurrentTransferTag>

000009de <.LBB575>:
     9de:	8b cf       	rjmp	.-234    	; 0x8f6 <.L193>

000009e0 <.L178>:
						TMCRequestStatus = TMC_STATUS_SPLIT_IN_PROGRESS;
     9e0:	83 e8       	ldi	r24, 0x83	; 131
     9e2:	f1 cf       	rjmp	.-30     	; 0x9c6 <.L168>

000009e4 <.L179>:
						TMCRequestStatus = TMC_STATUS_TRANSFER_NOT_IN_PROGRESS;
     9e4:	81 e8       	ldi	r24, 0x81	; 129
     9e6:	ef cf       	rjmp	.-34     	; 0x9c6 <.L168>

000009e8 <.L153>:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
     9e8:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <USB_ControlRequest>
     9ec:	82 3a       	cpi	r24, 0xA2	; 162
     9ee:	09 f0       	breq	.+2      	; 0x9f2 <.Loc.674>

000009f0 <L0^A>:
     9f0:	08 cf       	rjmp	.-496    	; 0x802 <.L146>

000009f2 <.Loc.674>:
					if (RequestInProgress != Req_InitiateAbortBulkIn)
     9f2:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <RequestInProgress>
     9f6:	83 30       	cpi	r24, 0x03	; 3
     9f8:	39 f4       	brne	.+14     	; 0xa08 <.L180>

000009fa <.Loc.676>:
					else if (IsTMCBulkINReset)
     9fa:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <IsTMCBulkINReset>
     9fe:	88 23       	and	r24, r24
     a00:	09 f4       	brne	.+2      	; 0xa04 <.Loc.678>

00000a02 <L0^A>:
     a02:	a4 cf       	rjmp	.-184    	; 0x94c <.L197>

00000a04 <.Loc.678>:
					  TMCRequestStatus = TMC_STATUS_PENDING;
     a04:	82 e0       	ldi	r24, 0x02	; 2
     a06:	a5 cf       	rjmp	.-182    	; 0x952 <.L169>

00000a08 <.L180>:
					  TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
     a08:	82 e8       	ldi	r24, 0x82	; 130
     a0a:	a3 cf       	rjmp	.-186    	; 0x952 <.L169>

00000a0c <.L170>:
						IsTMCBulkINReset  = true;
     a0c:	91 e0       	ldi	r25, 0x01	; 1
     a0e:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <IsTMCBulkINReset>

00000a12 <.Loc.682>:
						IsTMCBulkOUTReset = true;
     a12:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <IsTMCBulkOUTReset>

00000a16 <.Loc.684>:
						RequestInProgress = Req_InitiateClear;
     a16:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <RequestInProgress>

00000a1a <.LBB577>:
				UEINTX &= ~(1 << RXSTPI);
     a1a:	3f cf       	rjmp	.-386    	; 0x89a <.L194>

00000a1c <.L191>:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     a1c:	91 3a       	cpi	r25, 0xA1	; 161
     a1e:	09 f0       	breq	.+2      	; 0xa22 <.Loc.691>

00000a20 <L0^A>:
     a20:	f0 ce       	rjmp	.-544    	; 0x802 <.L146>

00000a22 <.Loc.691>:
					if (RequestInProgress != Req_InitiateClear)
     a22:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <RequestInProgress>
     a26:	85 30       	cpi	r24, 0x05	; 5
     a28:	99 f4       	brne	.+38     	; 0xa50 <.L182>

00000a2a <.Loc.693>:
					else if (IsTMCBulkINReset || IsTMCBulkOUTReset)
     a2a:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <IsTMCBulkINReset>
     a2e:	81 11       	cpse	r24, r1
     a30:	11 c0       	rjmp	.+34     	; 0xa54 <.L184>

00000a32 <.Loc.695>:
     a32:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <IsTMCBulkOUTReset>
     a36:	81 11       	cpse	r24, r1
     a38:	0d c0       	rjmp	.+26     	; 0xa54 <.L184>

00000a3a <.Loc.696>:
						RequestInProgress = 0;
     a3a:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <RequestInProgress>

00000a3e <.Loc.698>:
	uint8_t TMCRequestStatus = TMC_STATUS_SUCCESS;
     a3e:	81 e0       	ldi	r24, 0x01	; 1

00000a40 <.L172>:
     a40:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a44:	97 7f       	andi	r25, 0xF7	; 247
     a46:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00000a4a <.LBB581>:
				UEDATX = Data;
     a4a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     a4e:	9c cf       	rjmp	.-200    	; 0x988 <.L196>

00000a50 <.L182>:
						TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
     a50:	82 e8       	ldi	r24, 0x82	; 130
     a52:	f6 cf       	rjmp	.-20     	; 0xa40 <.L172>

00000a54 <.L184>:
						TMCRequestStatus = TMC_STATUS_PENDING;
     a54:	82 e0       	ldi	r24, 0x02	; 2
     a56:	f4 cf       	rjmp	.-24     	; 0xa40 <.L172>

00000a58 <.L151>:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     a58:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <USB_ControlRequest>
     a5c:	81 3a       	cpi	r24, 0xA1	; 161
     a5e:	09 f0       	breq	.+2      	; 0xa62 <.LBB583>

00000a60 <L0^A>:
     a60:	d0 ce       	rjmp	.-608    	; 0x802 <.L146>

00000a62 <.LBB583>:
				UEINTX &= ~(1 << RXSTPI);
     a62:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a66:	87 7f       	andi	r24, 0xF7	; 247
     a68:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00000a6c <.LBE583>:
					Endpoint_Write_Control_Stream_LE(&Capabilities, sizeof(TMC_Capabilities_t));
     a6c:	68 e1       	ldi	r22, 0x18	; 24
     a6e:	70 e0       	ldi	r23, 0x00	; 0
     a70:	83 e0       	ldi	r24, 0x03	; 3
     a72:	91 e0       	ldi	r25, 0x01	; 1
     a74:	89 d7       	rcall	.+3858   	; 0x1988 <Endpoint_Write_Control_Stream_LE>

00000a76 <.LBB585>:
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     a76:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a7a:	8b 77       	andi	r24, 0x7B	; 123
     a7c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00000a80 <.Loc.721>:
			}
     a80:	c0 ce       	rjmp	.-640    	; 0x802 <.L146>

00000a82 <.L162>:
				UEINTX &= ~(1 << RXSTPI);
     a82:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a86:	87 7f       	andi	r24, 0xF7	; 247
     a88:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00000a8c <.LBB589>:
				UEDATX = Data;
     a8c:	c1 e0       	ldi	r28, 0x01	; 1
     a8e:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

00000a92 <.LBB591>:
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a92:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a96:	8e 77       	andi	r24, 0x7E	; 126
     a98:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00000a9c <.LBE591>:
				Endpoint_ClearStatusStage();
     a9c:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <Endpoint_ClearStatusStage>

00000aa0 <.LVL168>:
				LED(0);
     aa0:	8d 98       	cbi	0x11, 5	; 17

00000aa2 <.LBB593>:
     aa2:	2f ef       	ldi	r18, 0xFF	; 255
     aa4:	84 e3       	ldi	r24, 0x34	; 52
     aa6:	9c e0       	ldi	r25, 0x0C	; 12

00000aa8 <.L1^B5>:
     aa8:	21 50       	subi	r18, 0x01	; 1
     aaa:	80 40       	sbci	r24, 0x00	; 0
     aac:	90 40       	sbci	r25, 0x00	; 0
     aae:	e1 f7       	brne	.-8      	; 0xaa8 <.L1^B5>
     ab0:	00 c0       	rjmp	.+0      	; 0xab2 <L0^A>

00000ab2 <L0^A>:
     ab2:	00 00       	nop

00000ab4 <.LBE596>:
				LED(1);
     ab4:	8d 9a       	sbi	0x11, 5	; 17

00000ab6 <.Loc.752>:
				s_nextwrite_mightbeparameterset = true;
     ab6:	c0 93 26 01 	sts	0x0126, r28	; 0x800126 <s_nextwrite_mightbeparameterset>

00000aba <.Loc.755>:
				break;
     aba:	a3 ce       	rjmp	.-698    	; 0x802 <.L146>

00000abc <.L160>:
				if ((USB_ControlRequest.wValue & 0xff) == 1)
     abc:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <USB_ControlRequest+0x2>

00000ac0 <.Loc.758>:
     ac0:	81 30       	cpi	r24, 0x01	; 1
     ac2:	11 f4       	brne	.+4      	; 0xac8 <.L173>

00000ac4 <.L192>:
					gpib_ren(0);
     ac4:	94 d4       	rcall	.+2344   	; 0x13ee <gpib_ren>

00000ac6 <.LBB597>:
				UEINTX &= ~(1 << RXSTPI);
     ac6:	e9 ce       	rjmp	.-558    	; 0x89a <.L194>

00000ac8 <.L173>:
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	fc cf       	rjmp	.-8      	; 0xac4 <.L192>

00000acc <.L164>:
	timeout_val = timeout;
     acc:	80 e5       	ldi	r24, 0x50	; 80
     ace:	93 ec       	ldi	r25, 0xC3	; 195
     ad0:	a0 e0       	ldi	r26, 0x00	; 0
     ad2:	b0 e0       	ldi	r27, 0x00	; 0
     ad4:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <timeout_val>
     ad8:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <timeout_val+0x1>
     adc:	a0 93 77 01 	sts	0x0177, r26	; 0x800177 <timeout_val+0x2>
     ae0:	b0 93 78 01 	sts	0x0178, r27	; 0x800178 <timeout_val+0x3>

00000ae4 <.LBE599>:
				gpib_gotoLocal(gpib_addr, is_timedout);
     ae4:	65 e2       	ldi	r22, 0x25	; 37
     ae6:	71 e0       	ldi	r23, 0x01	; 1
     ae8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     aec:	40 d5       	rcall	.+2688   	; 0x156e <gpib_gotoLocal>

00000aee <.LVL174>:
     aee:	d5 ce       	rjmp	.-598    	; 0x89a <.L194>

00000af0 <ProcessInternalCommand>:
					0x00 or 0xff => EOI termination
					0x01         => EOI or '\n' (LF = linefeed)
					0x02         => EOI or '\r' (CR = carriage return)
*/
void ProcessInternalCommand(uint8_t* const Data, uint8_t Length)
{
     af0:	0f 93       	push	r16

00000af2 <.LCFI10>:
     af2:	1f 93       	push	r17

00000af4 <.LCFI11>:
     af4:	cf 93       	push	r28

00000af6 <.LCFI12>:
     af6:	df 93       	push	r29

00000af8 <.LCFI13>:
     af8:	8c 01       	movw	r16, r24

00000afa <.Loc.772>:
	uint8_t xx, yy;
	
	xx = charToval(Data[1])*16 + charToval(Data[2]);
     afa:	fc 01       	movw	r30, r24
     afc:	81 81       	ldd	r24, Z+1	; 0x01

00000afe <.LVL176>:
     afe:	92 db       	rcall	.-2268   	; 0x224 <charToval>

00000b00 <.LVL177>:
     b00:	d8 2f       	mov	r29, r24

00000b02 <.Loc.777>:
     b02:	f8 01       	movw	r30, r16
     b04:	82 81       	ldd	r24, Z+2	; 0x02
     b06:	8e db       	rcall	.-2276   	; 0x224 <charToval>

00000b08 <.LVL178>:
     b08:	d2 95       	swap	r29
     b0a:	d0 7f       	andi	r29, 0xF0	; 240

00000b0c <.Loc.779>:
     b0c:	d8 0f       	add	r29, r24

00000b0e <.LVL179>:
	yy = charToval(Data[3])*16 + charToval(Data[4]);
     b0e:	f8 01       	movw	r30, r16
     b10:	83 81       	ldd	r24, Z+3	; 0x03
     b12:	88 db       	rcall	.-2288   	; 0x224 <charToval>

00000b14 <.LVL180>:
     b14:	c8 2f       	mov	r28, r24

00000b16 <.Loc.782>:
     b16:	f8 01       	movw	r30, r16
     b18:	84 81       	ldd	r24, Z+4	; 0x04
     b1a:	84 db       	rcall	.-2296   	; 0x224 <charToval>

00000b1c <.LVL181>:
     b1c:	6c 2f       	mov	r22, r28
     b1e:	62 95       	swap	r22
     b20:	60 7f       	andi	r22, 0xF0	; 240

00000b22 <.Loc.784>:
     b22:	68 0f       	add	r22, r24

00000b24 <.LVL182>:
	
	switch (xx)
     b24:	dd 23       	and	r29, r29
     b26:	39 f0       	breq	.+14     	; 0xb36 <.L199>
     b28:	d1 30       	cpi	r29, 0x01	; 1
     b2a:	61 f0       	breq	.+24     	; 0xb44 <.L200>

00000b2c <.Loc.786>:
					gpib_set_readtermination('\0');
					break;
			}
			break;
	}
}
     b2c:	df 91       	pop	r29

00000b2e <.LVL183>:
     b2e:	cf 91       	pop	r28
     b30:	1f 91       	pop	r17
     b32:	0f 91       	pop	r16

00000b34 <.LVL184>:
     b34:	08 95       	ret

00000b36 <.L199>:
			eeprom_update_if_changed(104, yy);
     b36:	88 e6       	ldi	r24, 0x68	; 104
     b38:	90 e0       	ldi	r25, 0x00	; 0

00000b3a <.Loc.790>:
}
     b3a:	df 91       	pop	r29

00000b3c <.LVL186>:
     b3c:	cf 91       	pop	r28
     b3e:	1f 91       	pop	r17
     b40:	0f 91       	pop	r16

00000b42 <.LVL187>:
			eeprom_update_if_changed(104, yy);
     b42:	04 ce       	rjmp	.-1016   	; 0x74c <eeprom_update_if_changed>

00000b44 <.L200>:
			switch (yy)
     b44:	61 30       	cpi	r22, 0x01	; 1
     b46:	41 f0       	breq	.+16     	; 0xb58 <.L202>
     b48:	62 30       	cpi	r22, 0x02	; 2
     b4a:	81 f0       	breq	.+32     	; 0xb6c <.L203>

00000b4c <.Loc.794>:
					eeprom_update_if_changed(105, '\0');
     b4c:	60 e0       	ldi	r22, 0x00	; 0

00000b4e <.LVL189>:
     b4e:	89 e6       	ldi	r24, 0x69	; 105
     b50:	90 e0       	ldi	r25, 0x00	; 0

00000b52 <.LVL190>:
     b52:	fc dd       	rcall	.-1032   	; 0x74c <eeprom_update_if_changed>

00000b54 <.LVL191>:
					gpib_set_readtermination('\0');
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	05 c0       	rjmp	.+10     	; 0xb62 <.L207>

00000b58 <.L202>:
					eeprom_update_if_changed(105, '\n');
     b58:	6a e0       	ldi	r22, 0x0A	; 10

00000b5a <.LVL193>:
     b5a:	89 e6       	ldi	r24, 0x69	; 105
     b5c:	90 e0       	ldi	r25, 0x00	; 0

00000b5e <.LVL194>:
     b5e:	f6 dd       	rcall	.-1044   	; 0x74c <eeprom_update_if_changed>

00000b60 <.LVL195>:
					gpib_set_readtermination('\n');
     b60:	8a e0       	ldi	r24, 0x0A	; 10

00000b62 <.L207>:
}
     b62:	df 91       	pop	r29

00000b64 <.LVL196>:
     b64:	cf 91       	pop	r28

00000b66 <.Loc.804>:
     b66:	1f 91       	pop	r17
     b68:	0f 91       	pop	r16

00000b6a <.LVL197>:
					gpib_set_readtermination('\0');
     b6a:	0e c6       	rjmp	.+3100   	; 0x1788 <gpib_set_readtermination>

00000b6c <.L203>:
					eeprom_update_if_changed(105, '\r');
     b6c:	6d e0       	ldi	r22, 0x0D	; 13

00000b6e <.LVL199>:
     b6e:	89 e6       	ldi	r24, 0x69	; 105
     b70:	90 e0       	ldi	r25, 0x00	; 0

00000b72 <.LVL200>:
     b72:	ec dd       	rcall	.-1064   	; 0x74c <eeprom_update_if_changed>

00000b74 <.LVL201>:
					gpib_set_readtermination('\r');
     b74:	8d e0       	ldi	r24, 0x0D	; 13
     b76:	f5 cf       	rjmp	.-22     	; 0xb62 <.L207>

00000b78 <ProcessSentMessage>:

void ProcessSentMessage(uint8_t* const Data, uint8_t Length, bool isFirstTransfer, bool isLastTransfer, gpibtimeout_t ptimeoutfunc)
{
     b78:	df 92       	push	r13

00000b7a <.LCFI14>:
     b7a:	ef 92       	push	r14

00000b7c <.LCFI15>:
     b7c:	ff 92       	push	r15

00000b7e <.LCFI16>:
     b7e:	0f 93       	push	r16

00000b80 <.LCFI17>:
     b80:	1f 93       	push	r17

00000b82 <.LCFI18>:
     b82:	cf 93       	push	r28

00000b84 <.LCFI19>:
     b84:	df 93       	push	r29

00000b86 <.LCFI20>:
     b86:	7c 01       	movw	r14, r24
     b88:	d6 2f       	mov	r29, r22
     b8a:	c4 2f       	mov	r28, r20
     b8c:	d2 2e       	mov	r13, r18

00000b8e <.Loc.812>:
	uint8_t i, dat;
	bool timedout, isinternalcommand;
	
	
	/* check, if this is an internal command */ 
	isinternalcommand = isFirstTransfer && isFirstTransfer && s_nextwrite_mightbeparameterset && (Data[0] == '!');
     b8e:	44 23       	and	r20, r20
     b90:	f1 f0       	breq	.+60     	; 0xbce <.L209>

00000b92 <.Loc.816>:
     b92:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <s_nextwrite_mightbeparameterset>

00000b96 <.LVL203>:
     b96:	88 23       	and	r24, r24
     b98:	d1 f0       	breq	.+52     	; 0xbce <.L209>

00000b9a <.Loc.818>:
     b9a:	f7 01       	movw	r30, r14
     b9c:	80 81       	ld	r24, Z
     b9e:	81 32       	cpi	r24, 0x21	; 33
     ba0:	b1 f4       	brne	.+44     	; 0xbce <.L209>

00000ba2 <.LVL204>:
	if (isinternalcommand)
	{
		ProcessInternalCommand(Data, Length);
     ba2:	c7 01       	movw	r24, r14
     ba4:	a5 df       	rcall	.-182    	; 0xaf0 <ProcessInternalCommand>

00000ba6 <.LVL205>:
     ba6:	22 c0       	rjmp	.+68     	; 0xbec <.L216>

00000ba8 <.L229>:
			timedout = gpib_make_listener(gpib_addr, ptimeoutfunc);
			
		i = 0;
		while ( (Length > 0) && !timedout)
		{
			Length--;
     ba8:	d1 50       	subi	r29, 0x01	; 1

00000baa <.LVL207>:
			dat = Data[i++];
     baa:	f7 01       	movw	r30, r14
     bac:	81 91       	ld	r24, Z+
     bae:	7f 01       	movw	r14, r30

00000bb0 <.LVL208>:
			timedout = gpib_writedat(dat, (Length == 0)  && isLastTransfer, ptimeoutfunc);
     bb0:	d1 11       	cpse	r29, r1
     bb2:	01 c0       	rjmp	.+2      	; 0xbb6 <.L212>
     bb4:	cd 2d       	mov	r28, r13

00000bb6 <.L212>:
     bb6:	6c 2f       	mov	r22, r28
     bb8:	61 70       	andi	r22, 0x01	; 1
     bba:	a8 01       	movw	r20, r16
     bbc:	df d5       	rcall	.+3006   	; 0x177c <gpib_writedat>

00000bbe <.LVL210>:
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <.L231>

00000bc0 <.L213>:
		}
		
		if (isLastTransfer && !timedout) /* in case of timeout the interface is cleared within the writedat function, no need to untalk!*/
     bc0:	dd 20       	and	r13, r13
     bc2:	99 f0       	breq	.+38     	; 0xbea <.L214>

00000bc4 <.Loc.832>:
     bc4:	c1 11       	cpse	r28, r1
     bc6:	11 c0       	rjmp	.+34     	; 0xbea <.L214>

00000bc8 <.Loc.833>:
			gpib_untalk_unlisten(ptimeoutfunc);
     bc8:	c8 01       	movw	r24, r16
     bca:	7f d5       	rcall	.+2814   	; 0x16ca <gpib_untalk_unlisten>

00000bcc <.LVL212>:
     bcc:	0e c0       	rjmp	.+28     	; 0xbea <.L214>

00000bce <.L209>:
		gpib_ren(1); /* ensure that remote control is enabled */
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	0e d4       	rcall	.+2076   	; 0x13ee <gpib_ren>

00000bd2 <.LVL214>:
		LED(0);
     bd2:	8d 98       	cbi	0x11, 5	; 17

00000bd4 <.Loc.839>:
		if (isFirstTransfer)
     bd4:	cc 23       	and	r28, r28
     bd6:	29 f0       	breq	.+10     	; 0xbe2 <.L211>

00000bd8 <.Loc.842>:
			timedout = gpib_make_listener(gpib_addr, ptimeoutfunc);
     bd8:	b8 01       	movw	r22, r16
     bda:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     bde:	aa d5       	rcall	.+2900   	; 0x1734 <gpib_make_listener>

00000be0 <.L231>:
			timedout = gpib_writedat(dat, (Length == 0)  && isLastTransfer, ptimeoutfunc);
     be0:	c8 2f       	mov	r28, r24

00000be2 <.L211>:
		while ( (Length > 0) && !timedout)
     be2:	dd 23       	and	r29, r29
     be4:	69 f3       	breq	.-38     	; 0xbc0 <.L213>

00000be6 <.Loc.846>:
     be6:	cc 23       	and	r28, r28
     be8:	f9 f2       	breq	.-66     	; 0xba8 <.L229>

00000bea <.L214>:
		LED(1);
     bea:	8d 9a       	sbi	0x11, 5	; 17

00000bec <.L216>:
	}
	s_nextwrite_mightbeparameterset = false;
     bec:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <s_nextwrite_mightbeparameterset>

00000bf0 <.Loc.852>:
}
     bf0:	df 91       	pop	r29

00000bf2 <.LVL218>:
     bf2:	cf 91       	pop	r28
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16

00000bf8 <.LVL219>:
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	df 90       	pop	r13

00000bfe <.LVL220>:
     bfe:	08 95       	ret

00000c00 <GetNextMessage>:

uint8_t GetNextMessage(uint8_t* const Data, uint8_t maxlen, bool isFirstMessage, bool *pisLastMessage, gpibtimeout_t ptimeoutfunc)
{
     c00:	8f 92       	push	r8

00000c02 <.LCFI21>:
     c02:	9f 92       	push	r9

00000c04 <.LCFI22>:
     c04:	af 92       	push	r10

00000c06 <.LCFI23>:
     c06:	bf 92       	push	r11

00000c08 <.LCFI24>:
     c08:	cf 92       	push	r12

00000c0a <.LCFI25>:
     c0a:	df 92       	push	r13

00000c0c <.LCFI26>:
     c0c:	ef 92       	push	r14

00000c0e <.LCFI27>:
     c0e:	ff 92       	push	r15

00000c10 <.LCFI28>:
     c10:	0f 93       	push	r16

00000c12 <.LCFI29>:
     c12:	1f 93       	push	r17

00000c14 <.LCFI30>:
     c14:	cf 93       	push	r28

00000c16 <.LCFI31>:
     c16:	df 93       	push	r29

00000c18 <.LCFI32>:
     c18:	00 d0       	rcall	.+0      	; 0xc1a <L0^A>

00000c1a <L0^A>:
     c1a:	cd b7       	in	r28, 0x3d	; 61
     c1c:	de b7       	in	r29, 0x3e	; 62

00000c1e <.LCFI34>:
     c1e:	e8 2e       	mov	r14, r24
     c20:	b9 2e       	mov	r11, r25
     c22:	a6 2e       	mov	r10, r22
     c24:	f4 2e       	mov	r15, r20
     c26:	69 01       	movw	r12, r18

00000c28 <.Loc.858>:
	uint8_t c, i;
	bool    Eoi, timedout;
	
	gpib_ren(1); /* ensure that remote control is enabled */
     c28:	81 e0       	ldi	r24, 0x01	; 1

00000c2a <.LVL222>:
     c2a:	e1 d3       	rcall	.+1986   	; 0x13ee <gpib_ren>

00000c2c <.LVL223>:
	
	LED(0);	
     c2c:	8d 98       	cbi	0x11, 5	; 17

00000c2e <.Loc.864>:
	
	timedout = false;
     c2e:	19 82       	std	Y+1, r1	; 0x01

00000c30 <.Loc.867>:
	if (isFirstMessage)
     c30:	ff 20       	and	r15, r15
     c32:	29 f0       	breq	.+10     	; 0xc3e <.L233>

00000c34 <.Loc.869>:
		timedout = gpib_make_talker(gpib_addr, ptimeoutfunc);
     c34:	b8 01       	movw	r22, r16
     c36:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     c3a:	5d d5       	rcall	.+2746   	; 0x16f6 <gpib_make_talker>

00000c3c <.LVL224>:
     c3c:	89 83       	std	Y+1, r24	; 0x01

00000c3e <.L233>:

	i = 0;
	Eoi = false;
     c3e:	1a 82       	std	Y+2, r1	; 0x02

00000c40 <.Loc.875>:

	while (!Eoi && (i < maxlen) && !timedout)
     c40:	87 e2       	ldi	r24, 0x27	; 39
     c42:	88 2e       	mov	r8, r24
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	98 2e       	mov	r9, r24

00000c48 <.Loc.876>:
	i = 0;
     c48:	f1 2c       	mov	r15, r1

00000c4a <.L235>:
	while (!Eoi && (i < maxlen) && !timedout)
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
     c4c:	9a 81       	ldd	r25, Y+2	; 0x02
     c4e:	91 11       	cpse	r25, r1
     c50:	31 c0       	rjmp	.+98     	; 0xcb4 <.L236>

00000c52 <.Loc.878>:
     c52:	fa 14       	cp	r15, r10
     c54:	99 f1       	breq	.+102    	; 0xcbc <.L237>

00000c56 <.Loc.879>:
     c56:	88 23       	and	r24, r24
     c58:	f1 f0       	breq	.+60     	; 0xc96 <.L238>

00000c5a <.L240>:
		
	if (Eoi && !timedout) /* in case of timeout, no need to unlisten => interface clear done in readdat function! */
		gpib_untalk_unlisten(ptimeoutfunc);

	if (timedout) /* in case of timedout, simulate an end of message */
		Eoi = true;
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	8a 83       	std	Y+2, r24	; 0x02

00000c5e <.L239>:
	*pisLastMessage = Eoi;
     c5e:	8a 81       	ldd	r24, Y+2	; 0x02
     c60:	f6 01       	movw	r30, r12
     c62:	80 83       	st	Z, r24

00000c64 <.Loc.884>:
	
//NextResponseBuffer[i++]	= gpib_search();

	memcpy((char*)Data, (char*)NextResponseBuffer, i);
     c64:	4f 2d       	mov	r20, r15
     c66:	50 e0       	ldi	r21, 0x00	; 0
     c68:	67 e2       	ldi	r22, 0x27	; 39
     c6a:	71 e0       	ldi	r23, 0x01	; 1
     c6c:	8e 2d       	mov	r24, r14
     c6e:	9b 2d       	mov	r25, r11
     c70:	0e 94 41 11 	call	0x2282	; 0x2282 <memcpy>

00000c74 <.LVL227>:
	
	LED(1);
     c74:	8d 9a       	sbi	0x11, 5	; 17

00000c76 <.Loc.887>:

	return i;
}
     c76:	8f 2d       	mov	r24, r15
     c78:	0f 90       	pop	r0
     c7a:	0f 90       	pop	r0
     c7c:	df 91       	pop	r29
     c7e:	cf 91       	pop	r28
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16

00000c84 <.LVL228>:
     c84:	ff 90       	pop	r15

00000c86 <.LVL229>:
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	cf 90       	pop	r12

00000c8c <.LVL230>:
     c8c:	bf 90       	pop	r11
     c8e:	af 90       	pop	r10

00000c90 <.LVL231>:
     c90:	9f 90       	pop	r9
     c92:	8f 90       	pop	r8
     c94:	08 95       	ret

00000c96 <.L238>:
		c = gpib_readdat(&Eoi, &timedout, ptimeoutfunc); 
     c96:	a8 01       	movw	r20, r16
     c98:	be 01       	movw	r22, r28
     c9a:	6f 5f       	subi	r22, 0xFF	; 255
     c9c:	7f 4f       	sbci	r23, 0xFF	; 255
     c9e:	ce 01       	movw	r24, r28
     ca0:	02 96       	adiw	r24, 0x02	; 2
     ca2:	88 d4       	rcall	.+2320   	; 0x15b4 <gpib_readdat>

00000ca4 <.LVL233>:
		if (!timedout)
     ca4:	99 81       	ldd	r25, Y+1	; 0x01
     ca6:	91 11       	cpse	r25, r1
     ca8:	d0 cf       	rjmp	.-96     	; 0xc4a <.L235>

00000caa <.Loc.898>:
			NextResponseBuffer[i++] = c;
     caa:	f3 94       	inc	r15

00000cac <.Loc.900>:
     cac:	f4 01       	movw	r30, r8
     cae:	81 93       	st	Z+, r24
     cb0:	4f 01       	movw	r8, r30
     cb2:	cb cf       	rjmp	.-106    	; 0xc4a <.L235>

00000cb4 <.L236>:
	if (Eoi && !timedout) /* in case of timeout, no need to unlisten => interface clear done in readdat function! */
     cb4:	81 11       	cpse	r24, r1
     cb6:	d1 cf       	rjmp	.-94     	; 0xc5a <.L240>

00000cb8 <.Loc.903>:
		gpib_untalk_unlisten(ptimeoutfunc);
     cb8:	c8 01       	movw	r24, r16
     cba:	07 d5       	rcall	.+2574   	; 0x16ca <gpib_untalk_unlisten>

00000cbc <.L237>:
	if (timedout) /* in case of timedout, simulate an end of message */
     cbc:	89 81       	ldd	r24, Y+1	; 0x01
     cbe:	88 23       	and	r24, r24
     cc0:	71 f2       	breq	.-100    	; 0xc5e <.L239>
     cc2:	cb cf       	rjmp	.-106    	; 0xc5a <.L240>

00000cc4 <TMC_resetstates>:
bool TMC_eom;
bool TMC_InLastMessageComplete = true;

void TMC_resetstates(void)
{
	TMC_LastMessageComplete = true;
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <TMC_LastMessageComplete>

00000cca <.Loc.909>:
	TMC_InLastMessageComplete = true;
     cca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <TMC_InLastMessageComplete>

00000cce <.Loc.911>:
	s_remaining_bytes_receive = 0;
     cce:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <s_remaining_bytes_receive>
     cd2:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <s_remaining_bytes_receive+0x1>
     cd6:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <s_remaining_bytes_receive+0x2>
     cda:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <s_remaining_bytes_receive+0x3>

00000cde <.Loc.913>:
	gpib_interface_clear();
     cde:	8d c3       	rjmp	.+1818   	; 0x13fa <gpib_interface_clear>

00000ce0 <ReadTMCHeader>:
 *  \param[out] MessageHeader  Pointer to a location where the read header (if any) should be stored
 *
 *  \return Boolean \c true if a header was read, \c false otherwise
 */
bool ReadTMCHeader(TMC_MessageHeader_t* const MessageHeader)
{
     ce0:	0f 93       	push	r16

00000ce2 <.LCFI35>:
     ce2:	1f 93       	push	r17

00000ce4 <.LCFI36>:
     ce4:	cf 93       	push	r28

00000ce6 <.LCFI37>:
     ce6:	df 93       	push	r29

00000ce8 <.LCFI38>:
     ce8:	00 d0       	rcall	.+0      	; 0xcea <L0^A>

00000cea <L0^A>:
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62

00000cee <.LCFI40>:
     cee:	8c 01       	movw	r16, r24

00000cf0 <.LBB601>:
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cf0:	83 e0       	ldi	r24, 0x03	; 3

00000cf2 <.LVL240>:
     cf2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

00000cf6 <.LBB603>:
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     cf6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00000cfa <.LBE603>:

	/* Select the Data Out endpoint */
	Endpoint_SelectEndpoint(TMC_OUT_EPADDR);

	/* Abort if no command has been sent from the host */
	if (!(Endpoint_IsOUTReceived()))
     cfa:	82 ff       	sbrs	r24, 2
     cfc:	21 c0       	rjmp	.+66     	; 0xd40 <.L257>

00000cfe <.Loc.929>:
	  return false;

	/* Read in the header of the command from the host */
	BytesTransferred = 0;
     cfe:	1a 82       	std	Y+2, r1	; 0x02
     d00:	19 82       	std	Y+1, r1	; 0x01

00000d02 <.L252>:
	while ((ErrorCode = Endpoint_Read_Stream_LE(MessageHeader, sizeof(TMC_MessageHeader_t), &BytesTransferred)) ==
     d02:	ae 01       	movw	r20, r28
     d04:	4f 5f       	subi	r20, 0xFF	; 255
     d06:	5f 4f       	sbci	r21, 0xFF	; 255
     d08:	6c e0       	ldi	r22, 0x0C	; 12
     d0a:	70 e0       	ldi	r23, 0x00	; 0
     d0c:	c8 01       	movw	r24, r16
     d0e:	ef d5       	rcall	.+3038   	; 0x18ee <Endpoint_Read_Stream_LE>

00000d10 <.LVL242>:
     d10:	98 2f       	mov	r25, r24

00000d12 <.LVL243>:
     d12:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <IsTMCBulkOUTReset>

00000d16 <.LVL244>:
     d16:	95 30       	cpi	r25, 0x05	; 5
     d18:	11 f4       	brne	.+4      	; 0xd1e <.L253>

00000d1a <.Loc.936>:
	       ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (IsTMCBulkOUTReset)
     d1a:	88 23       	and	r24, r24
     d1c:	91 f3       	breq	.-28     	; 0xd02 <.L252>

00000d1e <.L253>:
		  break;
	}

	/* Store the new command tag value for later use */
	CurrentTransferTag = MessageHeader->Tag;
     d1e:	f8 01       	movw	r30, r16
     d20:	21 81       	ldd	r18, Z+1	; 0x01
     d22:	20 93 69 01 	sts	0x0169, r18	; 0x800169 <CurrentTransferTag>

00000d26 <.Loc.940>:

	/* Indicate if the command has been aborted or not */
	return (!(IsTMCBulkOUTReset) && (ErrorCode == ENDPOINT_RWSTREAM_NoError));
     d26:	81 11       	cpse	r24, r1
     d28:	02 c0       	rjmp	.+4      	; 0xd2e <.L258>

00000d2a <.Loc.942>:
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	91 11       	cpse	r25, r1

00000d2e <.L258>:
     d2e:	80 e0       	ldi	r24, 0x00	; 0

00000d30 <.Loc.944>:
     d30:	81 70       	andi	r24, 0x01	; 1

00000d32 <.L250>:
}
     d32:	0f 90       	pop	r0
     d34:	0f 90       	pop	r0
     d36:	df 91       	pop	r29
     d38:	cf 91       	pop	r28
     d3a:	1f 91       	pop	r17
     d3c:	0f 91       	pop	r16

00000d3e <.LVL246>:
     d3e:	08 95       	ret

00000d40 <.L257>:
	  return false;
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	f7 cf       	rjmp	.-18     	; 0xd32 <.L250>

00000d44 <WriteTMCHeader>:

bool WriteTMCHeader(TMC_MessageHeader_t* const MessageHeader)
{
     d44:	0f 93       	push	r16

00000d46 <.LCFI41>:
     d46:	1f 93       	push	r17

00000d48 <.LCFI42>:
     d48:	cf 93       	push	r28

00000d4a <.LCFI43>:
     d4a:	df 93       	push	r29

00000d4c <.LCFI44>:
     d4c:	00 d0       	rcall	.+0      	; 0xd4e <L0^A>

00000d4e <L0^A>:
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62

00000d52 <.LCFI46>:
     d52:	8c 01       	movw	r16, r24

00000d54 <.Loc.950>:
	uint16_t BytesTransferred;
	uint8_t  ErrorCode;

	/* Set the message tag of the command header */
	MessageHeader->Tag        =  CurrentTransferTag;
     d54:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <CurrentTransferTag>

00000d58 <.LVL249>:
     d58:	f8 01       	movw	r30, r16
     d5a:	81 83       	std	Z+1, r24	; 0x01

00000d5c <.Loc.955>:
	MessageHeader->InverseTag = ~CurrentTransferTag;
     d5c:	80 95       	com	r24
     d5e:	82 83       	std	Z+2, r24	; 0x02

00000d60 <.LBB605>:
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d60:	82 e0       	ldi	r24, 0x02	; 2
     d62:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

00000d66 <.LBE605>:

	/* Select the Data In endpoint */
	Endpoint_SelectEndpoint(TMC_IN_EPADDR);

	/* Send the command header to the host */
	BytesTransferred = 0;
     d66:	1a 82       	std	Y+2, r1	; 0x02
     d68:	19 82       	std	Y+1, r1	; 0x01

00000d6a <.L263>:
	while ((ErrorCode = Endpoint_Write_Stream_LE(MessageHeader, sizeof(TMC_MessageHeader_t), &BytesTransferred)) ==
     d6a:	ae 01       	movw	r20, r28
     d6c:	4f 5f       	subi	r20, 0xFF	; 255
     d6e:	5f 4f       	sbci	r21, 0xFF	; 255
     d70:	6c e0       	ldi	r22, 0x0C	; 12
     d72:	70 e0       	ldi	r23, 0x00	; 0
     d74:	c8 01       	movw	r24, r16
     d76:	6e d5       	rcall	.+2780   	; 0x1854 <Endpoint_Write_Stream_LE>

00000d78 <.LVL252>:
     d78:	98 2f       	mov	r25, r24

00000d7a <.LVL253>:
     d7a:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <IsTMCBulkINReset>

00000d7e <.LVL254>:
     d7e:	95 30       	cpi	r25, 0x05	; 5
     d80:	69 f0       	breq	.+26     	; 0xd9c <.L265>

00000d82 <.Loc.969>:
		if (IsTMCBulkINReset)
		  break;
	}

	/* Indicate if the command has been aborted or not */
	return (!(IsTMCBulkINReset) && (ErrorCode == ENDPOINT_RWSTREAM_NoError));
     d82:	81 11       	cpse	r24, r1
     d84:	0d c0       	rjmp	.+26     	; 0xda0 <.L268>

00000d86 <.Loc.971>:
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	91 11       	cpse	r25, r1
     d8a:	0a c0       	rjmp	.+20     	; 0xda0 <.L268>

00000d8c <.L264>:
}
     d8c:	81 70       	andi	r24, 0x01	; 1
     d8e:	0f 90       	pop	r0
     d90:	0f 90       	pop	r0
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	1f 91       	pop	r17
     d98:	0f 91       	pop	r16

00000d9a <.LVL255>:
     d9a:	08 95       	ret

00000d9c <.L265>:
		if (IsTMCBulkINReset)
     d9c:	88 23       	and	r24, r24
     d9e:	29 f3       	breq	.-54     	; 0xd6a <.L263>

00000da0 <.L268>:
	return (!(IsTMCBulkINReset) && (ErrorCode == ENDPOINT_RWSTREAM_NoError));
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	f4 cf       	rjmp	.-24     	; 0xd8c <.L264>

00000da4 <TMC_Task>:
{
     da4:	bf 92       	push	r11

00000da6 <.LCFI47>:
     da6:	cf 92       	push	r12

00000da8 <.LCFI48>:
     da8:	df 92       	push	r13

00000daa <.LCFI49>:
     daa:	ef 92       	push	r14

00000dac <.LCFI50>:
     dac:	ff 92       	push	r15

00000dae <.LCFI51>:
     dae:	0f 93       	push	r16

00000db0 <.LCFI52>:
     db0:	1f 93       	push	r17

00000db2 <.LCFI53>:
     db2:	cf 93       	push	r28

00000db4 <.LCFI54>:
     db4:	df 93       	push	r29

00000db6 <.LCFI55>:
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62

00000dba <.LCFI56>:
     dba:	cd 58       	subi	r28, 0x8D	; 141
     dbc:	d1 09       	sbc	r29, r1

00000dbe <.LCFI57>:
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	f8 94       	cli
     dc2:	de bf       	out	0x3e, r29	; 62
     dc4:	0f be       	out	0x3f, r0	; 63
     dc6:	cd bf       	out	0x3d, r28	; 61

00000dc8 <.Loc.978>:
	if (USB_DeviceState != DEVICE_STATE_Configured)
     dc8:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <USB_DeviceState>

00000dcc <.Loc.981>:
     dcc:	84 30       	cpi	r24, 0x04	; 4
     dce:	09 f0       	breq	.+2      	; 0xdd2 <.Loc.982>

00000dd0 <L0^A>:
     dd0:	ce c0       	rjmp	.+412    	; 0xf6e <.L272>

00000dd2 <.Loc.982>:
	if (s_remaining_bytes_receive == 0)
     dd2:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <s_remaining_bytes_receive>
     dd6:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <s_remaining_bytes_receive+0x1>
     dda:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <s_remaining_bytes_receive+0x2>
     dde:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <s_remaining_bytes_receive+0x3>
     de2:	89 2b       	or	r24, r25
     de4:	8a 2b       	or	r24, r26
     de6:	8b 2b       	or	r24, r27
     de8:	09 f0       	breq	.+2      	; 0xdec <.Loc.986>

00000dea <L0^A>:
     dea:	3c c1       	rjmp	.+632    	; 0x1064 <.L275>

00000dec <.Loc.986>:
		if (ReadTMCHeader(&MessageHeader))
     dec:	ce 01       	movw	r24, r28
     dee:	8f 57       	subi	r24, 0x7F	; 127
     df0:	9f 4f       	sbci	r25, 0xFF	; 255
     df2:	76 df       	rcall	.-276    	; 0xce0 <ReadTMCHeader>

00000df4 <.LVL257>:
     df4:	88 23       	and	r24, r24
     df6:	09 f4       	brne	.+2      	; 0xdfa <.Loc.989>

00000df8 <L0^A>:
     df8:	ae c0       	rjmp	.+348    	; 0xf56 <.L277>

00000dfa <.Loc.989>:
		dbg++;
     dfa:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <dbg>
     dfe:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <dbg+0x1>
     e02:	01 96       	adiw	r24, 0x01	; 1
     e04:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <dbg+0x1>
     e08:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <dbg>

00000e0c <.Loc.991>:
			switch (MessageHeader.MessageID)
     e0c:	cf 57       	subi	r28, 0x7F	; 127
     e0e:	df 4f       	sbci	r29, 0xFF	; 255
     e10:	88 81       	ld	r24, Y
     e12:	c1 58       	subi	r28, 0x81	; 129
     e14:	d0 40       	sbci	r29, 0x00	; 0

00000e16 <.Loc.993>:
     e16:	82 30       	cpi	r24, 0x02	; 2
     e18:	09 f4       	brne	.+2      	; 0xe1c <L0^A+0x2>

00000e1a <L0^A>:
     e1a:	ba c0       	rjmp	.+372    	; 0xf90 <.L278>
     e1c:	80 38       	cpi	r24, 0x80	; 128
     e1e:	09 f4       	brne	.+2      	; 0xe22 <L0^A+0x2>

00000e20 <L0^A>:
     e20:	84 c0       	rjmp	.+264    	; 0xf2a <.L279>
     e22:	81 30       	cpi	r24, 0x01	; 1
     e24:	09 f0       	breq	.+2      	; 0xe28 <.Loc.994>

00000e26 <L0^A>:
     e26:	18 c1       	rjmp	.+560    	; 0x1058 <.L321>

00000e28 <.Loc.994>:
					s_remaining_bytes_receive = MessageHeader.TransferSize;
     e28:	cb 57       	subi	r28, 0x7B	; 123
     e2a:	df 4f       	sbci	r29, 0xFF	; 255
     e2c:	38 81       	ld	r19, Y
     e2e:	c5 58       	subi	r28, 0x85	; 133
     e30:	d0 40       	sbci	r29, 0x00	; 0
     e32:	ca 57       	subi	r28, 0x7A	; 122
     e34:	df 4f       	sbci	r29, 0xFF	; 255
     e36:	28 81       	ld	r18, Y
     e38:	c6 58       	subi	r28, 0x86	; 134
     e3a:	d0 40       	sbci	r29, 0x00	; 0
     e3c:	c9 57       	subi	r28, 0x79	; 121
     e3e:	df 4f       	sbci	r29, 0xFF	; 255
     e40:	98 81       	ld	r25, Y
     e42:	c7 58       	subi	r28, 0x87	; 135
     e44:	d0 40       	sbci	r29, 0x00	; 0
     e46:	c8 57       	subi	r28, 0x78	; 120
     e48:	df 4f       	sbci	r29, 0xFF	; 255
     e4a:	88 81       	ld	r24, Y
     e4c:	c8 58       	subi	r28, 0x88	; 136
     e4e:	d0 40       	sbci	r29, 0x00	; 0

00000e50 <.Loc.996>:
     e50:	30 93 22 01 	sts	0x0122, r19	; 0x800122 <s_remaining_bytes_receive>
     e54:	20 93 23 01 	sts	0x0123, r18	; 0x800123 <s_remaining_bytes_receive+0x1>
     e58:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <s_remaining_bytes_receive+0x2>
     e5c:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <s_remaining_bytes_receive+0x3>

00000e60 <.Loc.997>:
					LastTransferLength = 0;
     e60:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <LastTransferLength+0x1>
     e64:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <LastTransferLength>

00000e68 <.Loc.1000>:
					curlen = MIN(TMC_IO_EPSIZE-sizeof(TMC_MessageHeader_t), MessageHeader.TransferSize);
     e68:	c3 2e       	mov	r12, r19
     e6a:	d2 2e       	mov	r13, r18
     e6c:	e9 2e       	mov	r14, r25
     e6e:	f8 2e       	mov	r15, r24
     e70:	85 e3       	ldi	r24, 0x35	; 53
     e72:	c8 16       	cp	r12, r24
     e74:	d1 04       	cpc	r13, r1
     e76:	e1 04       	cpc	r14, r1
     e78:	f1 04       	cpc	r15, r1
     e7a:	28 f0       	brcs	.+10     	; 0xe86 <.L282>
     e7c:	94 e3       	ldi	r25, 0x34	; 52
     e7e:	c9 2e       	mov	r12, r25
     e80:	d1 2c       	mov	r13, r1
     e82:	e1 2c       	mov	r14, r1
     e84:	f1 2c       	mov	r15, r1

00000e86 <.L282>:
     e86:	bc 2c       	mov	r11, r12

00000e88 <.L283>:
					while (Endpoint_Read_Stream_LE(MessagePayload, curlen, &LastTransferLength) ==
     e88:	47 e6       	ldi	r20, 0x67	; 103
     e8a:	51 e0       	ldi	r21, 0x01	; 1
     e8c:	b6 01       	movw	r22, r12
     e8e:	ce 01       	movw	r24, r28
     e90:	01 96       	adiw	r24, 0x01	; 1
     e92:	2d d5       	rcall	.+2650   	; 0x18ee <Endpoint_Read_Stream_LE>

00000e94 <.LVL259>:
     e94:	85 30       	cpi	r24, 0x05	; 5
     e96:	21 f4       	brne	.+8      	; 0xea0 <.L284>

00000e98 <.Loc.1006>:
						if (IsTMCBulkOUTReset)
     e98:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <IsTMCBulkOUTReset>
     e9c:	88 23       	and	r24, r24
     e9e:	a1 f3       	breq	.-24     	; 0xe88 <.L283>

00000ea0 <.L284>:
					s_remaining_bytes_receive -= curlen;
     ea0:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <s_remaining_bytes_receive>
     ea4:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <s_remaining_bytes_receive+0x1>
     ea8:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <s_remaining_bytes_receive+0x2>
     eac:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <s_remaining_bytes_receive+0x3>
     eb0:	8c 19       	sub	r24, r12
     eb2:	9d 09       	sbc	r25, r13
     eb4:	ae 09       	sbc	r26, r14
     eb6:	bf 09       	sbc	r27, r15
     eb8:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <s_remaining_bytes_receive>
     ebc:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <s_remaining_bytes_receive+0x1>
     ec0:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <s_remaining_bytes_receive+0x2>
     ec4:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <s_remaining_bytes_receive+0x3>

00000ec8 <.Loc.1010>:
					TMC_eom = (MessageHeader.MessageIDSpecific.DeviceOUT.LastMessageTransaction != 0);
     ec8:	c7 57       	subi	r28, 0x77	; 119
     eca:	df 4f       	sbci	r29, 0xFF	; 255
     ecc:	28 81       	ld	r18, Y
     ece:	c9 58       	subi	r28, 0x89	; 137
     ed0:	d0 40       	sbci	r29, 0x00	; 0

00000ed2 <.Loc.1012>:
     ed2:	31 e0       	ldi	r19, 0x01	; 1
     ed4:	21 11       	cpse	r18, r1
     ed6:	01 c0       	rjmp	.+2      	; 0xeda <.L286>
     ed8:	30 e0       	ldi	r19, 0x00	; 0

00000eda <.L286>:
     eda:	30 93 79 01 	sts	0x0179, r19	; 0x800179 <TMC_eom>

00000ede <.Loc.1014>:
					lastmessage =  TMC_eom && (s_remaining_bytes_receive==0);
     ede:	22 23       	and	r18, r18
     ee0:	29 f0       	breq	.+10     	; 0xeec <.L304>

00000ee2 <.Loc.1016>:
     ee2:	21 e0       	ldi	r18, 0x01	; 1
     ee4:	89 2b       	or	r24, r25
     ee6:	8a 2b       	or	r24, r26
     ee8:	8b 2b       	or	r24, r27
     eea:	09 f0       	breq	.+2      	; 0xeee <.L287>

00000eec <.L304>:
     eec:	20 e0       	ldi	r18, 0x00	; 0

00000eee <.L287>:
     eee:	21 70       	andi	r18, 0x01	; 1

00000ef0 <.Loc.1019>:
     ef0:	c3 57       	subi	r28, 0x73	; 115
     ef2:	df 4f       	sbci	r29, 0xFF	; 255
     ef4:	28 83       	st	Y, r18
     ef6:	cd 58       	subi	r28, 0x8D	; 141
     ef8:	d0 40       	sbci	r29, 0x00	; 0

00000efa <.Loc.1020>:
					ProcessSentMessage(MessagePayload, curlen, TMC_LastMessageComplete, lastmessage, tmc_gpib_write_timedout);
     efa:	04 e4       	ldi	r16, 0x44	; 68
     efc:	11 e0       	ldi	r17, 0x01	; 1
     efe:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <TMC_LastMessageComplete>
     f02:	6b 2d       	mov	r22, r11
     f04:	ce 01       	movw	r24, r28
     f06:	01 96       	adiw	r24, 0x01	; 1
     f08:	37 de       	rcall	.-914    	; 0xb78 <ProcessSentMessage>

00000f0a <.LBB629>:
     f0a:	83 e0       	ldi	r24, 0x03	; 3
     f0c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

00000f10 <.LBB631>:
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f10:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f14:	8b 77       	andi	r24, 0x7B	; 123
     f16:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00000f1a <.LBE631>:
					TMC_LastMessageComplete = lastmessage;
     f1a:	c3 57       	subi	r28, 0x73	; 115
     f1c:	df 4f       	sbci	r29, 0xFF	; 255
     f1e:	88 81       	ld	r24, Y
     f20:	cd 58       	subi	r28, 0x8D	; 141
     f22:	d0 40       	sbci	r29, 0x00	; 0
     f24:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <TMC_LastMessageComplete>

00000f28 <.Loc.1032>:
					break;
     f28:	16 c0       	rjmp	.+44     	; 0xf56 <.L277>

00000f2a <.L279>:
	timeout_val = timeout;
     f2a:	80 e5       	ldi	r24, 0x50	; 80
     f2c:	93 ec       	ldi	r25, 0xC3	; 195
     f2e:	a0 e0       	ldi	r26, 0x00	; 0
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <timeout_val>
     f36:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <timeout_val+0x1>
     f3a:	a0 93 77 01 	sts	0x0177, r26	; 0x800177 <timeout_val+0x2>
     f3e:	b0 93 78 01 	sts	0x0178, r27	; 0x800178 <timeout_val+0x3>

00000f42 <.LBE633>:
					gpib_trigger(gpib_addr, is_timedout);
     f42:	65 e2       	ldi	r22, 0x25	; 37
     f44:	71 e0       	ldi	r23, 0x01	; 1
     f46:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     f4a:	f8 d2       	rcall	.+1520   	; 0x153c <gpib_trigger>

00000f4c <.LBB635>:
     f4c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f50:	8b 77       	andi	r24, 0x7B	; 123
     f52:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00000f56 <.L277>:
	if (IsTMCBulkOUTReset || IsTMCBulkINReset)
     f56:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <IsTMCBulkOUTReset>
     f5a:	81 11       	cpse	r24, r1
     f5c:	03 c0       	rjmp	.+6      	; 0xf64 <.L302>

00000f5e <.Loc.1045>:
     f5e:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <IsTMCBulkINReset>
     f62:	81 11       	cpse	r24, r1

00000f64 <.L302>:
		TMC_resetstates();
     f64:	af de       	rcall	.-674    	; 0xcc4 <TMC_resetstates>

00000f66 <.LVL265>:
	IsTMCBulkINReset  = false;
     f66:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <IsTMCBulkINReset>

00000f6a <.Loc.1049>:
	IsTMCBulkOUTReset = false;
     f6a:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <IsTMCBulkOUTReset>

00000f6e <.L272>:
}
     f6e:	c3 57       	subi	r28, 0x73	; 115
     f70:	df 4f       	sbci	r29, 0xFF	; 255
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	f8 94       	cli
     f76:	de bf       	out	0x3e, r29	; 62
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	cd bf       	out	0x3d, r28	; 61
     f7c:	df 91       	pop	r29
     f7e:	cf 91       	pop	r28
     f80:	1f 91       	pop	r17
     f82:	0f 91       	pop	r16
     f84:	ff 90       	pop	r15
     f86:	ef 90       	pop	r14
     f88:	df 90       	pop	r13
     f8a:	cf 90       	pop	r12
     f8c:	bf 90       	pop	r11
     f8e:	08 95       	ret

00000f90 <.L278>:
     f90:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f94:	8b 77       	andi	r24, 0x7B	; 123
     f96:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00000f9a <.LBE637>:
					curlen = MIN(TMC_IO_EPSIZE-sizeof(TMC_MessageHeader_t) -1, MessageHeader.TransferSize);
     f9a:	cb 57       	subi	r28, 0x7B	; 123
     f9c:	df 4f       	sbci	r29, 0xFF	; 255
     f9e:	68 81       	ld	r22, Y
     fa0:	79 81       	ldd	r23, Y+1	; 0x01
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	9b 81       	ldd	r25, Y+3	; 0x03
     fa6:	c5 58       	subi	r28, 0x85	; 133
     fa8:	d0 40       	sbci	r29, 0x00	; 0
     faa:	64 33       	cpi	r22, 0x34	; 52
     fac:	71 05       	cpc	r23, r1
     fae:	81 05       	cpc	r24, r1
     fb0:	91 05       	cpc	r25, r1
     fb2:	20 f0       	brcs	.+8      	; 0xfbc <.L289>
     fb4:	63 e3       	ldi	r22, 0x33	; 51
     fb6:	70 e0       	ldi	r23, 0x00	; 0
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	90 e0       	ldi	r25, 0x00	; 0

00000fbc <.L289>:
					MessageHeader.TransferSize = GetNextMessage(MessagePayload, curlen, TMC_InLastMessageComplete, &lastmessage, tmc_gpib_read_timedout);
     fbc:	0c e4       	ldi	r16, 0x4C	; 76
     fbe:	11 e0       	ldi	r17, 0x01	; 1
     fc0:	9e 01       	movw	r18, r28
     fc2:	23 57       	subi	r18, 0x73	; 115
     fc4:	3f 4f       	sbci	r19, 0xFF	; 255
     fc6:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <TMC_InLastMessageComplete>
     fca:	ce 01       	movw	r24, r28
     fcc:	01 96       	adiw	r24, 0x01	; 1
     fce:	18 de       	rcall	.-976    	; 0xc00 <GetNextMessage>

00000fd0 <.LVL267>:
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	a0 e0       	ldi	r26, 0x00	; 0
     fd6:	cb 57       	subi	r28, 0x7B	; 123
     fd8:	df 4f       	sbci	r29, 0xFF	; 255
     fda:	88 83       	st	Y, r24
     fdc:	99 83       	std	Y+1, r25	; 0x01
     fde:	aa 83       	std	Y+2, r26	; 0x02
     fe0:	bb 83       	std	Y+3, r27	; 0x03
     fe2:	c5 58       	subi	r28, 0x85	; 133
     fe4:	d0 40       	sbci	r29, 0x00	; 0

00000fe6 <.Loc.1061>:
					TMC_InLastMessageComplete = lastmessage;
     fe6:	c3 57       	subi	r28, 0x73	; 115
     fe8:	df 4f       	sbci	r29, 0xFF	; 255
     fea:	88 81       	ld	r24, Y
     fec:	cd 58       	subi	r28, 0x8D	; 141
     fee:	d0 40       	sbci	r29, 0x00	; 0
     ff0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <TMC_InLastMessageComplete>

00000ff4 <.Loc.1063>:
					MessageHeader.MessageIDSpecific.DeviceOUT.LastMessageTransaction = lastmessage;
     ff4:	c7 57       	subi	r28, 0x77	; 119
     ff6:	df 4f       	sbci	r29, 0xFF	; 255
     ff8:	88 83       	st	Y, r24
     ffa:	c9 58       	subi	r28, 0x89	; 137
     ffc:	d0 40       	sbci	r29, 0x00	; 0

00000ffe <.Loc.1065>:
					if (!IsTMCBulkINReset)
     ffe:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <IsTMCBulkINReset>
    1002:	81 11       	cpse	r24, r1
    1004:	04 c0       	rjmp	.+8      	; 0x100e <.L290>

00001006 <.Loc.1067>:
						WriteTMCHeader(&MessageHeader);					
    1006:	ce 01       	movw	r24, r28
    1008:	8f 57       	subi	r24, 0x7F	; 127
    100a:	9f 4f       	sbci	r25, 0xFF	; 255
    100c:	9b de       	rcall	.-714    	; 0xd44 <WriteTMCHeader>

0000100e <.L290>:
					LastTransferLength = 0;
    100e:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <LastTransferLength+0x1>
    1012:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <LastTransferLength>

00001016 <.L322>:
					if (!IsTMCBulkINReset)
    1016:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <IsTMCBulkINReset>
    101a:	88 23       	and	r24, r24
    101c:	79 f0       	breq	.+30     	; 0x103c <.L291>

0000101e <.L294>:
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    101e:	82 e0       	ldi	r24, 0x02	; 2
    1020:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

00001024 <.LBB641>:
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1024:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1028:	8e 77       	andi	r24, 0x7E	; 126
    102a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

0000102e <.LBE641>:
					if (IsTMCBulkINReset)
    102e:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <IsTMCBulkINReset>
    1032:	88 23       	and	r24, r24
    1034:	09 f4       	brne	.+2      	; 0x1038 <.Loc.1083>

00001036 <L0^A>:
    1036:	8f cf       	rjmp	.-226    	; 0xf56 <.L277>

00001038 <.Loc.1083>:
						TMC_resetstates();
    1038:	45 de       	rcall	.-886    	; 0xcc4 <TMC_resetstates>

0000103a <.LVL271>:
    103a:	8d cf       	rjmp	.-230    	; 0xf56 <.L277>

0000103c <.L291>:
						while (Endpoint_Write_Stream_LE(MessagePayload, MessageHeader.TransferSize, &LastTransferLength) ==
    103c:	cb 57       	subi	r28, 0x7B	; 123
    103e:	df 4f       	sbci	r29, 0xFF	; 255
    1040:	68 81       	ld	r22, Y
    1042:	79 81       	ldd	r23, Y+1	; 0x01
    1044:	c5 58       	subi	r28, 0x85	; 133
    1046:	d0 40       	sbci	r29, 0x00	; 0
    1048:	47 e6       	ldi	r20, 0x67	; 103
    104a:	51 e0       	ldi	r21, 0x01	; 1
    104c:	ce 01       	movw	r24, r28
    104e:	01 96       	adiw	r24, 0x01	; 1
    1050:	01 d4       	rcall	.+2050   	; 0x1854 <Endpoint_Write_Stream_LE>

00001052 <.LVL272>:
    1052:	85 30       	cpi	r24, 0x05	; 5
    1054:	01 f3       	breq	.-64     	; 0x1016 <.L322>
    1056:	e3 cf       	rjmp	.-58     	; 0x101e <.L294>

00001058 <.L321>:
				UECONX |= (1 << STALLRQ);
    1058:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    105c:	80 62       	ori	r24, 0x20	; 32
    105e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

00001062 <.Loc.1091>:
			}
    1062:	79 cf       	rjmp	.-270    	; 0xf56 <.L277>

00001064 <.L275>:
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1064:	83 e0       	ldi	r24, 0x03	; 3
    1066:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

0000106a <.LBB647>:
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    106a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

0000106e <.LBE647>:
		if (Endpoint_IsOUTReceived())
    106e:	82 ff       	sbrs	r24, 2
    1070:	72 cf       	rjmp	.-284    	; 0xf56 <.L277>

00001072 <.Loc.1102>:
			LastTransferLength = 0;
    1072:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <LastTransferLength+0x1>
    1076:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <LastTransferLength>

0000107a <.LVL275>:
			if (s_remaining_bytes_receive < TMC_IO_EPSIZE)
    107a:	c0 90 22 01 	lds	r12, 0x0122	; 0x800122 <s_remaining_bytes_receive>
    107e:	d0 90 23 01 	lds	r13, 0x0123	; 0x800123 <s_remaining_bytes_receive+0x1>
    1082:	e0 90 24 01 	lds	r14, 0x0124	; 0x800124 <s_remaining_bytes_receive+0x2>
    1086:	f0 90 25 01 	lds	r15, 0x0125	; 0x800125 <s_remaining_bytes_receive+0x3>

0000108a <.Loc.1107>:
    108a:	80 e4       	ldi	r24, 0x40	; 64
    108c:	c8 16       	cp	r12, r24
    108e:	d1 04       	cpc	r13, r1
    1090:	e1 04       	cpc	r14, r1
    1092:	f1 04       	cpc	r15, r1
    1094:	08 f0       	brcs	.+2      	; 0x1098 <.L296>

00001096 <L0^A>:
    1096:	48 c0       	rjmp	.+144    	; 0x1128 <.L305>

00001098 <.L296>:
    1098:	bc 2c       	mov	r11, r12

0000109a <.L298>:
			while (Endpoint_Read_Stream_LE(MessagePayload, curlen, &LastTransferLength) ==
    109a:	47 e6       	ldi	r20, 0x67	; 103
    109c:	51 e0       	ldi	r21, 0x01	; 1
    109e:	b6 01       	movw	r22, r12
    10a0:	ce 01       	movw	r24, r28
    10a2:	01 96       	adiw	r24, 0x01	; 1
    10a4:	24 d4       	rcall	.+2120   	; 0x18ee <Endpoint_Read_Stream_LE>

000010a6 <.LVL278>:
    10a6:	85 30       	cpi	r24, 0x05	; 5
    10a8:	21 f4       	brne	.+8      	; 0x10b2 <.L297>

000010aa <.Loc.1112>:
				if (IsTMCBulkOUTReset)
    10aa:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <IsTMCBulkOUTReset>
    10ae:	88 23       	and	r24, r24
    10b0:	a1 f3       	breq	.-24     	; 0x109a <.L298>

000010b2 <.L297>:
			s_remaining_bytes_receive -= curlen;
    10b2:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <s_remaining_bytes_receive>
    10b6:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <s_remaining_bytes_receive+0x1>
    10ba:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <s_remaining_bytes_receive+0x2>
    10be:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <s_remaining_bytes_receive+0x3>
    10c2:	8c 19       	sub	r24, r12
    10c4:	9d 09       	sbc	r25, r13
    10c6:	ae 09       	sbc	r26, r14
    10c8:	bf 09       	sbc	r27, r15
    10ca:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <s_remaining_bytes_receive>
    10ce:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <s_remaining_bytes_receive+0x1>
    10d2:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <s_remaining_bytes_receive+0x2>
    10d6:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <s_remaining_bytes_receive+0x3>

000010da <.LBB649>:
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    10da:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10de:	8b 77       	andi	r24, 0x7B	; 123
    10e0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

000010e4 <.LBE649>:
			lastmessage = TMC_eom && (s_remaining_bytes_receive==0);
    10e4:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <TMC_eom>
    10e8:	88 23       	and	r24, r24
    10ea:	69 f0       	breq	.+26     	; 0x1106 <.L306>

000010ec <.Loc.1122>:
    10ec:	21 e0       	ldi	r18, 0x01	; 1
    10ee:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <s_remaining_bytes_receive>
    10f2:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <s_remaining_bytes_receive+0x1>
    10f6:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <s_remaining_bytes_receive+0x2>
    10fa:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <s_remaining_bytes_receive+0x3>
    10fe:	89 2b       	or	r24, r25
    1100:	8a 2b       	or	r24, r26
    1102:	8b 2b       	or	r24, r27
    1104:	09 f0       	breq	.+2      	; 0x1108 <.L300>

00001106 <.L306>:
    1106:	20 e0       	ldi	r18, 0x00	; 0

00001108 <.L300>:
    1108:	21 70       	andi	r18, 0x01	; 1

0000110a <.Loc.1125>:
    110a:	c3 57       	subi	r28, 0x73	; 115
    110c:	df 4f       	sbci	r29, 0xFF	; 255
    110e:	28 83       	st	Y, r18
    1110:	cd 58       	subi	r28, 0x8D	; 141
    1112:	d0 40       	sbci	r29, 0x00	; 0

00001114 <.Loc.1126>:
			TMC_LastMessageComplete = lastmessage;
    1114:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <TMC_LastMessageComplete>

00001118 <.Loc.1128>:
			ProcessSentMessage(MessagePayload, curlen, false, lastmessage, tmc_gpib_write_timedout);
    1118:	04 e4       	ldi	r16, 0x44	; 68
    111a:	11 e0       	ldi	r17, 0x01	; 1
    111c:	40 e0       	ldi	r20, 0x00	; 0
    111e:	6b 2d       	mov	r22, r11
    1120:	ce 01       	movw	r24, r28
    1122:	01 96       	adiw	r24, 0x01	; 1
    1124:	29 dd       	rcall	.-1454   	; 0xb78 <ProcessSentMessage>

00001126 <.LVL279>:
    1126:	17 cf       	rjmp	.-466    	; 0xf56 <.L277>

00001128 <.L305>:
    1128:	80 e4       	ldi	r24, 0x40	; 64
    112a:	c8 2e       	mov	r12, r24
    112c:	d1 2c       	mov	r13, r1
    112e:	e1 2c       	mov	r14, r1
    1130:	f1 2c       	mov	r15, r1
    1132:	b2 cf       	rjmp	.-156    	; 0x1098 <.L296>

00001134 <main>:
	MCUSR = 0; 
    1134:	14 be       	out	0x34, r1	; 52

00001136 <.LBB651>:
    1136:	0f b6       	in	r0, 0x3f	; 63
    1138:	f8 94       	cli
    113a:	a8 95       	wdr
    113c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1140:	88 61       	ori	r24, 0x18	; 24
    1142:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1146:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    114a:	0f be       	out	0x3f, r0	; 63

0000114c <.LBE652>:
	PORTB |=  (1<<2); /* PB2 = PULLUP */
    114c:	2a 9a       	sbi	0x05, 2	; 5

0000114e <.Loc.1141>:
	DDRB  &= ~(1<<2); /* PB2 = input*/
    114e:	22 98       	cbi	0x04, 2	; 4

00001150 <.Loc.1143>:
	SetupHardware();
    1150:	19 db       	rcall	.-2510   	; 0x784 <SetupHardware>

00001152 <.LVL281>:
	gpib_init();
    1152:	67 d1       	rcall	.+718    	; 0x1422 <gpib_init>

00001154 <.L324>:
	eeprom_busy_wait();	
    1154:	f9 99       	sbic	0x1f, 1	; 31
    1156:	fe cf       	rjmp	.-4      	; 0x1154 <.L324>

00001158 <.Loc.1148>:
	gpib_set_readtermination(eeprom_read_byte(105));
    1158:	89 e6       	ldi	r24, 0x69	; 105
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	0e 94 4a 11 	call	0x2294	; 0x2294 <eeprom_read_byte>

00001160 <.LVL283>:
    1160:	13 d3       	rcall	.+1574   	; 0x1788 <gpib_set_readtermination>

00001162 <.LBB654>:
				sei();
    1162:	78 94       	sei

00001164 <.L325>:
	while (!gpib_is_connected())
    1164:	3d d1       	rcall	.+634    	; 0x13e0 <gpib_is_connected>

00001166 <.LVL285>:
    1166:	88 23       	and	r24, r24
    1168:	09 f4       	brne	.+2      	; 0x116c <.L326>

0000116a <L0^A>:
    116a:	50 c0       	rjmp	.+160    	; 0x120c <.L348>

0000116c <.L326>:
	while (!findGpibdevice())
    116c:	c0 d8       	rcall	.-3712   	; 0x2ee <findGpibdevice>

0000116e <.LVL286>:
    116e:	88 23       	and	r24, r24
    1170:	09 f4       	brne	.+2      	; 0x1174 <.L331>

00001172 <L0^A>:
    1172:	62 c0       	rjmp	.+196    	; 0x1238 <.L330>

00001174 <.L331>:
	eeprom_busy_wait();
    1174:	f9 99       	sbic	0x1f, 1	; 31
    1176:	fe cf       	rjmp	.-4      	; 0x1174 <.L331>

00001178 <.Loc.1168>:
	if (eeprom_read_byte(104) != 0x01)
    1178:	88 e6       	ldi	r24, 0x68	; 104
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	0e 94 4a 11 	call	0x2294	; 0x2294 <eeprom_read_byte>

00001180 <.LVL287>:
    1180:	81 30       	cpi	r24, 0x01	; 1
    1182:	09 f4       	brne	.+2      	; 0x1186 <.L333>

00001184 <L0^A>:
    1184:	9b c0       	rjmp	.+310    	; 0x12bc <.L332>

00001186 <.L333>:
		eeprom_busy_wait();
    1186:	f9 99       	sbic	0x1f, 1	; 31
    1188:	fe cf       	rjmp	.-4      	; 0x1186 <.L333>

0000118a <.Loc.1174>:
		prevaddr = eeprom_read_byte((uint8_t*)0); /* read previous gpib address */
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	0e 94 4a 11 	call	0x2294	; 0x2294 <eeprom_read_byte>

00001192 <.LVL288>:
    1192:	c8 2f       	mov	r28, r24

00001194 <.LVL289>:
		if (identifyGpibDevice())
    1194:	b7 d8       	rcall	.-3730   	; 0x304 <identifyGpibDevice>

00001196 <.LVL290>:
    1196:	88 23       	and	r24, r24
    1198:	09 f4       	brne	.+2      	; 0x119c <.LBB656>

0000119a <L0^A>:
    119a:	7c c0       	rjmp	.+248    	; 0x1294 <.L334>

0000119c <.LBB656>:
			eeprom_update_if_changed(0, gpib_addr);
    119c:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <gpib_addr>
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	d3 da       	rcall	.-2650   	; 0x74c <eeprom_update_if_changed>

000011a6 <.LVL291>:
    11a6:	c1 e0       	ldi	r28, 0x01	; 1
    11a8:	d0 e0       	ldi	r29, 0x00	; 0

000011aa <.LVL292>:
			pdat = (void *)&tmc_serial_string;
    11aa:	0a e7       	ldi	r16, 0x7A	; 122
    11ac:	11 e0       	ldi	r17, 0x01	; 1

000011ae <.L335>:
				eeprom_update_if_changed(1+i, *pdat++);
    11ae:	f8 01       	movw	r30, r16

000011b0 <.Loc.1187>:
    11b0:	60 81       	ld	r22, Z
    11b2:	0f 5f       	subi	r16, 0xFF	; 255
    11b4:	1f 4f       	sbci	r17, 0xFF	; 255

000011b6 <.LVL294>:
    11b6:	ce 01       	movw	r24, r28
    11b8:	c9 da       	rcall	.-2670   	; 0x74c <eeprom_update_if_changed>

000011ba <.LVL295>:
			for (i=0; i<sizeof(tmc_serial_string); i++)
    11ba:	21 96       	adiw	r28, 0x01	; 1

000011bc <.LVL296>:
    11bc:	c7 36       	cpi	r28, 0x67	; 103
    11be:	d1 05       	cpc	r29, r1
    11c0:	b1 f7       	brne	.-20     	; 0x11ae <.L335>

000011c2 <.L336>:
	LED(1);
    11c2:	8d 9a       	sbi	0x11, 5	; 17

000011c4 <.LBB657>:
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    11c4:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    11c8:	8e 7f       	andi	r24, 0xFE	; 254
    11ca:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>

000011ce <.L341>:
		TMC_Task();
    11ce:	ea dd       	rcall	.-1068   	; 0xda4 <TMC_Task>

000011d0 <.LVL298>:
		check_bootloaderEntry();
    11d0:	ba da       	rcall	.-2700   	; 0x746 <check_bootloaderEntry>

000011d2 <.LVL299>:
		if (!gpib_is_connected()) /* check, if gpib is disconnected */
    11d2:	06 d1       	rcall	.+524    	; 0x13e0 <gpib_is_connected>

000011d4 <.LVL300>:
    11d4:	81 11       	cpse	r24, r1
    11d6:	83 c0       	rjmp	.+262    	; 0x12de <.L339>

000011d8 <.Loc.1206>:
			LED(0);
    11d8:	8d 98       	cbi	0x11, 5	; 17

000011da <.LBB659>:
				UDCON  |=  (1 << DETACH);
    11da:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    11de:	81 60       	ori	r24, 0x01	; 1
    11e0:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>

000011e4 <.LBB661>:
    11e4:	9f ef       	ldi	r25, 0xFF	; 255
    11e6:	e9 e6       	ldi	r30, 0x69	; 105
    11e8:	f8 e1       	ldi	r31, 0x18	; 24

000011ea <.L1^B6>:
    11ea:	91 50       	subi	r25, 0x01	; 1
    11ec:	e0 40       	sbci	r30, 0x00	; 0
    11ee:	f0 40       	sbci	r31, 0x00	; 0
    11f0:	e1 f7       	brne	.-8      	; 0x11ea <.L1^B6>
    11f2:	00 c0       	rjmp	.+0      	; 0x11f4 <L0^A>

000011f4 <L0^A>:
    11f4:	00 00       	nop

000011f6 <.LBB665>:
		__asm__ __volatile__ (
    11f6:	88 e1       	ldi	r24, 0x18	; 24
    11f8:	9c e0       	ldi	r25, 0x0C	; 12
    11fa:	0f b6       	in	r0, 0x3f	; 63
    11fc:	f8 94       	cli
    11fe:	a8 95       	wdr
    1200:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>

0000120a <.L340>:
			while (1);
    120a:	ff cf       	rjmp	.-2      	; 0x120a <.L340>

0000120c <.L348>:
    120c:	2f ef       	ldi	r18, 0xFF	; 255
    120e:	84 e3       	ldi	r24, 0x34	; 52
    1210:	9c e0       	ldi	r25, 0x0C	; 12

00001212 <.L1^B7>:
    1212:	21 50       	subi	r18, 0x01	; 1
    1214:	80 40       	sbci	r24, 0x00	; 0
    1216:	90 40       	sbci	r25, 0x00	; 0
    1218:	e1 f7       	brne	.-8      	; 0x1212 <.L1^B7>
    121a:	00 c0       	rjmp	.+0      	; 0x121c <L0^A>

0000121c <L0^A>:
    121c:	00 00       	nop

0000121e <.LBE670>:
		LED(1);
    121e:	8d 9a       	sbi	0x11, 5	; 17

00001220 <.LBB671>:
    1220:	ef ef       	ldi	r30, 0xFF	; 255
    1222:	f4 e3       	ldi	r31, 0x34	; 52
    1224:	2c e0       	ldi	r18, 0x0C	; 12

00001226 <.L1^B8>:
    1226:	e1 50       	subi	r30, 0x01	; 1
    1228:	f0 40       	sbci	r31, 0x00	; 0
    122a:	20 40       	sbci	r18, 0x00	; 0
    122c:	e1 f7       	brne	.-8      	; 0x1226 <.L1^B8>
    122e:	00 c0       	rjmp	.+0      	; 0x1230 <L0^A>

00001230 <L0^A>:
    1230:	00 00       	nop

00001232 <.LBE674>:
		LED(0);
    1232:	8d 98       	cbi	0x11, 5	; 17

00001234 <.Loc.1259>:
		check_bootloaderEntry();
    1234:	88 da       	rcall	.-2800   	; 0x746 <check_bootloaderEntry>

00001236 <.LVL308>:
    1236:	96 cf       	rjmp	.-212    	; 0x1164 <.L325>

00001238 <.L330>:
    1238:	8f ef       	ldi	r24, 0xFF	; 255
    123a:	91 ee       	ldi	r25, 0xE1	; 225
    123c:	e4 e0       	ldi	r30, 0x04	; 4

0000123e <.L1^B9>:
    123e:	81 50       	subi	r24, 0x01	; 1
    1240:	90 40       	sbci	r25, 0x00	; 0
    1242:	e0 40       	sbci	r30, 0x00	; 0
    1244:	e1 f7       	brne	.-8      	; 0x123e <.L1^B9>
    1246:	00 c0       	rjmp	.+0      	; 0x1248 <L0^A>

00001248 <L0^A>:
    1248:	00 00       	nop

0000124a <.LBE678>:
		LED(1);
    124a:	8d 9a       	sbi	0x11, 5	; 17

0000124c <.LBB679>:
    124c:	ff ef       	ldi	r31, 0xFF	; 255
    124e:	21 ee       	ldi	r18, 0xE1	; 225
    1250:	84 e0       	ldi	r24, 0x04	; 4

00001252 <.L1^B10>:
    1252:	f1 50       	subi	r31, 0x01	; 1
    1254:	20 40       	sbci	r18, 0x00	; 0
    1256:	80 40       	sbci	r24, 0x00	; 0
    1258:	e1 f7       	brne	.-8      	; 0x1252 <.L1^B10>
    125a:	00 c0       	rjmp	.+0      	; 0x125c <L0^A>

0000125c <L0^A>:
    125c:	00 00       	nop

0000125e <.LBE682>:
		LED(0);
    125e:	8d 98       	cbi	0x11, 5	; 17

00001260 <.Loc.1288>:
		if (!gpib_is_connected()) /* we want to reset here if the device is unplugged */
    1260:	bf d0       	rcall	.+382    	; 0x13e0 <gpib_is_connected>

00001262 <.LVL313>:
    1262:	81 11       	cpse	r24, r1
    1264:	15 c0       	rjmp	.+42     	; 0x1290 <.L328>

00001266 <.Loc.1292>:
			LED(0);
    1266:	8d 98       	cbi	0x11, 5	; 17

00001268 <.LBB683>:
    1268:	9f ef       	ldi	r25, 0xFF	; 255
    126a:	e9 e6       	ldi	r30, 0x69	; 105
    126c:	f8 e1       	ldi	r31, 0x18	; 24

0000126e <.L1^B11>:
    126e:	91 50       	subi	r25, 0x01	; 1
    1270:	e0 40       	sbci	r30, 0x00	; 0
    1272:	f0 40       	sbci	r31, 0x00	; 0
    1274:	e1 f7       	brne	.-8      	; 0x126e <.L1^B11>
    1276:	00 c0       	rjmp	.+0      	; 0x1278 <L0^A>

00001278 <L0^A>:
    1278:	00 00       	nop

0000127a <.LBB687>:
    127a:	88 e1       	ldi	r24, 0x18	; 24
    127c:	9c e0       	ldi	r25, 0x0C	; 12
    127e:	0f b6       	in	r0, 0x3f	; 63
    1280:	f8 94       	cli
    1282:	a8 95       	wdr
    1284:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>

0000128e <.L329>:
			while (1);
    128e:	ff cf       	rjmp	.-2      	; 0x128e <.L329>

00001290 <.L328>:
		check_bootloaderEntry();
    1290:	5a da       	rcall	.-2892   	; 0x746 <check_bootloaderEntry>

00001292 <.LVL317>:
    1292:	6c cf       	rjmp	.-296    	; 0x116c <.L326>

00001294 <.L334>:
			if (prevaddr == gpib_addr)
    1294:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
    1298:	c8 13       	cpse	r28, r24
    129a:	93 cf       	rjmp	.-218    	; 0x11c2 <.L336>
    129c:	c1 e0       	ldi	r28, 0x01	; 1
    129e:	d0 e0       	ldi	r29, 0x00	; 0

000012a0 <.LBB689>:
				pdat = (void *)&tmc_serial_string;
    12a0:	0a e7       	ldi	r16, 0x7A	; 122
    12a2:	11 e0       	ldi	r17, 0x01	; 1

000012a4 <.L338>:
					*pdat++ = eeprom_read_byte((uint8_t*)(1+i));
    12a4:	78 01       	movw	r14, r16

000012a6 <.Loc.1319>:
    12a6:	0f 5f       	subi	r16, 0xFF	; 255
    12a8:	1f 4f       	sbci	r17, 0xFF	; 255

000012aa <.Loc.1320>:
    12aa:	ce 01       	movw	r24, r28
    12ac:	f3 d7       	rcall	.+4070   	; 0x2294 <eeprom_read_byte>

000012ae <.LVL322>:
    12ae:	f7 01       	movw	r30, r14
    12b0:	80 83       	st	Z, r24

000012b2 <.LVL323>:
				for (i=0; i<sizeof(tmc_serial_string); i++)
    12b2:	21 96       	adiw	r28, 0x01	; 1

000012b4 <.LVL324>:
    12b4:	c7 36       	cpi	r28, 0x67	; 103
    12b6:	d1 05       	cpc	r29, r1
    12b8:	a9 f7       	brne	.-22     	; 0x12a4 <.L338>
    12ba:	83 cf       	rjmp	.-250    	; 0x11c2 <.L336>

000012bc <.L332>:
		TMC_SetInternalSerial(true);
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	0e 94 a7 00 	call	0x14e	; 0x14e <TMC_SetInternalSerial>

000012c2 <.LVL326>:
		gpib_ren(false);
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	94 d0       	rcall	.+296    	; 0x13ee <gpib_ren>

000012c6 <.LBB690>:
    12c6:	ff ef       	ldi	r31, 0xFF	; 255
    12c8:	21 ee       	ldi	r18, 0xE1	; 225
    12ca:	84 e0       	ldi	r24, 0x04	; 4

000012cc <.L1^B12>:
    12cc:	f1 50       	subi	r31, 0x01	; 1
    12ce:	20 40       	sbci	r18, 0x00	; 0
    12d0:	80 40       	sbci	r24, 0x00	; 0
    12d2:	e1 f7       	brne	.-8      	; 0x12cc <.L1^B12>
    12d4:	00 c0       	rjmp	.+0      	; 0x12d6 <L0^A>

000012d6 <L0^A>:
    12d6:	00 00       	nop

000012d8 <.LBE693>:
		gpib_ren(true);
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	89 d0       	rcall	.+274    	; 0x13ee <gpib_ren>

000012dc <.LVL329>:
    12dc:	72 cf       	rjmp	.-284    	; 0x11c2 <.L336>

000012de <.L339>:
		USB_USBTask();
    12de:	ab d7       	rcall	.+3926   	; 0x2236 <USB_USBTask>

000012e0 <.LVL330>:
		TMC_Task();
    12e0:	76 cf       	rjmp	.-276    	; 0x11ce <.L341>

000012e2 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress,
			                        uint8_t* const DescriptorMemorySpace)
{
    12e2:	bc 01       	movw	r22, r24

000012e4 <.LVL1>:
    12e4:	da 01       	movw	r26, r20
    12e6:	f9 01       	movw	r30, r18

000012e8 <.Loc.3>:
	const uint8_t  DescriptorType   = (wValue >> 8);
    12e8:	87 2f       	mov	r24, r23
    12ea:	99 27       	eor	r25, r25

000012ec <.LVL2>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
	
	*DescriptorMemorySpace = MEMSPACE_FLASH;
    12ec:	10 82       	st	Z, r1

000012ee <.Loc.10>:

	switch (DescriptorType)
    12ee:	82 30       	cpi	r24, 0x02	; 2
    12f0:	91 05       	cpc	r25, r1
    12f2:	89 f1       	breq	.+98     	; 0x1356 <.L9>
    12f4:	83 30       	cpi	r24, 0x03	; 3
    12f6:	91 05       	cpc	r25, r1
    12f8:	49 f0       	breq	.+18     	; 0x130c <.L3>
    12fa:	01 97       	sbiw	r24, 0x01	; 1
    12fc:	a1 f4       	brne	.+40     	; 0x1326 <.L10>
    12fe:	82 e1       	ldi	r24, 0x12	; 18
    1300:	90 e0       	ldi	r25, 0x00	; 0

00001302 <.LVL3>:
    1302:	21 e0       	ldi	r18, 0x01	; 1
    1304:	31 e0       	ldi	r19, 0x01	; 1

00001306 <.L2>:
					break;
			}
			break;
	}

	*DescriptorAddress = Address;
    1306:	2d 93       	st	X+, r18
    1308:	3c 93       	st	X, r19

0000130a <.Loc.14>:
	return Size;
}
    130a:	08 95       	ret

0000130c <.L3>:
			switch (DescriptorNumber)
    130c:	cb 01       	movw	r24, r22

0000130e <.LVL6>:
    130e:	99 27       	eor	r25, r25
    1310:	62 30       	cpi	r22, 0x02	; 2
    1312:	f1 f0       	breq	.+60     	; 0x1350 <.L4>
    1314:	83 30       	cpi	r24, 0x03	; 3
    1316:	91 05       	cpc	r25, r1
    1318:	58 f4       	brcc	.+22     	; 0x1330 <.L5>
    131a:	00 97       	sbiw	r24, 0x00	; 0
    131c:	99 f0       	breq	.+38     	; 0x1344 <.L6>

0000131e <.LBB2>:
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    131e:	ee eb       	ldi	r30, 0xBE	; 190
    1320:	f0 e0       	ldi	r31, 0x00	; 0

00001322 <.LBE2>:
    1322:	01 97       	sbiw	r24, 0x01	; 1
    1324:	89 f0       	breq	.+34     	; 0x1348 <.L11>

00001326 <.L10>:
	uint16_t    Size    = NO_DESCRIPTOR;
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	80 e0       	ldi	r24, 0x00	; 0

0000132a <.Loc.20>:
	const void* Address = NULL;
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	20 e0       	ldi	r18, 0x00	; 0

0000132e <.LVL7>:
    132e:	eb cf       	rjmp	.-42     	; 0x1306 <.L2>

00001330 <.L5>:
    1330:	03 97       	sbiw	r24, 0x03	; 3
    1332:	c9 f7       	brne	.-14     	; 0x1326 <.L10>

00001334 <.LVL9>:
					Size = tmc_serial_string.Header.Size;
    1334:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <tmc_serial_string>
    1338:	90 e0       	ldi	r25, 0x00	; 0

0000133a <.LVL10>:
					*DescriptorMemorySpace = MEMSPACE_RAM;
    133a:	22 e0       	ldi	r18, 0x02	; 2

0000133c <.LVL11>:
    133c:	20 83       	st	Z, r18

0000133e <.Loc.29>:
					Address = &tmc_serial_string;
    133e:	2a e7       	ldi	r18, 0x7A	; 122
    1340:	31 e0       	ldi	r19, 0x01	; 1

00001342 <.Loc.31>:
					break;
    1342:	e1 cf       	rjmp	.-62     	; 0x1306 <.L2>

00001344 <.L6>:
					Size    = pgm_read_byte(&LanguageString.Header.Size);
    1344:	e6 ed       	ldi	r30, 0xD6	; 214
    1346:	f0 e0       	ldi	r31, 0x00	; 0

00001348 <.L11>:
					Size    = pgm_read_byte(&ProductString.Header.Size);
    1348:	84 91       	lpm	r24, Z

0000134a <.LBE4>:
    134a:	90 e0       	ldi	r25, 0x00	; 0

0000134c <.LVL15>:
					Address = &ProductString;
    134c:	9f 01       	movw	r18, r30

0000134e <.LVL16>:
					break;
    134e:	db cf       	rjmp	.-74     	; 0x1306 <.L2>

00001350 <.L4>:
					Size    = pgm_read_byte(&ProductString.Header.Size);
    1350:	ec ea       	ldi	r30, 0xAC	; 172
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	f9 cf       	rjmp	.-14     	; 0x1348 <.L11>

00001356 <.L9>:
			Size    = sizeof(USB_Descriptor_Configuration_t);
    1356:	87 e2       	ldi	r24, 0x27	; 39
    1358:	90 e0       	ldi	r25, 0x00	; 0

0000135a <.LVL19>:
			Address = &ConfigurationDescriptor;
    135a:	2a ed       	ldi	r18, 0xDA	; 218
    135c:	30 e0       	ldi	r19, 0x00	; 0

0000135e <.LVL20>:
    135e:	d3 cf       	rjmp	.-90     	; 0x1306 <.L2>

00001360 <is_timedout>:
	__builtin_avr_delay_cycles(__ticks_dc);
    1360:	85 e3       	ldi	r24, 0x35	; 53

00001362 <.L1^B1>:
    1362:	8a 95       	dec	r24
    1364:	f1 f7       	brne	.-4      	; 0x1362 <.L1^B1>
    1366:	00 00       	nop

00001368 <.LBE41>:
}

static bool is_timedout(void)
{
	_delay_us(10);
	if (timeout_val == 0)
    1368:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <timeout_val>
    136c:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <timeout_val+0x1>

00001370 <.Loc.14>:
    1370:	00 97       	sbiw	r24, 0x00	; 0
    1372:	39 f0       	breq	.+14     	; 0x1382 <.L3>

00001374 <.Loc.15>:
		return true;
		
	timeout_val--;
    1374:	01 97       	sbiw	r24, 0x01	; 1
    1376:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <timeout_val+0x1>
    137a:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <timeout_val>

0000137e <.Loc.17>:
	return false;
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	08 95       	ret

00001382 <.L3>:
		return true;
    1382:	81 e0       	ldi	r24, 0x01	; 1

00001384 <.Loc.20>:
}
    1384:	08 95       	ret

00001386 <__vector_23>:
{
    1386:	1f 92       	push	r1
    1388:	1f b6       	in	r1, 0x3f	; 63
    138a:	1f 92       	push	r1
    138c:	11 24       	eor	r1, r1
    138e:	8f 93       	push	r24

00001390 <.Loc.22>:
	timer0_div++;
    1390:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <timer0_div>
    1394:	8f 5f       	subi	r24, 0xFF	; 255
    1396:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <timer0_div>

0000139a <.Loc.24>:
	if (timer0_div >= 6) /* are 100ms passed? */
    139a:	86 30       	cpi	r24, 0x06	; 6
    139c:	c0 f0       	brcs	.+48     	; 0x13ce <.L4>

0000139e <.Loc.26>:
		timer0_100mscounter++;
    139e:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <timer0_100mscounter>
    13a2:	8f 5f       	subi	r24, 0xFF	; 255
    13a4:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timer0_100mscounter>

000013a8 <.Loc.28>:
		timer0_div = 0;
    13a8:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <timer0_div>

000013ac <.Loc.30>:
		if (!s_gpib_transaction_active) /* only check, if no GPIB transaction is active */
    13ac:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <s_gpib_transaction_active>

000013b0 <.Loc.32>:
    13b0:	81 11       	cpse	r24, r1
    13b2:	0d c0       	rjmp	.+26     	; 0x13ce <.L4>

000013b4 <.Loc.33>:
			if (!ATN_STATE) /* is ATN LOW? This can only happen if no GPIB device is connected/powered */
    13b4:	7e 99       	sbic	0x0f, 6	; 15
    13b6:	10 c0       	rjmp	.+32     	; 0x13d8 <.L8>

000013b8 <.Loc.35>:
				if (s_gpib_disconnect_counter == 2)
    13b8:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <s_gpib_disconnect_counter>

000013bc <.Loc.37>:
    13bc:	82 30       	cpi	r24, 0x02	; 2
    13be:	21 f4       	brne	.+8      	; 0x13c8 <.L9>

000013c0 <.Loc.38>:
					s_device_state = GPIB_DEVICE_CONNECTSTATE_DISCONNECTED;
    13c0:	81 e0       	ldi	r24, 0x01	; 1

000013c2 <.L10>:
				s_device_state = GPIB_DEVICE_CONNECTSTATE_CONNECTED;
    13c2:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <s_device_state>

000013c6 <.Loc.41>:
}
    13c6:	03 c0       	rjmp	.+6      	; 0x13ce <.L4>

000013c8 <.L9>:
					s_gpib_disconnect_counter++;
    13c8:	8f 5f       	subi	r24, 0xFF	; 255
    13ca:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <s_gpib_disconnect_counter>

000013ce <.L4>:
}
    13ce:	8f 91       	pop	r24
    13d0:	1f 90       	pop	r1
    13d2:	1f be       	out	0x3f, r1	; 63
    13d4:	1f 90       	pop	r1
    13d6:	18 95       	reti

000013d8 <.L8>:
				s_gpib_disconnect_counter = 0;
    13d8:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <s_gpib_disconnect_counter>

000013dc <.Loc.47>:
				s_device_state = GPIB_DEVICE_CONNECTSTATE_CONNECTED;
    13dc:	82 e0       	ldi	r24, 0x02	; 2
    13de:	f1 cf       	rjmp	.-30     	; 0x13c2 <.L10>

000013e0 <gpib_is_connected>:
	return s_device_state == GPIB_DEVICE_CONNECTSTATE_CONNECTED;
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <s_device_state>
    13e6:	92 30       	cpi	r25, 0x02	; 2
    13e8:	09 f0       	breq	.+2      	; 0x13ec <.L12>
    13ea:	80 e0       	ldi	r24, 0x00	; 0

000013ec <.L12>:
}
    13ec:	08 95       	ret

000013ee <gpib_ren>:
	if (enable)
    13ee:	88 23       	and	r24, r24
    13f0:	11 f0       	breq	.+4      	; 0x13f6 <.L17>

000013f2 <.Loc.56>:
		REN_LOW; /* remote enable */
    13f2:	25 9a       	sbi	0x04, 5	; 4
    13f4:	08 95       	ret

000013f6 <.L17>:
		REN_HIGH; /* remote disable */
    13f6:	25 98       	cbi	0x04, 5	; 4

000013f8 <.Loc.58>:
}
    13f8:	08 95       	ret

000013fa <gpib_interface_clear>:
	IFC_LOW; /* interface clear */
    13fa:	6a 9a       	sbi	0x0d, 2	; 13

000013fc <.LBB42>:
	__builtin_avr_delay_cycles(__ticks_dc);
    13fc:	2f ef       	ldi	r18, 0xFF	; 255
    13fe:	81 ee       	ldi	r24, 0xE1	; 225
    1400:	94 e0       	ldi	r25, 0x04	; 4

00001402 <.L1^B2>:
    1402:	21 50       	subi	r18, 0x01	; 1
    1404:	80 40       	sbci	r24, 0x00	; 0
    1406:	90 40       	sbci	r25, 0x00	; 0
    1408:	e1 f7       	brne	.-8      	; 0x1402 <.L1^B2>
    140a:	00 c0       	rjmp	.+0      	; 0x140c <L0^A>

0000140c <L0^A>:
    140c:	00 00       	nop

0000140e <.LBE45>:
	IFC_HIGH; /* interface clear */
    140e:	6a 98       	cbi	0x0d, 2	; 13

00001410 <.LBB46>:
    1410:	8f e3       	ldi	r24, 0x3F	; 63
    1412:	9c e9       	ldi	r25, 0x9C	; 156

00001414 <.L1^B3>:
    1414:	01 97       	sbiw	r24, 0x01	; 1
    1416:	f1 f7       	brne	.-4      	; 0x1414 <.L1^B3>
    1418:	00 c0       	rjmp	.+0      	; 0x141a <L0^A>

0000141a <L0^A>:
    141a:	00 00       	nop

0000141c <.LBE49>:
	s_gpib_transaction_active = false;
    141c:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <s_gpib_transaction_active>

00001420 <.Loc.86>:
}
    1420:	08 95       	ret

00001422 <gpib_init>:
	DDRD  = 0x00;
    1422:	1a b8       	out	0x0a, r1	; 10

00001424 <.Loc.90>:
	PORTD = 0x00;
    1424:	1b b8       	out	0x0b, r1	; 11

00001426 <.Loc.92>:
	PORTB &= ~((1<<4) | (1<<5) | (1<<6));
    1426:	85 b1       	in	r24, 0x05	; 5
    1428:	8f 78       	andi	r24, 0x8F	; 143
    142a:	85 b9       	out	0x05, r24	; 5

0000142c <.Loc.94>:
	DDRB  &= ~((1<<4) | (1<<5) | (1<<6));
    142c:	84 b1       	in	r24, 0x04	; 4
    142e:	8f 78       	andi	r24, 0x8F	; 143
    1430:	84 b9       	out	0x04, r24	; 4

00001432 <.Loc.96>:
	PORTC &= ~((1<<6) | (1<<7));
    1432:	88 b1       	in	r24, 0x08	; 8
    1434:	8f 73       	andi	r24, 0x3F	; 63
    1436:	88 b9       	out	0x08, r24	; 8

00001438 <.Loc.98>:
	DDRC  &= ~((1<<6) | (1<<7));
    1438:	87 b1       	in	r24, 0x07	; 7
    143a:	8f 73       	andi	r24, 0x3F	; 63
    143c:	87 b9       	out	0x07, r24	; 7

0000143e <.Loc.100>:
	PORTE &= ~(1<<2);
    143e:	72 98       	cbi	0x0e, 2	; 14

00001440 <.Loc.102>:
	DDRE  &= ~(1<<2);
    1440:	6a 98       	cbi	0x0d, 2	; 13

00001442 <.Loc.104>:
	PORTF &= ~((1<<6) | (1<<7));
    1442:	81 b3       	in	r24, 0x11	; 17
    1444:	8f 73       	andi	r24, 0x3F	; 63
    1446:	81 bb       	out	0x11, r24	; 17

00001448 <.Loc.106>:
	DDRF  &= ~((1<<6) | (1<<7));
    1448:	80 b3       	in	r24, 0x10	; 16
    144a:	8f 73       	andi	r24, 0x3F	; 63
    144c:	80 bb       	out	0x10, r24	; 16

0000144e <.Loc.108>:
	DDRB |= (1<<5); /* remote enable */
    144e:	25 9a       	sbi	0x04, 5	; 4

00001450 <.Loc.110>:
	s_gpib_transaction_active = false;
    1450:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <s_gpib_transaction_active>

00001454 <.Loc.112>:
	s_gpib_disconnect_counter = 0;
    1454:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <s_gpib_disconnect_counter>

00001458 <.Loc.114>:
	gpib_interface_clear();
    1458:	d0 df       	rcall	.-96     	; 0x13fa <gpib_interface_clear>

0000145a <.LBB52>:
	TCCR0B = 5; // Prescaler 1024 = 15625 Hz
    145a:	85 e0       	ldi	r24, 0x05	; 5
    145c:	85 bd       	out	0x25, r24	; 37

0000145e <.Loc.119>:
	TIMSK0 |= (1<<TOIE0);
    145e:	ee e6       	ldi	r30, 0x6E	; 110
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	81 60       	ori	r24, 0x01	; 1
    1466:	80 83       	st	Z, r24

00001468 <.Loc.121>:
	timer0_div = 0;
    1468:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <timer0_div>

0000146c <.Loc.123>:
	timer0_100mscounter = 0;
    146c:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <timer0_100mscounter>

00001470 <.LBE52>:
}
    1470:	08 95       	ret

00001472 <gpib_tx>:
{
    1472:	0f 93       	push	r16

00001474 <.LCFI0>:
    1474:	1f 93       	push	r17

00001476 <.LCFI1>:
    1476:	cf 93       	push	r28

00001478 <.LCFI2>:
    1478:	8a 01       	movw	r16, r20

0000147a <.Loc.128>:
	DAV_HIGH;
    147a:	26 98       	cbi	0x04, 6	; 4

0000147c <.Loc.130>:
	NRFD_HIGH;
    147c:	3e 98       	cbi	0x07, 6	; 7

0000147e <.Loc.131>:
	NDAC_HIGH;  /* they should be already high, but let's enforce it */
    147e:	3f 98       	cbi	0x07, 7	; 7

00001480 <.Loc.132>:
	if (iscommand)
    1480:	66 23       	and	r22, r22
    1482:	b1 f0       	breq	.+44     	; 0x14b0 <.L22>

00001484 <.Loc.134>:
		ATN_LOW;
    1484:	86 9a       	sbi	0x10, 6	; 16

00001486 <.L23>:
	DDRD = dat;   /* set Data to data bus */
    1486:	8a b9       	out	0x0a, r24	; 10

00001488 <.LBB58>:
	__builtin_avr_delay_cycles(__ticks_dc);
    1488:	85 e0       	ldi	r24, 0x05	; 5

0000148a <.L1^B4>:
    148a:	8a 95       	dec	r24
    148c:	f1 f7       	brne	.-4      	; 0x148a <.L1^B4>

0000148e <.LVL10>:
    148e:	00 00       	nop

00001490 <.L26>:
		timedout = ptimeoutfunc();
    1490:	f8 01       	movw	r30, r16
    1492:	09 95       	icall

00001494 <.LVL12>:
    1494:	c8 2f       	mov	r28, r24

00001496 <.LVL13>:
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    1496:	36 99       	sbic	0x06, 6	; 6
    1498:	0d c0       	rjmp	.+26     	; 0x14b4 <.L24>

0000149a <.Loc.154>:
    149a:	88 23       	and	r24, r24
    149c:	c9 f3       	breq	.-14     	; 0x1490 <.L26>

0000149e <.L25>:
	DDRD = 0x00; /* release data bus */
    149e:	1a b8       	out	0x0a, r1	; 10

000014a0 <.Loc.157>:
	ATN_HIGH;	 
    14a0:	86 98       	cbi	0x10, 6	; 16

000014a2 <.Loc.158>:
	if (timedout)
    14a2:	c1 11       	cpse	r28, r1

000014a4 <.LBB62>:
	gpib_init();
    14a4:	be df       	rcall	.-132    	; 0x1422 <gpib_init>

000014a6 <.LBE62>:
}
    14a6:	8c 2f       	mov	r24, r28
    14a8:	cf 91       	pop	r28
    14aa:	1f 91       	pop	r17
    14ac:	0f 91       	pop	r16

000014ae <.LVL16>:
    14ae:	08 95       	ret

000014b0 <.L22>:
		ATN_HIGH;
    14b0:	86 98       	cbi	0x10, 6	; 16
    14b2:	e9 cf       	rjmp	.-46     	; 0x1486 <.L23>

000014b4 <.L24>:
	if (!timedout)
    14b4:	81 11       	cpse	r24, r1
    14b6:	f3 cf       	rjmp	.-26     	; 0x149e <.L25>

000014b8 <.Loc.169>:
		DAV_LOW;
    14b8:	26 9a       	sbi	0x04, 6	; 4

000014ba <.L28>:
			timedout = ptimeoutfunc();
    14ba:	f8 01       	movw	r30, r16
    14bc:	09 95       	icall

000014be <.LVL19>:
    14be:	c8 2f       	mov	r28, r24

000014c0 <.LVL20>:
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    14c0:	37 99       	sbic	0x06, 7	; 6
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <.L27>

000014c4 <.Loc.176>:
    14c4:	88 23       	and	r24, r24
    14c6:	c9 f3       	breq	.-14     	; 0x14ba <.L28>

000014c8 <.L27>:
		DAV_HIGH; 
    14c8:	26 98       	cbi	0x04, 6	; 4
    14ca:	e9 cf       	rjmp	.-46     	; 0x149e <.L25>

000014cc <gpib_cmd_TAG>:
{
    14cc:	1f 93       	push	r17

000014ce <.LCFI3>:
    14ce:	cf 93       	push	r28

000014d0 <.LCFI4>:
    14d0:	df 93       	push	r29

000014d2 <.LCFI5>:
    14d2:	c8 2f       	mov	r28, r24
    14d4:	16 2f       	mov	r17, r22
    14d6:	d7 2f       	mov	r29, r23

000014d8 <.Loc.180>:
	result = gpib_tx((addr & 0x1f) | 0x40, true, ptimeoutfunc);
    14d8:	8f 71       	andi	r24, 0x1F	; 31

000014da <.LVL22>:
    14da:	46 2f       	mov	r20, r22
    14dc:	57 2f       	mov	r21, r23
    14de:	61 e0       	ldi	r22, 0x01	; 1

000014e0 <.LVL23>:
    14e0:	80 64       	ori	r24, 0x40	; 64
    14e2:	c7 df       	rcall	.-114    	; 0x1472 <gpib_tx>

000014e4 <.LVL24>:
	if (addr & 0xe0)
    14e4:	c0 7e       	andi	r28, 0xE0	; 224

000014e6 <.LVL25>:
    14e6:	41 f0       	breq	.+16     	; 0x14f8 <.L35>

000014e8 <.Loc.188>:
		result = gpib_tx(0x60, true, ptimeoutfunc);        // SAG (SA0)	
    14e8:	41 2f       	mov	r20, r17
    14ea:	5d 2f       	mov	r21, r29
    14ec:	61 e0       	ldi	r22, 0x01	; 1
    14ee:	80 e6       	ldi	r24, 0x60	; 96

000014f0 <.LVL26>:
}
    14f0:	df 91       	pop	r29
    14f2:	cf 91       	pop	r28
    14f4:	1f 91       	pop	r17

000014f6 <.Loc.191>:
		result = gpib_tx(0x60, true, ptimeoutfunc);        // SAG (SA0)	
    14f6:	bd cf       	rjmp	.-134    	; 0x1472 <gpib_tx>

000014f8 <.L35>:
}
    14f8:	df 91       	pop	r29
    14fa:	cf 91       	pop	r28
    14fc:	1f 91       	pop	r17
    14fe:	08 95       	ret

00001500 <gpib_cmd_LAG>:
{
    1500:	1f 93       	push	r17

00001502 <.LCFI6>:
    1502:	cf 93       	push	r28

00001504 <.LCFI7>:
    1504:	df 93       	push	r29

00001506 <.LCFI8>:
    1506:	c8 2f       	mov	r28, r24
    1508:	16 2f       	mov	r17, r22
    150a:	d7 2f       	mov	r29, r23

0000150c <.Loc.195>:
	result = gpib_tx((addr & 0x1f) | 0x20, true, ptimeoutfunc);
    150c:	8f 71       	andi	r24, 0x1F	; 31

0000150e <.LVL29>:
    150e:	46 2f       	mov	r20, r22
    1510:	57 2f       	mov	r21, r23
    1512:	61 e0       	ldi	r22, 0x01	; 1

00001514 <.LVL30>:
    1514:	80 62       	ori	r24, 0x20	; 32
    1516:	ad df       	rcall	.-166    	; 0x1472 <gpib_tx>

00001518 <.LVL31>:
	if (addr & 0xe0)
    1518:	c0 7e       	andi	r28, 0xE0	; 224

0000151a <.LVL32>:
    151a:	41 f0       	breq	.+16     	; 0x152c <.L37>

0000151c <.Loc.203>:
		result = gpib_tx(0x60, true, ptimeoutfunc);        // SAG (SA0)
    151c:	41 2f       	mov	r20, r17
    151e:	5d 2f       	mov	r21, r29
    1520:	61 e0       	ldi	r22, 0x01	; 1
    1522:	80 e6       	ldi	r24, 0x60	; 96

00001524 <.LVL33>:
}
    1524:	df 91       	pop	r29
    1526:	cf 91       	pop	r28
    1528:	1f 91       	pop	r17

0000152a <.Loc.206>:
		result = gpib_tx(0x60, true, ptimeoutfunc);        // SAG (SA0)
    152a:	a3 cf       	rjmp	.-186    	; 0x1472 <gpib_tx>

0000152c <.L37>:
}
    152c:	df 91       	pop	r29
    152e:	cf 91       	pop	r28
    1530:	1f 91       	pop	r17
    1532:	08 95       	ret

00001534 <gpib_cmd_UNL>:
{
    1534:	ac 01       	movw	r20, r24

00001536 <.Loc.210>:
	return gpib_tx(0x3F, true, ptimeoutfunc);
    1536:	61 e0       	ldi	r22, 0x01	; 1
    1538:	8f e3       	ldi	r24, 0x3F	; 63

0000153a <.LVL36>:
    153a:	9b cf       	rjmp	.-202    	; 0x1472 <gpib_tx>

0000153c <gpib_trigger>:
{
    153c:	cf 93       	push	r28

0000153e <.LCFI9>:
    153e:	df 93       	push	r29

00001540 <.LCFI10>:
    1540:	d6 2f       	mov	r29, r22
    1542:	c7 2f       	mov	r28, r23

00001544 <.Loc.216>:
	timedout = gpib_cmd_LAG(addr, ptimeoutfunc); 
    1544:	dd df       	rcall	.-70     	; 0x1500 <gpib_cmd_LAG>

00001546 <.LVL39>:
	if (!timedout)
    1546:	88 23       	and	r24, r24
    1548:	29 f0       	breq	.+10     	; 0x1554 <.L41>

0000154a <.L43>:
	gpib_init();
    154a:	6b df       	rcall	.-298    	; 0x1422 <gpib_init>

0000154c <.LVL41>:
}
    154c:	81 e0       	ldi	r24, 0x01	; 1

0000154e <.L40>:
}
    154e:	df 91       	pop	r29
    1550:	cf 91       	pop	r28
    1552:	08 95       	ret

00001554 <.L41>:
	return gpib_tx(0x08, true, ptimeoutfunc);
    1554:	4d 2f       	mov	r20, r29
    1556:	5c 2f       	mov	r21, r28
    1558:	61 e0       	ldi	r22, 0x01	; 1
    155a:	88 e0       	ldi	r24, 0x08	; 8

0000155c <.LVL44>:
    155c:	8a df       	rcall	.-236    	; 0x1472 <gpib_tx>

0000155e <.LBE70>:
	if (!timedout)
    155e:	81 11       	cpse	r24, r1
    1560:	f4 cf       	rjmp	.-24     	; 0x154a <.L43>

00001562 <.Loc.235>:
		timedout = gpib_cmd_UNL(ptimeoutfunc);
    1562:	8d 2f       	mov	r24, r29

00001564 <.LVL46>:
    1564:	9c 2f       	mov	r25, r28
    1566:	e6 df       	rcall	.-52     	; 0x1534 <gpib_cmd_UNL>

00001568 <.LVL47>:
	if (timedout)
    1568:	88 23       	and	r24, r24
    156a:	89 f3       	breq	.-30     	; 0x154e <.L40>
    156c:	ee cf       	rjmp	.-36     	; 0x154a <.L43>

0000156e <gpib_gotoLocal>:
{
    156e:	cf 93       	push	r28

00001570 <.LCFI11>:
    1570:	df 93       	push	r29

00001572 <.LCFI12>:
    1572:	d6 2f       	mov	r29, r22
    1574:	c7 2f       	mov	r28, r23

00001576 <.Loc.242>:
	timedout = gpib_cmd_LAG(addr, ptimeoutfunc); 
    1576:	c4 df       	rcall	.-120    	; 0x1500 <gpib_cmd_LAG>

00001578 <.LVL49>:
	if (!timedout)
    1578:	88 23       	and	r24, r24
    157a:	21 f0       	breq	.+8      	; 0x1584 <.L45>

0000157c <.L47>:
	gpib_init();
    157c:	52 df       	rcall	.-348    	; 0x1422 <gpib_init>

0000157e <.L46>:
}
    157e:	df 91       	pop	r29
    1580:	cf 91       	pop	r28
    1582:	08 95       	ret

00001584 <.L45>:
	return gpib_tx(0x01, true, ptimeoutfunc);
    1584:	4d 2f       	mov	r20, r29
    1586:	5c 2f       	mov	r21, r28
    1588:	61 e0       	ldi	r22, 0x01	; 1
    158a:	81 e0       	ldi	r24, 0x01	; 1

0000158c <.LVL53>:
    158c:	72 df       	rcall	.-284    	; 0x1472 <gpib_tx>

0000158e <.LBE78>:
	if (!timedout)
    158e:	81 11       	cpse	r24, r1
    1590:	f5 cf       	rjmp	.-22     	; 0x157c <.L47>

00001592 <.Loc.259>:
		timedout = gpib_cmd_UNL(ptimeoutfunc);
    1592:	8d 2f       	mov	r24, r29

00001594 <.LVL55>:
    1594:	9c 2f       	mov	r25, r28
    1596:	ce df       	rcall	.-100    	; 0x1534 <gpib_cmd_UNL>

00001598 <.LVL56>:
	if (timedout)
    1598:	88 23       	and	r24, r24
    159a:	89 f3       	breq	.-30     	; 0x157e <.L46>
    159c:	ef cf       	rjmp	.-34     	; 0x157c <.L47>

0000159e <gpib_localLockout>:
{
    159e:	cf 93       	push	r28

000015a0 <.LCFI13>:
    15a0:	ac 01       	movw	r20, r24

000015a2 <.LBB84>:
	return gpib_tx(0x11, true, ptimeoutfunc);
    15a2:	61 e0       	ldi	r22, 0x01	; 1
    15a4:	81 e1       	ldi	r24, 0x11	; 17

000015a6 <.LVL59>:
    15a6:	65 df       	rcall	.-310    	; 0x1472 <gpib_tx>

000015a8 <.LVL60>:
    15a8:	c8 2f       	mov	r28, r24

000015aa <.LBE84>:
	if (timedout)
    15aa:	81 11       	cpse	r24, r1

000015ac <.LBB86>:
	gpib_init();
    15ac:	3a df       	rcall	.-396    	; 0x1422 <gpib_init>

000015ae <.LBE86>:
}
    15ae:	8c 2f       	mov	r24, r28
    15b0:	cf 91       	pop	r28

000015b2 <.LVL63>:
    15b2:	08 95       	ret

000015b4 <gpib_readdat>:
{
    15b4:	bf 92       	push	r11

000015b6 <.LCFI14>:
    15b6:	cf 92       	push	r12

000015b8 <.LCFI15>:
    15b8:	df 92       	push	r13

000015ba <.LCFI16>:
    15ba:	ef 92       	push	r14

000015bc <.LCFI17>:
    15bc:	ff 92       	push	r15

000015be <.LCFI18>:
    15be:	0f 93       	push	r16

000015c0 <.LCFI19>:
    15c0:	1f 93       	push	r17

000015c2 <.LCFI20>:
    15c2:	cf 93       	push	r28

000015c4 <.LCFI21>:
    15c4:	df 93       	push	r29

000015c6 <.LCFI22>:
    15c6:	8c 01       	movw	r16, r24
    15c8:	6b 01       	movw	r12, r22
    15ca:	7a 01       	movw	r14, r20

000015cc <.LVL65>:
	NDAC_LOW;
    15cc:	3f 9a       	sbi	0x07, 7	; 7

000015ce <.Loc.290>:
	NRFD_HIGH;
    15ce:	3e 98       	cbi	0x07, 6	; 7

000015d0 <.L56>:
		timedout = ptimeoutfunc();
    15d0:	f7 01       	movw	r30, r14
    15d2:	09 95       	icall

000015d4 <.LVL67>:
    15d4:	c8 2f       	mov	r28, r24

000015d6 <.LVL68>:
	while ( (DAV_STATE != 0) && !timedout ); /* wait until DAV gets low */
    15d6:	83 b1       	in	r24, 0x03	; 3

000015d8 <.LVL69>:
    15d8:	f8 2f       	mov	r31, r24
    15da:	f0 74       	andi	r31, 0x40	; 64
    15dc:	bf 2e       	mov	r11, r31
    15de:	86 ff       	sbrs	r24, 6
    15e0:	05 c0       	rjmp	.+10     	; 0x15ec <.L54>

000015e2 <.Loc.297>:
    15e2:	cc 23       	and	r28, r28
    15e4:	a9 f3       	breq	.-22     	; 0x15d0 <.L56>

000015e6 <.Loc.298>:
	eoi = false;	
    15e6:	d0 e0       	ldi	r29, 0x00	; 0

000015e8 <.Loc.299>:
	c = 0;
    15e8:	b1 2c       	mov	r11, r1
    15ea:	13 c0       	rjmp	.+38     	; 0x1612 <.L55>

000015ec <.L54>:
	eoi = false;	
    15ec:	d0 e0       	ldi	r29, 0x00	; 0

000015ee <.Loc.302>:
	if (!timedout)
    15ee:	c1 11       	cpse	r28, r1
    15f0:	10 c0       	rjmp	.+32     	; 0x1612 <.L55>

000015f2 <.Loc.303>:
		NRFD_LOW;
    15f2:	3e 9a       	sbi	0x07, 6	; 7

000015f4 <.Loc.304>:
		c = ~PIND;
    15f4:	b9 b0       	in	r11, 0x09	; 9

000015f6 <.Loc.306>:
    15f6:	b0 94       	com	r11

000015f8 <.LVL70>:
		eoi = (EOI_STATE == 0) ;
    15f8:	d3 b1       	in	r29, 0x03	; 3

000015fa <.Loc.309>:
    15fa:	d2 95       	swap	r29
    15fc:	d1 70       	andi	r29, 0x01	; 1
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	d8 27       	eor	r29, r24

00001602 <.LVL71>:
		NDAC_HIGH;
    1602:	3f 98       	cbi	0x07, 7	; 7

00001604 <.L57>:
			timedout = ptimeoutfunc();
    1604:	f7 01       	movw	r30, r14
    1606:	09 95       	icall

00001608 <.LVL72>:
    1608:	c8 2f       	mov	r28, r24

0000160a <.LVL73>:
		while ( (DAV_STATE == 0) && !timedout ); /* wait until DAV gets high */
    160a:	1e 99       	sbic	0x03, 6	; 3
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <.L55>

0000160e <.Loc.316>:
    160e:	88 23       	and	r24, r24
    1610:	c9 f3       	breq	.-14     	; 0x1604 <.L57>

00001612 <.L55>:
	if (s_terminator == '\0')
    1612:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <s_terminator>

00001616 <.Loc.319>:
    1616:	91 11       	cpse	r25, r1
    1618:	11 c0       	rjmp	.+34     	; 0x163c <.L58>

0000161a <.Loc.320>:
		*pEoi = eoi;
    161a:	f8 01       	movw	r30, r16
    161c:	d0 83       	st	Z, r29

0000161e <.L59>:
	if (timedout)
    161e:	c1 11       	cpse	r28, r1

00001620 <.LBB90>:
	gpib_init();
    1620:	00 df       	rcall	.-512    	; 0x1422 <gpib_init>

00001622 <.LBE90>:
	*ptimedout = timedout;
    1622:	f6 01       	movw	r30, r12
    1624:	c0 83       	st	Z, r28

00001626 <.Loc.329>:
};
    1626:	8b 2d       	mov	r24, r11
    1628:	df 91       	pop	r29

0000162a <.LVL76>:
    162a:	cf 91       	pop	r28

0000162c <.LVL77>:
    162c:	1f 91       	pop	r17
    162e:	0f 91       	pop	r16

00001630 <.LVL78>:
    1630:	ff 90       	pop	r15
    1632:	ef 90       	pop	r14

00001634 <.LVL79>:
    1634:	df 90       	pop	r13
    1636:	cf 90       	pop	r12

00001638 <.LVL80>:
    1638:	bf 90       	pop	r11

0000163a <.LVL81>:
    163a:	08 95       	ret

0000163c <.L58>:
		*pEoi = eoi || (c == s_terminator);
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	d1 11       	cpse	r29, r1
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <.L60>

00001642 <.Loc.339>:
    1642:	9b 11       	cpse	r25, r11
    1644:	80 e0       	ldi	r24, 0x00	; 0

00001646 <.L60>:
    1646:	81 70       	andi	r24, 0x01	; 1
    1648:	f8 01       	movw	r30, r16
    164a:	80 83       	st	Z, r24
    164c:	e8 cf       	rjmp	.-48     	; 0x161e <.L59>

0000164e <gpib_readStatusByte>:
{
    164e:	ff 92       	push	r15

00001650 <.LCFI23>:
    1650:	0f 93       	push	r16

00001652 <.LCFI24>:
    1652:	1f 93       	push	r17

00001654 <.LCFI25>:
    1654:	cf 93       	push	r28

00001656 <.LCFI26>:
    1656:	df 93       	push	r29

00001658 <.LCFI27>:
    1658:	00 d0       	rcall	.+0      	; 0x165a <L0^A>

0000165a <L0^A>:
    165a:	cd b7       	in	r28, 0x3d	; 61
    165c:	de b7       	in	r29, 0x3e	; 62

0000165e <.LCFI29>:
    165e:	f8 2e       	mov	r15, r24
    1660:	8b 01       	movw	r16, r22

00001662 <.Loc.343>:
	timedout = false;
    1662:	1a 82       	std	Y+2, r1	; 0x02

00001664 <.LBB100>:
	return gpib_tx(0x18, true, ptimeoutfunc);
    1664:	ab 01       	movw	r20, r22
    1666:	61 e0       	ldi	r22, 0x01	; 1

00001668 <.LVL85>:
    1668:	88 e1       	ldi	r24, 0x18	; 24

0000166a <.LVL86>:
    166a:	03 df       	rcall	.-506    	; 0x1472 <gpib_tx>

0000166c <.LBE100>:
		timedout = gpib_cmd_SPE(ptimeoutfunc);
    166c:	8a 83       	std	Y+2, r24	; 0x02

0000166e <.Loc.357>:
	if (!timedout)
    166e:	81 11       	cpse	r24, r1
    1670:	04 c0       	rjmp	.+8      	; 0x167a <.L72>

00001672 <.Loc.359>:
		timedout = gpib_cmd_TAG(addr, ptimeoutfunc); 
    1672:	b8 01       	movw	r22, r16
    1674:	8f 2d       	mov	r24, r15
    1676:	2a df       	rcall	.-428    	; 0x14cc <gpib_cmd_TAG>

00001678 <.LVL88>:
    1678:	8a 83       	std	Y+2, r24	; 0x02

0000167a <.L72>:
	ATN_HIGH; /* make ATN H */	
    167a:	86 98       	cbi	0x10, 6	; 16

0000167c <.Loc.363>:
	NDAC_LOW;   /* make NDAC L */
    167c:	3f 9a       	sbi	0x07, 7	; 7

0000167e <.Loc.364>:
	if (!timedout)
    167e:	8a 81       	ldd	r24, Y+2	; 0x02

00001680 <.Loc.366>:
	status = 0;
    1680:	f1 2c       	mov	r15, r1

00001682 <.LVL89>:
	if (!timedout)
    1682:	81 11       	cpse	r24, r1
    1684:	18 c0       	rjmp	.+48     	; 0x16b6 <.L76>

00001686 <.Loc.368>:
		status = gpib_readdat(&eoi, &timedout, ptimeoutfunc);
    1686:	a8 01       	movw	r20, r16
    1688:	be 01       	movw	r22, r28
    168a:	6e 5f       	subi	r22, 0xFE	; 254
    168c:	7f 4f       	sbci	r23, 0xFF	; 255
    168e:	ce 01       	movw	r24, r28
    1690:	01 96       	adiw	r24, 0x01	; 1
    1692:	90 df       	rcall	.-224    	; 0x15b4 <gpib_readdat>

00001694 <.LVL90>:
    1694:	f8 2e       	mov	r15, r24

00001696 <.LVL91>:
	if (!timedout)
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	81 11       	cpse	r24, r1
    169a:	0d c0       	rjmp	.+26     	; 0x16b6 <.L76>

0000169c <.LBB102>:
	return gpib_tx(0x5F, true, ptimeoutfunc);
    169c:	a8 01       	movw	r20, r16
    169e:	61 e0       	ldi	r22, 0x01	; 1
    16a0:	8f e5       	ldi	r24, 0x5F	; 95
    16a2:	e7 de       	rcall	.-562    	; 0x1472 <gpib_tx>

000016a4 <.LBE102>:
		timedout = gpib_cmd_UNT(ptimeoutfunc); 
    16a4:	8a 83       	std	Y+2, r24	; 0x02

000016a6 <.Loc.378>:
	if (!timedout)
    16a6:	81 11       	cpse	r24, r1
    16a8:	06 c0       	rjmp	.+12     	; 0x16b6 <.L76>

000016aa <.LBB104>:
	return gpib_tx(0x19, true, ptimeoutfunc);
    16aa:	a8 01       	movw	r20, r16
    16ac:	61 e0       	ldi	r22, 0x01	; 1
    16ae:	89 e1       	ldi	r24, 0x19	; 25
    16b0:	e0 de       	rcall	.-576    	; 0x1472 <gpib_tx>

000016b2 <.LBE104>:
		timedout = gpib_cmd_SPD(ptimeoutfunc);
    16b2:	8a 83       	std	Y+2, r24	; 0x02

000016b4 <.Loc.386>:
	if (timedout)
    16b4:	81 11       	cpse	r24, r1

000016b6 <.L76>:
	gpib_init();
    16b6:	b5 de       	rcall	.-662    	; 0x1422 <gpib_init>

000016b8 <.LBE106>:
}
    16b8:	8f 2d       	mov	r24, r15
    16ba:	0f 90       	pop	r0
    16bc:	0f 90       	pop	r0
    16be:	df 91       	pop	r29
    16c0:	cf 91       	pop	r28
    16c2:	1f 91       	pop	r17
    16c4:	0f 91       	pop	r16

000016c6 <.LVL98>:
    16c6:	ff 90       	pop	r15
    16c8:	08 95       	ret

000016ca <gpib_untalk_unlisten>:
{
    16ca:	cf 93       	push	r28

000016cc <.LCFI30>:
    16cc:	df 93       	push	r29

000016ce <.LCFI31>:
    16ce:	d8 2f       	mov	r29, r24
    16d0:	c9 2f       	mov	r28, r25

000016d2 <.Loc.396>:
	timedout = gpib_cmd_UNL(ptimeoutfunc);
    16d2:	30 df       	rcall	.-416    	; 0x1534 <gpib_cmd_UNL>

000016d4 <.LVL100>:
	if (!timedout)
    16d4:	88 23       	and	r24, r24
    16d6:	39 f0       	breq	.+14     	; 0x16e6 <.L82>

000016d8 <.L84>:
	gpib_init();
    16d8:	a4 de       	rcall	.-696    	; 0x1422 <gpib_init>

000016da <.LVL102>:
}
    16da:	81 e0       	ldi	r24, 0x01	; 1

000016dc <.L83>:
	s_gpib_transaction_active = false;
    16dc:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <s_gpib_transaction_active>

000016e0 <.Loc.408>:
}
    16e0:	df 91       	pop	r29
    16e2:	cf 91       	pop	r28
    16e4:	08 95       	ret

000016e6 <.L82>:
	return gpib_tx(0x5F, true, ptimeoutfunc);
    16e6:	4d 2f       	mov	r20, r29
    16e8:	5c 2f       	mov	r21, r28
    16ea:	61 e0       	ldi	r22, 0x01	; 1
    16ec:	8f e5       	ldi	r24, 0x5F	; 95

000016ee <.LVL105>:
    16ee:	c1 de       	rcall	.-638    	; 0x1472 <gpib_tx>

000016f0 <.LBE114>:
	if (timedout)
    16f0:	88 23       	and	r24, r24
    16f2:	a1 f3       	breq	.-24     	; 0x16dc <.L83>
    16f4:	f1 cf       	rjmp	.-30     	; 0x16d8 <.L84>

000016f6 <gpib_make_talker>:
{
    16f6:	0f 93       	push	r16

000016f8 <.LCFI32>:
    16f8:	1f 93       	push	r17

000016fa <.LCFI33>:
    16fa:	cf 93       	push	r28

000016fc <.LCFI34>:
    16fc:	df 93       	push	r29

000016fe <.LCFI35>:
    16fe:	08 2f       	mov	r16, r24
    1700:	16 2f       	mov	r17, r22
    1702:	d7 2f       	mov	r29, r23

00001704 <.Loc.420>:
	s_gpib_transaction_active = true;
    1704:	81 e0       	ldi	r24, 0x01	; 1

00001706 <.LVL108>:
    1706:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <s_gpib_transaction_active>

0000170a <.Loc.424>:
	timedout = gpib_cmd_UNL(ptimeoutfunc);
    170a:	86 2f       	mov	r24, r22
    170c:	97 2f       	mov	r25, r23
    170e:	12 df       	rcall	.-476    	; 0x1534 <gpib_cmd_UNL>

00001710 <.LVL109>:
    1710:	c8 2f       	mov	r28, r24

00001712 <.LVL110>:
	if (!timedout)
    1712:	81 11       	cpse	r24, r1
    1714:	05 c0       	rjmp	.+10     	; 0x1720 <.L86>

00001716 <.Loc.429>:
		timedout = gpib_cmd_TAG(addr, ptimeoutfunc); /* address as talker*/
    1716:	61 2f       	mov	r22, r17
    1718:	7d 2f       	mov	r23, r29
    171a:	80 2f       	mov	r24, r16

0000171c <.LVL111>:
    171c:	d7 de       	rcall	.-594    	; 0x14cc <gpib_cmd_TAG>

0000171e <.LVL112>:
    171e:	c8 2f       	mov	r28, r24

00001720 <.L86>:
	ATN_HIGH; /* make ATN H */	
    1720:	86 98       	cbi	0x10, 6	; 16

00001722 <.Loc.433>:
	NDAC_LOW;   /* make NDAC L */
    1722:	3f 9a       	sbi	0x07, 7	; 7

00001724 <.Loc.434>:
	if (timedout)
    1724:	c1 11       	cpse	r28, r1

00001726 <.LBB118>:
	gpib_init();
    1726:	7d de       	rcall	.-774    	; 0x1422 <gpib_init>

00001728 <.LBE118>:
}
    1728:	8c 2f       	mov	r24, r28
    172a:	df 91       	pop	r29
    172c:	cf 91       	pop	r28
    172e:	1f 91       	pop	r17
    1730:	0f 91       	pop	r16

00001732 <.LVL116>:
    1732:	08 95       	ret

00001734 <gpib_make_listener>:
{
    1734:	1f 93       	push	r17

00001736 <.LCFI36>:
    1736:	cf 93       	push	r28

00001738 <.LCFI37>:
    1738:	df 93       	push	r29

0000173a <.LCFI38>:
    173a:	18 2f       	mov	r17, r24
    173c:	d6 2f       	mov	r29, r22
    173e:	c7 2f       	mov	r28, r23

00001740 <.Loc.444>:
	s_gpib_transaction_active = true;
    1740:	81 e0       	ldi	r24, 0x01	; 1

00001742 <.LVL118>:
    1742:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <s_gpib_transaction_active>

00001746 <.LBB124>:
	return gpib_tx(0x5F, true, ptimeoutfunc);
    1746:	46 2f       	mov	r20, r22
    1748:	57 2f       	mov	r21, r23
    174a:	61 e0       	ldi	r22, 0x01	; 1

0000174c <.LVL120>:
    174c:	8f e5       	ldi	r24, 0x5F	; 95
    174e:	91 de       	rcall	.-734    	; 0x1472 <gpib_tx>

00001750 <.LBE124>:
	if (!timedout)
    1750:	88 23       	and	r24, r24
    1752:	49 f0       	breq	.+18     	; 0x1766 <.L92>

00001754 <.L94>:
{
    1754:	c1 e0       	ldi	r28, 0x01	; 1

00001756 <.L93>:
	ATN_HIGH;    /* make ATN H */
    1756:	86 98       	cbi	0x10, 6	; 16

00001758 <.Loc.458>:
	if (timedout)
    1758:	c1 11       	cpse	r28, r1

0000175a <.LBB126>:
	gpib_init();
    175a:	63 de       	rcall	.-826    	; 0x1422 <gpib_init>

0000175c <.LBE126>:
}
    175c:	8c 2f       	mov	r24, r28
    175e:	df 91       	pop	r29
    1760:	cf 91       	pop	r28
    1762:	1f 91       	pop	r17

00001764 <.LVL125>:
    1764:	08 95       	ret

00001766 <.L92>:
		timedout = gpib_cmd_UNL(ptimeoutfunc);
    1766:	8d 2f       	mov	r24, r29

00001768 <.LVL127>:
    1768:	9c 2f       	mov	r25, r28
    176a:	e4 de       	rcall	.-568    	; 0x1534 <gpib_cmd_UNL>

0000176c <.LVL128>:
	if (!timedout)
    176c:	81 11       	cpse	r24, r1
    176e:	f2 cf       	rjmp	.-28     	; 0x1754 <.L94>

00001770 <.Loc.471>:
		timedout = gpib_cmd_LAG(addr, ptimeoutfunc); /* address target as listener*/
    1770:	6d 2f       	mov	r22, r29
    1772:	7c 2f       	mov	r23, r28
    1774:	81 2f       	mov	r24, r17

00001776 <.LVL129>:
    1776:	c4 de       	rcall	.-632    	; 0x1500 <gpib_cmd_LAG>

00001778 <.LVL130>:
    1778:	c8 2f       	mov	r28, r24

0000177a <.LVL131>:
    177a:	ed cf       	rjmp	.-38     	; 0x1756 <.L93>

0000177c <gpib_writedat>:
	if (Eoi)
    177c:	61 11       	cpse	r22, r1

0000177e <.Loc.479>:
		EOI_LOW; /* make EOI L */
    177e:	24 9a       	sbi	0x04, 4	; 4

00001780 <.LBB130>:
	return gpib_tx(dat, false, ptimeoutfunc);
    1780:	60 e0       	ldi	r22, 0x00	; 0

00001782 <.LVL134>:
    1782:	77 de       	rcall	.-786    	; 0x1472 <gpib_tx>

00001784 <.LBE130>:
	EOI_HIGH;    /* make EOI H */
    1784:	24 98       	cbi	0x04, 4	; 4

00001786 <.Loc.487>:
}
    1786:	08 95       	ret

00001788 <gpib_set_readtermination>:
	switch(terminator)
    1788:	8a 30       	cpi	r24, 0x0A	; 10
    178a:	29 f0       	breq	.+10     	; 0x1796 <.L106>
    178c:	8d 30       	cpi	r24, 0x0D	; 13
    178e:	19 f0       	breq	.+6      	; 0x1796 <.L106>

00001790 <.Loc.491>:
			s_terminator = '\0';
    1790:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <s_terminator>

00001794 <.Loc.493>:
}
    1794:	08 95       	ret

00001796 <.L106>:
			s_terminator = '\r';
    1796:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <s_terminator>

0000179a <.Loc.497>:
			break;
    179a:	08 95       	ret

0000179c <gpib_search>:

uint8_t gpib_search(void)
{
    179c:	0f 93       	push	r16

0000179e <.LCFI39>:
    179e:	1f 93       	push	r17

000017a0 <.LCFI40>:
    17a0:	cf 93       	push	r28

000017a2 <.LCFI41>:
    17a2:	df 93       	push	r29

000017a4 <.LBB144>:
	timeout_val = timeout;
    17a4:	84 ef       	ldi	r24, 0xF4	; 244
    17a6:	91 e0       	ldi	r25, 0x01	; 1
    17a8:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <timeout_val+0x1>
    17ac:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <timeout_val>

000017b0 <.LBE144>:
	int8_t addr;
	uint8_t foundaddr;
	
	timeout_start(500);
	gpib_tx(0x3F, true, is_timedout); // UNL
    17b0:	40 eb       	ldi	r20, 0xB0	; 176
    17b2:	59 e0       	ldi	r21, 0x09	; 9
    17b4:	61 e0       	ldi	r22, 0x01	; 1
    17b6:	8f e3       	ldi	r24, 0x3F	; 63
    17b8:	5c de       	rcall	.-840    	; 0x1472 <gpib_tx>

000017ba <.LVL139>:
	
	foundaddr = 255;

	for (addr = 0x3e; addr >= 0; --addr)
    17ba:	ce e3       	ldi	r28, 0x3E	; 62

000017bc <.LBB146>:
	timeout_val = timeout;
    17bc:	04 ef       	ldi	r16, 0xF4	; 244
    17be:	11 e0       	ldi	r17, 0x01	; 1

000017c0 <.L112>:
	{
		if ((addr & 0x1f) == 0x1f)
    17c0:	dc 2f       	mov	r29, r28

000017c2 <.Loc.514>:
    17c2:	8c 2f       	mov	r24, r28
    17c4:	8f 71       	andi	r24, 0x1F	; 31
    17c6:	8f 31       	cpi	r24, 0x1F	; 31
    17c8:	89 f5       	brne	.+98     	; 0x182c <.L111>

000017ca <.L114>:
	for (addr = 0x3e; addr >= 0; --addr)
    17ca:	c1 50       	subi	r28, 0x01	; 1
    17cc:	c8 f7       	brcc	.-14     	; 0x17c0 <.L112>

000017ce <.Loc.517>:
	foundaddr = 255;
    17ce:	df ef       	ldi	r29, 0xFF	; 255

000017d0 <.L113>:
	timeout_val = timeout;
    17d0:	84 ef       	ldi	r24, 0xF4	; 244
    17d2:	91 e0       	ldi	r25, 0x01	; 1
    17d4:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <timeout_val+0x1>
    17d8:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <timeout_val>

000017dc <.LBE149>:
			break;
		}
	}
	
	timeout_start(500);
	gpib_tx(0x3F, true, is_timedout); // UNL
    17dc:	40 eb       	ldi	r20, 0xB0	; 176
    17de:	59 e0       	ldi	r21, 0x09	; 9
    17e0:	61 e0       	ldi	r22, 0x01	; 1
    17e2:	8f e3       	ldi	r24, 0x3F	; 63
    17e4:	46 de       	rcall	.-884    	; 0x1472 <gpib_tx>

000017e6 <.LVL144>:

	/* if the device needs a secondary address, ensure, that it really cannot be addressed without secondary address */
	if (addr & 0x20)
    17e6:	c5 ff       	sbrs	r28, 5
    17e8:	1b c0       	rjmp	.+54     	; 0x1820 <.L110>

000017ea <.Loc.526>:
	{
		/* address once without SA. If it responds, force it to this primary addressing only! */
		gpib_cmd_LAG(addr & 0x1f, is_timedout);
    17ea:	cf 71       	andi	r28, 0x1F	; 31

000017ec <.LVL145>:
    17ec:	60 eb       	ldi	r22, 0xB0	; 176
    17ee:	79 e0       	ldi	r23, 0x09	; 9
    17f0:	8c 2f       	mov	r24, r28
    17f2:	86 de       	rcall	.-756    	; 0x1500 <gpib_cmd_LAG>

000017f4 <.LVL146>:
		ATN_HIGH; /* make ATN H */
    17f4:	86 98       	cbi	0x10, 6	; 16

000017f6 <.LBB151>:
	__builtin_avr_delay_cycles(__ticks_dc);
    17f6:	8f e3       	ldi	r24, 0x3F	; 63
    17f8:	9f e1       	ldi	r25, 0x1F	; 31

000017fa <.L1^B5>:
    17fa:	01 97       	sbiw	r24, 0x01	; 1
    17fc:	f1 f7       	brne	.-4      	; 0x17fa <.L1^B5>
    17fe:	00 c0       	rjmp	.+0      	; 0x1800 <L0^A>

00001800 <L0^A>:
    1800:	00 00       	nop

00001802 <.LBE154>:
		_delay_ms(2);
		if ((NDAC_STATE == 0) && (ATN_STATE != 0))
    1802:	37 99       	sbic	0x06, 7	; 6
    1804:	02 c0       	rjmp	.+4      	; 0x180a <.L116>

00001806 <.Loc.542>:
    1806:	7e 99       	sbic	0x0f, 6	; 15

00001808 <.Loc.543>:
		{
			foundaddr = addr & 0x1f;
    1808:	dc 2f       	mov	r29, r28

0000180a <.L116>:
	timeout_val = timeout;
    180a:	84 ef       	ldi	r24, 0xF4	; 244
    180c:	91 e0       	ldi	r25, 0x01	; 1
    180e:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <timeout_val+0x1>
    1812:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <timeout_val>

00001816 <.LBE155>:
		}
		timeout_start(500);
		gpib_tx(0x3F, true, is_timedout); // UNL
    1816:	40 eb       	ldi	r20, 0xB0	; 176
    1818:	59 e0       	ldi	r21, 0x09	; 9
    181a:	61 e0       	ldi	r22, 0x01	; 1
    181c:	8f e3       	ldi	r24, 0x3F	; 63
    181e:	29 de       	rcall	.-942    	; 0x1472 <gpib_tx>

00001820 <.L110>:
	}
		
	return foundaddr;
}
    1820:	8d 2f       	mov	r24, r29
    1822:	df 91       	pop	r29

00001824 <.LVL152>:
    1824:	cf 91       	pop	r28
    1826:	1f 91       	pop	r17
    1828:	0f 91       	pop	r16
    182a:	08 95       	ret

0000182c <.L111>:
	timeout_val = timeout;
    182c:	10 93 6e 01 	sts	0x016E, r17	; 0x80016e <timeout_val+0x1>
    1830:	00 93 6d 01 	sts	0x016D, r16	; 0x80016d <timeout_val>

00001834 <.LBE157>:
		gpib_cmd_LAG(addr, is_timedout);
    1834:	60 eb       	ldi	r22, 0xB0	; 176
    1836:	79 e0       	ldi	r23, 0x09	; 9
    1838:	8c 2f       	mov	r24, r28
    183a:	62 de       	rcall	.-828    	; 0x1500 <gpib_cmd_LAG>

0000183c <.LVL155>:
		ATN_HIGH; /* make ATN H */
    183c:	86 98       	cbi	0x10, 6	; 16

0000183e <.LBB158>:
    183e:	8f e3       	ldi	r24, 0x3F	; 63
    1840:	9f e1       	ldi	r25, 0x1F	; 31

00001842 <.L1^B6>:
    1842:	01 97       	sbiw	r24, 0x01	; 1
    1844:	f1 f7       	brne	.-4      	; 0x1842 <.L1^B6>
    1846:	00 c0       	rjmp	.+0      	; 0x1848 <L0^A>

00001848 <L0^A>:
    1848:	00 00       	nop

0000184a <.LBE161>:
		if ((NDAC_STATE == 0) && (ATN_STATE != 0))
    184a:	37 99       	sbic	0x06, 7	; 6
    184c:	be cf       	rjmp	.-132    	; 0x17ca <.L114>

0000184e <.Loc.573>:
    184e:	7e 9b       	sbis	0x0f, 6	; 15
    1850:	bc cf       	rjmp	.-136    	; 0x17ca <.L114>
    1852:	be cf       	rjmp	.-132    	; 0x17d0 <.L113>

00001854 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1854:	af 92       	push	r10

00001856 <.LCFI14>:
    1856:	bf 92       	push	r11

00001858 <.LCFI15>:
    1858:	cf 92       	push	r12

0000185a <.LCFI16>:
    185a:	df 92       	push	r13

0000185c <.LCFI17>:
    185c:	ff 92       	push	r15

0000185e <.LCFI18>:
    185e:	0f 93       	push	r16

00001860 <.LCFI19>:
    1860:	1f 93       	push	r17

00001862 <.LCFI20>:
    1862:	cf 93       	push	r28

00001864 <.LCFI21>:
    1864:	df 93       	push	r29

00001866 <.LCFI22>:
    1866:	6c 01       	movw	r12, r24
    1868:	eb 01       	movw	r28, r22
    186a:	8a 01       	movw	r16, r20

0000186c <.LVL26>:
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    186c:	00 d2       	rcall	.+1024   	; 0x1c6e <Endpoint_WaitUntilReady>

0000186e <.LVL27>:
    186e:	f8 2e       	mov	r15, r24

00001870 <.LVL28>:
    1870:	81 11       	cpse	r24, r1
    1872:	23 c0       	rjmp	.+70     	; 0x18ba <.L21>

00001874 <.Loc.92>:
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1874:	01 15       	cp	r16, r1
    1876:	11 05       	cpc	r17, r1
    1878:	39 f0       	breq	.+14     	; 0x1888 <.L23>

0000187a <.Loc.94>:
	{
		Length -= *BytesProcessed;
    187a:	f8 01       	movw	r30, r16
    187c:	80 81       	ld	r24, Z
    187e:	91 81       	ldd	r25, Z+1	; 0x01

00001880 <.Loc.96>:
    1880:	c8 1b       	sub	r28, r24
    1882:	d9 0b       	sbc	r29, r25

00001884 <.Loc.97>:
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1884:	c8 0e       	add	r12, r24
    1886:	d9 1e       	adc	r13, r25

00001888 <.L23>:
{
    1888:	b1 2c       	mov	r11, r1
    188a:	a1 2c       	mov	r10, r1

0000188c <.L24>:
	}

	while (Length)
    188c:	20 97       	sbiw	r28, 0x00	; 0
    188e:	a9 f0       	breq	.+42     	; 0x18ba <.L21>

00001890 <.LBB280>:
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1890:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00001894 <.LBE280>:
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1894:	85 fd       	sbrc	r24, 5
    1896:	21 c0       	rjmp	.+66     	; 0x18da <.L25>

00001898 <.LBB282>:
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1898:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    189c:	8e 77       	andi	r24, 0x7E	; 126
    189e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

000018a2 <.LBE282>:

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    18a2:	01 15       	cp	r16, r1
    18a4:	11 05       	cpc	r17, r1
    18a6:	a1 f0       	breq	.+40     	; 0x18d0 <.L26>

000018a8 <.Loc.111>:
			{
				*BytesProcessed += BytesInTransfer;
    18a8:	f8 01       	movw	r30, r16
    18aa:	80 81       	ld	r24, Z
    18ac:	91 81       	ldd	r25, Z+1	; 0x01
    18ae:	a8 0e       	add	r10, r24
    18b0:	b9 1e       	adc	r11, r25

000018b2 <.LVL32>:
    18b2:	b1 82       	std	Z+1, r11	; 0x01
    18b4:	a0 82       	st	Z, r10

000018b6 <.Loc.114>:
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    18b6:	85 e0       	ldi	r24, 0x05	; 5
    18b8:	f8 2e       	mov	r15, r24

000018ba <.L21>:
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    18ba:	8f 2d       	mov	r24, r15
    18bc:	df 91       	pop	r29
    18be:	cf 91       	pop	r28

000018c0 <.LVL33>:
    18c0:	1f 91       	pop	r17
    18c2:	0f 91       	pop	r16

000018c4 <.LVL34>:
    18c4:	ff 90       	pop	r15
    18c6:	df 90       	pop	r13
    18c8:	cf 90       	pop	r12

000018ca <.LVL35>:
    18ca:	bf 90       	pop	r11
    18cc:	af 90       	pop	r10
    18ce:	08 95       	ret

000018d0 <.L26>:
			if ((ErrorCode = Endpoint_WaitUntilReady()))
    18d0:	ce d1       	rcall	.+924    	; 0x1c6e <Endpoint_WaitUntilReady>

000018d2 <.LVL37>:
    18d2:	88 23       	and	r24, r24
    18d4:	d9 f2       	breq	.-74     	; 0x188c <.L24>

000018d6 <.Loc.123>:
    18d6:	f8 2e       	mov	r15, r24
    18d8:	f0 cf       	rjmp	.-32     	; 0x18ba <.L21>

000018da <.L25>:
			TEMPLATE_TRANSFER_BYTE(DataStream);
    18da:	f6 01       	movw	r30, r12
    18dc:	81 91       	ld	r24, Z+
    18de:	6f 01       	movw	r12, r30

000018e0 <.LBB284>:
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    18e0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

000018e4 <.LBE284>:
			Length--;
    18e4:	21 97       	sbiw	r28, 0x01	; 1

000018e6 <.Loc.132>:
			BytesInTransfer++;
    18e6:	ff ef       	ldi	r31, 0xFF	; 255
    18e8:	af 1a       	sub	r10, r31
    18ea:	bf 0a       	sbc	r11, r31

000018ec <.Loc.134>:
    18ec:	cf cf       	rjmp	.-98     	; 0x188c <.L24>

000018ee <Endpoint_Read_Stream_LE>:
{
    18ee:	af 92       	push	r10

000018f0 <.LCFI32>:
    18f0:	bf 92       	push	r11

000018f2 <.LCFI33>:
    18f2:	cf 92       	push	r12

000018f4 <.LCFI34>:
    18f4:	df 92       	push	r13

000018f6 <.LCFI35>:
    18f6:	ff 92       	push	r15

000018f8 <.LCFI36>:
    18f8:	0f 93       	push	r16

000018fa <.LCFI37>:
    18fa:	1f 93       	push	r17

000018fc <.LCFI38>:
    18fc:	cf 93       	push	r28

000018fe <.LCFI39>:
    18fe:	df 93       	push	r29

00001900 <.LCFI40>:
    1900:	6c 01       	movw	r12, r24
    1902:	eb 01       	movw	r28, r22
    1904:	8a 01       	movw	r16, r20

00001906 <.LVL66>:
	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1906:	b3 d1       	rcall	.+870    	; 0x1c6e <Endpoint_WaitUntilReady>

00001908 <.LVL67>:
    1908:	f8 2e       	mov	r15, r24

0000190a <.LVL68>:
    190a:	81 11       	cpse	r24, r1
    190c:	23 c0       	rjmp	.+70     	; 0x1954 <.L45>

0000190e <.Loc.197>:
	if (BytesProcessed != NULL)
    190e:	01 15       	cp	r16, r1
    1910:	11 05       	cpc	r17, r1
    1912:	39 f0       	breq	.+14     	; 0x1922 <.L47>

00001914 <.Loc.199>:
		Length -= *BytesProcessed;
    1914:	f8 01       	movw	r30, r16
    1916:	80 81       	ld	r24, Z
    1918:	91 81       	ldd	r25, Z+1	; 0x01

0000191a <.Loc.201>:
    191a:	c8 1b       	sub	r28, r24
    191c:	d9 0b       	sbc	r29, r25

0000191e <.Loc.202>:
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    191e:	c8 0e       	add	r12, r24
    1920:	d9 1e       	adc	r13, r25

00001922 <.L47>:
{
    1922:	b1 2c       	mov	r11, r1
    1924:	a1 2c       	mov	r10, r1

00001926 <.L48>:
	while (Length)
    1926:	20 97       	sbiw	r28, 0x00	; 0
    1928:	a9 f0       	breq	.+42     	; 0x1954 <.L45>

0000192a <.LBB292>:
				return ((UEINTX & (1 << RWAL)) ? true : false);
    192a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

0000192e <.LBE292>:
		if (!(Endpoint_IsReadWriteAllowed()))
    192e:	85 fd       	sbrc	r24, 5
    1930:	21 c0       	rjmp	.+66     	; 0x1974 <.L49>

00001932 <.LBB294>:
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1932:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1936:	8b 77       	andi	r24, 0x7B	; 123
    1938:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

0000193c <.LBE294>:
			if (BytesProcessed != NULL)
    193c:	01 15       	cp	r16, r1
    193e:	11 05       	cpc	r17, r1
    1940:	a1 f0       	breq	.+40     	; 0x196a <.L50>

00001942 <.Loc.216>:
				*BytesProcessed += BytesInTransfer;
    1942:	f8 01       	movw	r30, r16
    1944:	80 81       	ld	r24, Z
    1946:	91 81       	ldd	r25, Z+1	; 0x01
    1948:	a8 0e       	add	r10, r24
    194a:	b9 1e       	adc	r11, r25

0000194c <.LVL72>:
    194c:	b1 82       	std	Z+1, r11	; 0x01
    194e:	a0 82       	st	Z, r10

00001950 <.Loc.219>:
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1950:	85 e0       	ldi	r24, 0x05	; 5
    1952:	f8 2e       	mov	r15, r24

00001954 <.L45>:
}
    1954:	8f 2d       	mov	r24, r15
    1956:	df 91       	pop	r29
    1958:	cf 91       	pop	r28

0000195a <.LVL73>:
    195a:	1f 91       	pop	r17
    195c:	0f 91       	pop	r16

0000195e <.LVL74>:
    195e:	ff 90       	pop	r15
    1960:	df 90       	pop	r13
    1962:	cf 90       	pop	r12

00001964 <.LVL75>:
    1964:	bf 90       	pop	r11
    1966:	af 90       	pop	r10
    1968:	08 95       	ret

0000196a <.L50>:
			if ((ErrorCode = Endpoint_WaitUntilReady()))
    196a:	81 d1       	rcall	.+770    	; 0x1c6e <Endpoint_WaitUntilReady>

0000196c <.LVL77>:
    196c:	88 23       	and	r24, r24
    196e:	d9 f2       	breq	.-74     	; 0x1926 <.L48>

00001970 <.Loc.228>:
    1970:	f8 2e       	mov	r15, r24
    1972:	f0 cf       	rjmp	.-32     	; 0x1954 <.L45>

00001974 <.L49>:
				return UEDATX;
    1974:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

00001978 <.LBE296>:
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1978:	f6 01       	movw	r30, r12
    197a:	81 93       	st	Z+, r24
    197c:	6f 01       	movw	r12, r30

0000197e <.LVL79>:
			Length--;
    197e:	21 97       	sbiw	r28, 0x01	; 1

00001980 <.Loc.237>:
			BytesInTransfer++;
    1980:	ff ef       	ldi	r31, 0xFF	; 255
    1982:	af 1a       	sub	r10, r31
    1984:	bf 0a       	sbc	r11, r31

00001986 <.Loc.239>:
    1986:	cf cf       	rjmp	.-98     	; 0x1926 <.L48>

00001988 <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    1988:	fc 01       	movw	r30, r24
    198a:	cb 01       	movw	r24, r22

0000198c <.LVL224>:
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    198c:	20 91 eb 01 	lds	r18, 0x01EB	; 0x8001eb <USB_ControlRequest+0x6>
    1990:	30 91 ec 01 	lds	r19, 0x01EC	; 0x8001ec <USB_ControlRequest+0x7>

00001994 <.Loc.624>:
    1994:	26 17       	cp	r18, r22
    1996:	37 07       	cpc	r19, r23
    1998:	90 f0       	brcs	.+36     	; 0x19be <.L153>

0000199a <.Loc.625>:
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    199a:	00 97       	sbiw	r24, 0x00	; 0
    199c:	29 f4       	brne	.+10     	; 0x19a8 <.L142>

0000199e <.LBB342>:
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    199e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    19a2:	2e 77       	andi	r18, 0x7E	; 126
    19a4:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

000019a8 <.L142>:
    19a8:	40 e0       	ldi	r20, 0x00	; 0

000019aa <.L146>:
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    19aa:	00 97       	sbiw	r24, 0x00	; 0
    19ac:	51 f4       	brne	.+20     	; 0x19c2 <.L151>

000019ae <.Loc.633>:
    19ae:	41 11       	cpse	r20, r1
    19b0:	08 c0       	rjmp	.+16     	; 0x19c2 <.L151>

000019b2 <.L165>:
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    19b2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

000019b6 <.LBE344>:
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    19b6:	82 ff       	sbrs	r24, 2
    19b8:	31 c0       	rjmp	.+98     	; 0x1a1c <.L152>

000019ba <.Loc.639>:
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    19ba:	80 e0       	ldi	r24, 0x00	; 0
    19bc:	08 95       	ret

000019be <.L153>:
    19be:	c9 01       	movw	r24, r18
    19c0:	f3 cf       	rjmp	.-26     	; 0x19a8 <.L142>

000019c2 <.L151>:
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    19c2:	20 91 e4 01 	lds	r18, 0x01E4	; 0x8001e4 <USB_DeviceState>

000019c6 <.LVL229>:
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    19c6:	22 23       	and	r18, r18
    19c8:	a9 f1       	breq	.+106    	; 0x1a34 <.L157>

000019ca <.Loc.645>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    19ca:	25 30       	cpi	r18, 0x05	; 5
    19cc:	a9 f1       	breq	.+106    	; 0x1a38 <.L158>

000019ce <.LBB347>:
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    19ce:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

000019d2 <.LBE347>:
		else if (Endpoint_IsSETUPReceived())
    19d2:	23 fd       	sbrc	r18, 3
    19d4:	2d c0       	rjmp	.+90     	; 0x1a30 <.L159>

000019d6 <.LBB349>:
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    19d6:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

000019da <.LBE349>:
		else if (Endpoint_IsOUTReceived())
    19da:	22 fd       	sbrc	r18, 2
    19dc:	ea cf       	rjmp	.-44     	; 0x19b2 <.L165>

000019de <.LBB351>:
				return ((UEINTX & (1 << TXINI)) ? true : false);
    19de:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

000019e2 <.LBE351>:
		if (Endpoint_IsINReady())
    19e2:	20 ff       	sbrs	r18, 0
    19e4:	e2 cf       	rjmp	.-60     	; 0x19aa <.L146>

000019e6 <.LBB353>:
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    19e6:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

000019ea <.Loc.667>:
    19ea:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>

000019ee <.L147>:
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    19ee:	00 97       	sbiw	r24, 0x00	; 0
    19f0:	19 f0       	breq	.+6      	; 0x19f8 <.L148>

000019f2 <.Loc.671>:
    19f2:	28 30       	cpi	r18, 0x08	; 8
    19f4:	31 05       	cpc	r19, r1
    19f6:	58 f0       	brcs	.+22     	; 0x1a0e <.L149>

000019f8 <.L148>:
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    19f8:	41 e0       	ldi	r20, 0x01	; 1
    19fa:	28 30       	cpi	r18, 0x08	; 8
    19fc:	31 05       	cpc	r19, r1
    19fe:	09 f0       	breq	.+2      	; 0x1a02 <.L150>
    1a00:	40 e0       	ldi	r20, 0x00	; 0

00001a02 <.L150>:
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a02:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00001a06 <.LVL233>:
    1a06:	2e 77       	andi	r18, 0x7E	; 126
    1a08:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00001a0c <.LVL234>:
			}
    1a0c:	ce cf       	rjmp	.-100    	; 0x19aa <.L146>

00001a0e <.L149>:
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1a0e:	41 91       	ld	r20, Z+

00001a10 <.LBB358>:
				UEDATX = Data;
    1a10:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

00001a14 <.LBE358>:
				Length--;
    1a14:	01 97       	sbiw	r24, 0x01	; 1

00001a16 <.Loc.689>:
				BytesInEndpoint++;
    1a16:	2f 5f       	subi	r18, 0xFF	; 255
    1a18:	3f 4f       	sbci	r19, 0xFF	; 255

00001a1a <.Loc.691>:
    1a1a:	e9 cf       	rjmp	.-46     	; 0x19ee <.L147>

00001a1c <.L152>:
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a1c:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <USB_DeviceState>

00001a20 <.LVL241>:
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a20:	88 23       	and	r24, r24
    1a22:	41 f0       	breq	.+16     	; 0x1a34 <.L157>

00001a24 <.Loc.697>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a24:	85 30       	cpi	r24, 0x05	; 5
    1a26:	41 f0       	breq	.+16     	; 0x1a38 <.L158>

00001a28 <.LBB361>:
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a28:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00001a2c <.LBE361>:
		else if (Endpoint_IsSETUPReceived())
    1a2c:	83 ff       	sbrs	r24, 3
    1a2e:	c1 cf       	rjmp	.-126    	; 0x19b2 <.L165>

00001a30 <.L159>:
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1a30:	81 e0       	ldi	r24, 0x01	; 1

00001a32 <.LBE363>:
}
    1a32:	08 95       	ret

00001a34 <.L157>:
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1a34:	82 e0       	ldi	r24, 0x02	; 2
    1a36:	08 95       	ret

00001a38 <.L158>:
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1a38:	83 e0       	ldi	r24, 0x03	; 3
    1a3a:	08 95       	ret

00001a3c <Endpoint_Write_Control_PStream_LE>:
{
    1a3c:	fc 01       	movw	r30, r24
    1a3e:	cb 01       	movw	r24, r22

00001a40 <.LVL290>:
	if (Length > USB_ControlRequest.wLength)
    1a40:	20 91 eb 01 	lds	r18, 0x01EB	; 0x8001eb <USB_ControlRequest+0x6>
    1a44:	30 91 ec 01 	lds	r19, 0x01EC	; 0x8001ec <USB_ControlRequest+0x7>

00001a48 <.Loc.934>:
    1a48:	26 17       	cp	r18, r22
    1a4a:	37 07       	cpc	r19, r23
    1a4c:	90 f0       	brcs	.+36     	; 0x1a72 <.L249>

00001a4e <.Loc.935>:
	else if (!(Length))
    1a4e:	00 97       	sbiw	r24, 0x00	; 0
    1a50:	29 f4       	brne	.+10     	; 0x1a5c <.L238>

00001a52 <.LBB422>:
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a52:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a56:	2e 77       	andi	r18, 0x7E	; 126
    1a58:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00001a5c <.L238>:
    1a5c:	40 e0       	ldi	r20, 0x00	; 0

00001a5e <.L242>:
	while (Length || LastPacketFull)
    1a5e:	00 97       	sbiw	r24, 0x00	; 0
    1a60:	51 f4       	brne	.+20     	; 0x1a76 <.L247>

00001a62 <.Loc.943>:
    1a62:	41 11       	cpse	r20, r1
    1a64:	08 c0       	rjmp	.+16     	; 0x1a76 <.L247>

00001a66 <.L261>:
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a66:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00001a6a <.LBE424>:
	while (!(Endpoint_IsOUTReceived()))
    1a6a:	82 ff       	sbrs	r24, 2
    1a6c:	32 c0       	rjmp	.+100    	; 0x1ad2 <.L248>

00001a6e <.Loc.949>:
	return ENDPOINT_RWCSTREAM_NoError;
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	08 95       	ret

00001a72 <.L249>:
    1a72:	c9 01       	movw	r24, r18
    1a74:	f3 cf       	rjmp	.-26     	; 0x1a5c <.L238>

00001a76 <.L247>:
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a76:	20 91 e4 01 	lds	r18, 0x01E4	; 0x8001e4 <USB_DeviceState>

00001a7a <.LVL295>:
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a7a:	22 23       	and	r18, r18
    1a7c:	b1 f1       	breq	.+108    	; 0x1aea <.L253>

00001a7e <.Loc.955>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a7e:	25 30       	cpi	r18, 0x05	; 5
    1a80:	b1 f1       	breq	.+108    	; 0x1aee <.L254>

00001a82 <.LBB427>:
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a82:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00001a86 <.LBE427>:
		else if (Endpoint_IsSETUPReceived())
    1a86:	23 fd       	sbrc	r18, 3
    1a88:	2e c0       	rjmp	.+92     	; 0x1ae6 <.L255>

00001a8a <.LBB429>:
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a8a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00001a8e <.LBE429>:
		else if (Endpoint_IsOUTReceived())
    1a8e:	22 fd       	sbrc	r18, 2
    1a90:	ea cf       	rjmp	.-44     	; 0x1a66 <.L261>

00001a92 <.LBB431>:
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a92:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00001a96 <.LBE431>:
		if (Endpoint_IsINReady())
    1a96:	20 ff       	sbrs	r18, 0
    1a98:	e2 cf       	rjmp	.-60     	; 0x1a5e <.L242>

00001a9a <.LBB433>:
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1a9a:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

00001a9e <.Loc.977>:
    1a9e:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>

00001aa2 <.L243>:
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1aa2:	00 97       	sbiw	r24, 0x00	; 0
    1aa4:	19 f0       	breq	.+6      	; 0x1aac <.L244>

00001aa6 <.Loc.981>:
    1aa6:	28 30       	cpi	r18, 0x08	; 8
    1aa8:	31 05       	cpc	r19, r1
    1aaa:	58 f0       	brcs	.+22     	; 0x1ac2 <.L245>

00001aac <.L244>:
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1aac:	41 e0       	ldi	r20, 0x01	; 1
    1aae:	28 30       	cpi	r18, 0x08	; 8
    1ab0:	31 05       	cpc	r19, r1
    1ab2:	09 f0       	breq	.+2      	; 0x1ab6 <.L246>
    1ab4:	40 e0       	ldi	r20, 0x00	; 0

00001ab6 <.L246>:
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1ab6:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00001aba <.LVL299>:
    1aba:	2e 77       	andi	r18, 0x7E	; 126
    1abc:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00001ac0 <.LVL300>:
			}
    1ac0:	ce cf       	rjmp	.-100    	; 0x1a5e <.L242>

00001ac2 <.L245>:
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1ac2:	44 91       	lpm	r20, Z

00001ac4 <.LBB439>:
				UEDATX = Data;
    1ac4:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

00001ac8 <.LBE439>:
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1ac8:	31 96       	adiw	r30, 0x01	; 1

00001aca <.LVL304>:
				Length--;
    1aca:	01 97       	sbiw	r24, 0x01	; 1

00001acc <.Loc.1004>:
				BytesInEndpoint++;
    1acc:	2f 5f       	subi	r18, 0xFF	; 255
    1ace:	3f 4f       	sbci	r19, 0xFF	; 255

00001ad0 <.Loc.1006>:
    1ad0:	e8 cf       	rjmp	.-48     	; 0x1aa2 <.L243>

00001ad2 <.L248>:
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1ad2:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <USB_DeviceState>

00001ad6 <.LVL308>:
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1ad6:	88 23       	and	r24, r24
    1ad8:	41 f0       	breq	.+16     	; 0x1aea <.L253>

00001ada <.Loc.1012>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1ada:	85 30       	cpi	r24, 0x05	; 5
    1adc:	41 f0       	breq	.+16     	; 0x1aee <.L254>

00001ade <.LBB442>:
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1ade:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00001ae2 <.LBE442>:
		else if (Endpoint_IsSETUPReceived())
    1ae2:	83 ff       	sbrs	r24, 3
    1ae4:	c0 cf       	rjmp	.-128    	; 0x1a66 <.L261>

00001ae6 <.L255>:
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1ae6:	81 e0       	ldi	r24, 0x01	; 1

00001ae8 <.LBE444>:
}
    1ae8:	08 95       	ret

00001aea <.L253>:
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1aea:	82 e0       	ldi	r24, 0x02	; 2
    1aec:	08 95       	ret

00001aee <.L254>:
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1aee:	83 e0       	ldi	r24, 0x03	; 3
    1af0:	08 95       	ret

00001af2 <Endpoint_Write_Control_EStream_LE>:
{
    1af2:	ef 92       	push	r14

00001af4 <.LCFI104>:
    1af4:	ff 92       	push	r15

00001af6 <.LCFI105>:
    1af6:	0f 93       	push	r16

00001af8 <.LCFI106>:
    1af8:	1f 93       	push	r17

00001afa <.LCFI107>:
    1afa:	cf 93       	push	r28

00001afc <.LCFI108>:
    1afc:	df 93       	push	r29

00001afe <.LCFI109>:
    1afe:	7c 01       	movw	r14, r24
    1b00:	eb 01       	movw	r28, r22

00001b02 <.LVL334>:
	if (Length > USB_ControlRequest.wLength)
    1b02:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <USB_ControlRequest+0x6>
    1b06:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <USB_ControlRequest+0x7>

00001b0a <.LVL335>:
    1b0a:	86 17       	cp	r24, r22
    1b0c:	97 07       	cpc	r25, r23
    1b0e:	c0 f0       	brcs	.+48     	; 0x1b40 <.L305>

00001b10 <.Loc.1132>:
	else if (!(Length))
    1b10:	20 97       	sbiw	r28, 0x00	; 0
    1b12:	29 f4       	brne	.+10     	; 0x1b1e <.L294>

00001b14 <.LBB470>:
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b14:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b18:	8e 77       	andi	r24, 0x7E	; 126
    1b1a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00001b1e <.L294>:
    1b1e:	80 e0       	ldi	r24, 0x00	; 0

00001b20 <.L298>:
	while (Length || LastPacketFull)
    1b20:	20 97       	sbiw	r28, 0x00	; 0
    1b22:	81 f4       	brne	.+32     	; 0x1b44 <.L303>

00001b24 <.Loc.1140>:
    1b24:	81 11       	cpse	r24, r1
    1b26:	0e c0       	rjmp	.+28     	; 0x1b44 <.L303>

00001b28 <.L317>:
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b28:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00001b2c <.LBE472>:
	while (!(Endpoint_IsOUTReceived()))
    1b2c:	82 ff       	sbrs	r24, 2
    1b2e:	3c c0       	rjmp	.+120    	; 0x1ba8 <.L304>

00001b30 <.Loc.1146>:
	return ENDPOINT_RWCSTREAM_NoError;
    1b30:	80 e0       	ldi	r24, 0x00	; 0

00001b32 <.L293>:
}
    1b32:	df 91       	pop	r29
    1b34:	cf 91       	pop	r28

00001b36 <.LVL338>:
    1b36:	1f 91       	pop	r17
    1b38:	0f 91       	pop	r16
    1b3a:	ff 90       	pop	r15
    1b3c:	ef 90       	pop	r14

00001b3e <.LVL339>:
    1b3e:	08 95       	ret

00001b40 <.L305>:
    1b40:	ec 01       	movw	r28, r24
    1b42:	ed cf       	rjmp	.-38     	; 0x1b1e <.L294>

00001b44 <.L303>:
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1b44:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <USB_DeviceState>

00001b48 <.LVL342>:
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1b48:	99 23       	and	r25, r25
    1b4a:	d1 f1       	breq	.+116    	; 0x1bc0 <.L309>

00001b4c <.Loc.1155>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1b4c:	95 30       	cpi	r25, 0x05	; 5
    1b4e:	d1 f1       	breq	.+116    	; 0x1bc4 <.L310>

00001b50 <.LBB475>:
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1b50:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00001b54 <.LBE475>:
		else if (Endpoint_IsSETUPReceived())
    1b54:	93 fd       	sbrc	r25, 3
    1b56:	32 c0       	rjmp	.+100    	; 0x1bbc <.L311>

00001b58 <.LBB477>:
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b58:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00001b5c <.LBE477>:
		else if (Endpoint_IsOUTReceived())
    1b5c:	92 fd       	sbrc	r25, 2
    1b5e:	e4 cf       	rjmp	.-56     	; 0x1b28 <.L317>

00001b60 <.LBB479>:
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b60:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00001b64 <.LBE479>:
		if (Endpoint_IsINReady())
    1b64:	90 ff       	sbrs	r25, 0
    1b66:	dc cf       	rjmp	.-72     	; 0x1b20 <.L298>

00001b68 <.LBB481>:
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1b68:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

00001b6c <.LVL344>:
    1b6c:	00 91 f2 00 	lds	r16, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>

00001b70 <.Loc.1178>:
    1b70:	18 2f       	mov	r17, r24

00001b72 <.L299>:
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1b72:	20 97       	sbiw	r28, 0x00	; 0
    1b74:	19 f0       	breq	.+6      	; 0x1b7c <.L300>

00001b76 <.Loc.1182>:
    1b76:	08 30       	cpi	r16, 0x08	; 8
    1b78:	11 05       	cpc	r17, r1
    1b7a:	58 f0       	brcs	.+22     	; 0x1b92 <.L301>

00001b7c <.L300>:
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	08 30       	cpi	r16, 0x08	; 8
    1b80:	11 05       	cpc	r17, r1
    1b82:	09 f0       	breq	.+2      	; 0x1b86 <.L302>
    1b84:	80 e0       	ldi	r24, 0x00	; 0

00001b86 <.L302>:
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b86:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b8a:	9e 77       	andi	r25, 0x7E	; 126
    1b8c:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00001b90 <.LVL347>:
			}
    1b90:	c7 cf       	rjmp	.-114    	; 0x1b20 <.L298>

00001b92 <.L301>:
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1b92:	c7 01       	movw	r24, r14
    1b94:	7f d3       	rcall	.+1790   	; 0x2294 <eeprom_read_byte>

00001b96 <.LBB486>:
				UEDATX = Data;
    1b96:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

00001b9a <.LBE486>:
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1b9a:	8f ef       	ldi	r24, 0xFF	; 255
    1b9c:	e8 1a       	sub	r14, r24
    1b9e:	f8 0a       	sbc	r15, r24

00001ba0 <.Loc.1197>:
				Length--;
    1ba0:	21 97       	sbiw	r28, 0x01	; 1

00001ba2 <.Loc.1199>:
				BytesInEndpoint++;
    1ba2:	0f 5f       	subi	r16, 0xFF	; 255
    1ba4:	1f 4f       	sbci	r17, 0xFF	; 255

00001ba6 <.Loc.1201>:
    1ba6:	e5 cf       	rjmp	.-54     	; 0x1b72 <.L299>

00001ba8 <.L304>:
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1ba8:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <USB_DeviceState>

00001bac <.LVL355>:
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1bac:	88 23       	and	r24, r24
    1bae:	41 f0       	breq	.+16     	; 0x1bc0 <.L309>

00001bb0 <.Loc.1207>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1bb0:	85 30       	cpi	r24, 0x05	; 5
    1bb2:	41 f0       	breq	.+16     	; 0x1bc4 <.L310>

00001bb4 <.LBB489>:
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1bb4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00001bb8 <.LBE489>:
		else if (Endpoint_IsSETUPReceived())
    1bb8:	83 ff       	sbrs	r24, 3
    1bba:	b6 cf       	rjmp	.-148    	; 0x1b28 <.L317>

00001bbc <.L311>:
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	b9 cf       	rjmp	.-142    	; 0x1b32 <.L293>

00001bc0 <.L309>:
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1bc0:	82 e0       	ldi	r24, 0x02	; 2
    1bc2:	b7 cf       	rjmp	.-146    	; 0x1b32 <.L293>

00001bc4 <.L310>:
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1bc4:	83 e0       	ldi	r24, 0x03	; 3
    1bc6:	b5 cf       	rjmp	.-150    	; 0x1b32 <.L293>

00001bc8 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1bc8:	98 2f       	mov	r25, r24

00001bca <.L2>:
    1bca:	97 30       	cpi	r25, 0x07	; 7
    1bcc:	28 f0       	brcs	.+10     	; 0x1bd8 <.L7>

00001bce <.LBB58>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1bce:	8f 70       	andi	r24, 0x0F	; 15

00001bd0 <.LVL3>:
    1bd0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

00001bd4 <.LBE58>:
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	08 95       	ret

00001bd8 <.L7>:
    1bd8:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

00001bdc <.LBE49>:
			UECFG1XTemp = UECFG1XData;
    1bdc:	24 2f       	mov	r18, r20

00001bde <.Loc.25>:
			UECFG0XTemp = UECFG0XData;
    1bde:	76 2f       	mov	r23, r22

00001be0 <.Loc.26>:
			UEIENXTemp  = 0;
    1be0:	50 e0       	ldi	r21, 0x00	; 0

00001be2 <.Loc.27>:
		if (EPNum == Number)
    1be2:	98 17       	cp	r25, r24
    1be4:	31 f0       	breq	.+12     	; 0x1bf2 <.L3>

00001be6 <.LVL7>:
			UECFG0XTemp = UECFG0X;
    1be6:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>

00001bea <.LVL8>:
			UECFG1XTemp = UECFG1X;
    1bea:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

00001bee <.LVL9>:
			UEIENXTemp  = UEIENX;
    1bee:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>

00001bf2 <.L3>:
		if (!(UECFG1XTemp & (1 << ALLOC)))
    1bf2:	21 fd       	sbrc	r18, 1
    1bf4:	02 c0       	rjmp	.+4      	; 0x1bfa <.L4>

00001bf6 <.L6>:
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1bf6:	9f 5f       	subi	r25, 0xFF	; 255

00001bf8 <.Loc.39>:
    1bf8:	e8 cf       	rjmp	.-48     	; 0x1bca <.L2>

00001bfa <.L4>:
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    1bfa:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1bfe:	3e 7f       	andi	r19, 0xFE	; 254
    1c00:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

00001c04 <.LBE51>:
		UECFG1X &= ~(1 << ALLOC);
    1c04:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1c08:	3d 7f       	andi	r19, 0xFD	; 253
    1c0a:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

00001c0e <.LBB53>:
				UECONX |= (1 << EPEN);
    1c0e:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1c12:	31 60       	ori	r19, 0x01	; 1
    1c14:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

00001c18 <.LBE53>:
		UECFG0X = UECFG0XTemp;
    1c18:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>

00001c1c <.Loc.52>:
		UECFG1X = UECFG1XTemp;
    1c1c:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

00001c20 <.Loc.54>:
		UEIENX  = UEIENXTemp;
    1c20:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>

00001c24 <.LBB55>:
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1c24:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>

00001c28 <.LBE55>:
		if (!(Endpoint_IsConfigured()))
    1c28:	27 fd       	sbrc	r18, 7
    1c2a:	e5 cf       	rjmp	.-54     	; 0x1bf6 <.L6>

00001c2c <.Loc.62>:
		  return false;
    1c2c:	80 e0       	ldi	r24, 0x00	; 0

00001c2e <.LBE57>:
#endif
}
    1c2e:	08 95       	ret

00001c30 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1c30:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <USB_ControlRequest>
    1c34:	87 ff       	sbrs	r24, 7
    1c36:	13 c0       	rjmp	.+38     	; 0x1c5e <.L27>

00001c38 <.L26>:
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1c38:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00001c3c <.LBE81>:
	{
		while (!(Endpoint_IsOUTReceived()))
    1c3c:	82 ff       	sbrs	r24, 2
    1c3e:	06 c0       	rjmp	.+12     	; 0x1c4c <.L29>

00001c40 <.LBB83>:
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1c40:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c44:	8b 77       	andi	r24, 0x7B	; 123

00001c46 <.L38>:
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c46:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00001c4a <.Loc.156>:
			}
    1c4a:	04 c0       	rjmp	.+8      	; 0x1c54 <.L25>

00001c4c <.L29>:
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1c4c:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <USB_DeviceState>

00001c50 <.Loc.159>:
    1c50:	81 11       	cpse	r24, r1
    1c52:	f2 cf       	rjmp	.-28     	; 0x1c38 <.L26>

00001c54 <.L25>:
			  return;
		}

		Endpoint_ClearIN();
	}
}
    1c54:	08 95       	ret

00001c56 <.L30>:
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1c56:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <USB_DeviceState>

00001c5a <.Loc.163>:
    1c5a:	88 23       	and	r24, r24
    1c5c:	d9 f3       	breq	.-10     	; 0x1c54 <.L25>

00001c5e <.L27>:
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1c5e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00001c62 <.LBE88>:
		while (!(Endpoint_IsINReady()))
    1c62:	80 ff       	sbrs	r24, 0
    1c64:	f8 cf       	rjmp	.-16     	; 0x1c56 <.L30>

00001c66 <.LBB90>:
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c66:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c6a:	8e 77       	andi	r24, 0x7E	; 126
    1c6c:	ec cf       	rjmp	.-40     	; 0x1c46 <.L38>

00001c6e <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1c6e:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1c72:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

00001c76 <.LVL39>:
    1c76:	95 e6       	ldi	r25, 0x65	; 101

00001c78 <.L44>:
    1c78:	a9 01       	movw	r20, r18

00001c7a <.L43>:
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1c7a:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>

00001c7e <.Loc.187>:
    1c7e:	82 2f       	mov	r24, r18
    1c80:	81 70       	andi	r24, 0x01	; 1
    1c82:	20 ff       	sbrs	r18, 0
    1c84:	06 c0       	rjmp	.+12     	; 0x1c92 <.L40>

00001c86 <.LBB96>:
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1c86:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00001c8a <.LBE96>:

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1c8a:	80 ff       	sbrs	r24, 0
    1c8c:	06 c0       	rjmp	.+12     	; 0x1c9a <.L42>

00001c8e <.Loc.193>:
			  return ENDPOINT_READYWAIT_NoError;
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	08 95       	ret

00001c92 <.L40>:
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1c92:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00001c96 <.LBE98>:
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1c96:	22 fd       	sbrc	r18, 2
    1c98:	1a c0       	rjmp	.+52     	; 0x1cce <.L39>

00001c9a <.L42>:
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1c9a:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <USB_DeviceState>

00001c9e <.LVL42>:

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1c9e:	88 23       	and	r24, r24
    1ca0:	89 f0       	breq	.+34     	; 0x1cc4 <.L46>

00001ca2 <.Loc.203>:
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1ca2:	85 30       	cpi	r24, 0x05	; 5
    1ca4:	89 f0       	breq	.+34     	; 0x1cc8 <.L47>

00001ca6 <.LBB100>:
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1ca6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

00001caa <.LBE100>:
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1caa:	85 fd       	sbrc	r24, 5
    1cac:	0f c0       	rjmp	.+30     	; 0x1ccc <.L48>

00001cae <.LBB102>:
    1cae:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1cb2:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

00001cb6 <.LBE102>:
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1cb6:	42 17       	cp	r20, r18
    1cb8:	53 07       	cpc	r21, r19
    1cba:	f9 f2       	breq	.-66     	; 0x1c7a <.L43>

00001cbc <.LVL45>:
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1cbc:	91 50       	subi	r25, 0x01	; 1

00001cbe <.LVL46>:
    1cbe:	e1 f6       	brne	.-72     	; 0x1c78 <.L44>

00001cc0 <.Loc.222>:
			  return ENDPOINT_READYWAIT_Timeout;
    1cc0:	84 e0       	ldi	r24, 0x04	; 4
    1cc2:	08 95       	ret

00001cc4 <.L46>:
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1cc4:	82 e0       	ldi	r24, 0x02	; 2

00001cc6 <.LVL48>:
    1cc6:	08 95       	ret

00001cc8 <.L47>:
		  return ENDPOINT_READYWAIT_BusSuspended;
    1cc8:	83 e0       	ldi	r24, 0x03	; 3

00001cca <.LVL50>:
    1cca:	08 95       	ret

00001ccc <.L48>:
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1ccc:	81 e0       	ldi	r24, 0x01	; 1

00001cce <.L39>:
		}
	}
}
    1cce:	08 95       	ret

00001cd0 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1cd0:	67 d0       	rcall	.+206    	; 0x1da0 <USB_INT_DisableAllInterrupts>

00001cd2 <.LVL0>:
	USB_INT_ClearAllInterrupts();
    1cd2:	6e d0       	rcall	.+220    	; 0x1db0 <USB_INT_ClearAllInterrupts>

00001cd4 <.LBB42>:
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1cd4:	e0 ee       	ldi	r30, 0xE0	; 224
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	81 60       	ori	r24, 0x01	; 1
    1cdc:	80 83       	st	Z, r24

00001cde <.LBB44>:
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1cde:	e8 ed       	ldi	r30, 0xD8	; 216
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	80 81       	ld	r24, Z
    1ce4:	8f 77       	andi	r24, 0x7F	; 127
    1ce6:	80 83       	st	Z, r24

00001ce8 <.LBB46>:
				PLLCSR = 0;
    1ce8:	19 bc       	out	0x29, r1	; 41

00001cea <.LBB48>:
				UHWCON &= ~(1 << UVREGE);
    1cea:	a7 ed       	ldi	r26, 0xD7	; 215
    1cec:	b0 e0       	ldi	r27, 0x00	; 0
    1cee:	8c 91       	ld	r24, X
    1cf0:	8e 7f       	andi	r24, 0xFE	; 254
    1cf2:	8c 93       	st	X, r24

00001cf4 <.LBB50>:
				USBCON &= ~(1 << OTGPADE);
    1cf4:	80 81       	ld	r24, Z
    1cf6:	8f 7e       	andi	r24, 0xEF	; 239
    1cf8:	80 83       	st	Z, r24

00001cfa <.LBE50>:

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1cfa:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <USB_IsInitialized>

00001cfe <.Loc.27>:
}
    1cfe:	08 95       	ret

00001d00 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    1d00:	0f 93       	push	r16

00001d02 <.LCFI0>:
    1d02:	1f 93       	push	r17

00001d04 <.LCFI1>:
    1d04:	cf 93       	push	r28

00001d06 <.LCFI2>:
    1d06:	df 93       	push	r29

00001d08 <.LCFI3>:
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1d08:	4b d0       	rcall	.+150    	; 0x1da0 <USB_INT_DisableAllInterrupts>

00001d0a <.LVL2>:
	USB_INT_ClearAllInterrupts();
    1d0a:	52 d0       	rcall	.+164    	; 0x1db0 <USB_INT_ClearAllInterrupts>

00001d0c <.LBB76>:
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1d0c:	c8 ed       	ldi	r28, 0xD8	; 216
    1d0e:	d0 e0       	ldi	r29, 0x00	; 0
    1d10:	88 81       	ld	r24, Y
    1d12:	8f 77       	andi	r24, 0x7F	; 127
    1d14:	88 83       	st	Y, r24

00001d16 <.Loc.35>:
				USBCON |=  (1 << USBE);
    1d16:	88 81       	ld	r24, Y
    1d18:	80 68       	ori	r24, 0x80	; 128
    1d1a:	88 83       	st	Y, r24

00001d1c <.LBB78>:
				USBCON &= ~(1 << FRZCLK);
    1d1c:	88 81       	ld	r24, Y
    1d1e:	8f 7d       	andi	r24, 0xDF	; 223
    1d20:	88 83       	st	Y, r24

00001d22 <.LBB80>:
				PLLCSR = 0;
    1d22:	19 bc       	out	0x29, r1	; 41

00001d24 <.LBB82>:
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1d24:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <USB_DeviceState>

00001d28 <.Loc.51>:
	USB_Device_ConfigurationNumber  = 0;
    1d28:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <USB_Device_ConfigurationNumber>

00001d2c <.Loc.53>:

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1d2c:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <USB_Device_RemoteWakeupEnabled>

00001d30 <.Loc.55>:
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1d30:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <USB_Device_CurrentlySelfPowered>

00001d34 <.LBB84>:
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1d34:	00 ee       	ldi	r16, 0xE0	; 224
    1d36:	10 e0       	ldi	r17, 0x00	; 0
    1d38:	f8 01       	movw	r30, r16
    1d3a:	80 81       	ld	r24, Z
    1d3c:	8b 7f       	andi	r24, 0xFB	; 251
    1d3e:	80 83       	st	Z, r24

00001d40 <.LBB86>:
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1d40:	88 81       	ld	r24, Y
    1d42:	81 60       	ori	r24, 0x01	; 1
    1d44:	88 83       	st	Y, r24

00001d46 <.LBB101>:
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1d46:	42 e0       	ldi	r20, 0x02	; 2
    1d48:	60 e0       	ldi	r22, 0x00	; 0
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	3d df       	rcall	.-390    	; 0x1bc8 <Endpoint_ConfigureEndpoint_Prv>

00001d4e <.LBB92>:
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1d4e:	e1 ee       	ldi	r30, 0xE1	; 225
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	80 81       	ld	r24, Z
    1d54:	8e 7f       	andi	r24, 0xFE	; 254
    1d56:	80 83       	st	Z, r24

00001d58 <.LBB94>:
						UDIEN  |= (1 << SUSPE);
    1d58:	e2 ee       	ldi	r30, 0xE2	; 226
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	81 60       	ori	r24, 0x01	; 1
    1d60:	80 83       	st	Z, r24

00001d62 <.LBB96>:
						UDIEN  |= (1 << EORSTE);
    1d62:	80 81       	ld	r24, Z
    1d64:	88 60       	ori	r24, 0x08	; 8
    1d66:	80 83       	st	Z, r24

00001d68 <.LBB98>:
				UDCON  &= ~(1 << DETACH);
    1d68:	f8 01       	movw	r30, r16
    1d6a:	80 81       	ld	r24, Z
    1d6c:	8e 7f       	andi	r24, 0xFE	; 254
    1d6e:	80 83       	st	Z, r24

00001d70 <.LBB102>:
				USBCON |=  (1 << OTGPADE);
    1d70:	88 81       	ld	r24, Y
    1d72:	80 61       	ori	r24, 0x10	; 16
    1d74:	88 83       	st	Y, r24

00001d76 <.LBE102>:
}
    1d76:	df 91       	pop	r29
    1d78:	cf 91       	pop	r28
    1d7a:	1f 91       	pop	r17
    1d7c:	0f 91       	pop	r16
    1d7e:	08 95       	ret

00001d80 <USB_Init>:
				USBCON &= ~(1 << OTGPADE);
    1d80:	e8 ed       	ldi	r30, 0xD8	; 216
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	8f 7e       	andi	r24, 0xEF	; 239
    1d88:	80 83       	st	Z, r24

00001d8a <.LBB106>:
				UHWCON |=  (1 << UVREGE);
    1d8a:	e7 ed       	ldi	r30, 0xD7	; 215
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	81 60       	ori	r24, 0x01	; 1
    1d92:	80 83       	st	Z, r24

00001d94 <.LBE106>:
		PLLFRQ = (1 << PDIV2);
    1d94:	84 e0       	ldi	r24, 0x04	; 4
    1d96:	82 bf       	out	0x32, r24	; 50

00001d98 <.Loc.126>:
	USB_IsInitialized = true;
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <USB_IsInitialized>

00001d9e <.Loc.128>:
	USB_ResetInterface();
    1d9e:	b0 cf       	rjmp	.-160    	; 0x1d00 <USB_ResetInterface>

00001da0 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1da0:	e8 ed       	ldi	r30, 0xD8	; 216
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	8e 7f       	andi	r24, 0xFE	; 254
    1da8:	80 83       	st	Z, r24

00001daa <.Loc.3>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1daa:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>

00001dae <.Loc.5>:
	#endif
}
    1dae:	08 95       	ret

00001db0 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1db0:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>

00001db4 <.Loc.10>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1db4:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>

00001db8 <.Loc.11>:
	#endif
}
    1db8:	08 95       	ret

00001dba <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1dba:	1f 92       	push	r1

00001dbc <.LCFI0>:
    1dbc:	0f 92       	push	r0

00001dbe <.LCFI1>:
    1dbe:	0f b6       	in	r0, 0x3f	; 63
    1dc0:	0f 92       	push	r0
    1dc2:	11 24       	eor	r1, r1
    1dc4:	2f 93       	push	r18

00001dc6 <.LCFI2>:
    1dc6:	3f 93       	push	r19

00001dc8 <.LCFI3>:
    1dc8:	4f 93       	push	r20

00001dca <.LCFI4>:
    1dca:	5f 93       	push	r21

00001dcc <.LCFI5>:
    1dcc:	6f 93       	push	r22

00001dce <.LCFI6>:
    1dce:	7f 93       	push	r23

00001dd0 <.LCFI7>:
    1dd0:	8f 93       	push	r24

00001dd2 <.LCFI8>:
    1dd2:	9f 93       	push	r25

00001dd4 <.LCFI9>:
    1dd4:	af 93       	push	r26

00001dd6 <.LCFI10>:
    1dd6:	bf 93       	push	r27

00001dd8 <.LCFI11>:
    1dd8:	ef 93       	push	r30

00001dda <.LCFI12>:
    1dda:	ff 93       	push	r31

00001ddc <.LBB90>:
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1ddc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>

00001de0 <.LBE90>:
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1de0:	82 ff       	sbrs	r24, 2
    1de2:	0a c0       	rjmp	.+20     	; 0x1df8 <.L4>

00001de4 <.LBB92>:
						return (UDIEN  & (1 << SOFE));
    1de4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>

00001de8 <.LBE92>:
    1de8:	82 ff       	sbrs	r24, 2
    1dea:	06 c0       	rjmp	.+12     	; 0x1df8 <.L4>

00001dec <.LBB94>:
						UDINT  &= ~(1 << SOFI);
    1dec:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1df0:	8b 7f       	andi	r24, 0xFB	; 251
    1df2:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>

00001df6 <.LBE94>:
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1df6:	1e d2       	rcall	.+1084   	; 0x2234 <USB_Event_Stub>

00001df8 <.L4>:
						return (USBINT & (1 << VBUSTI));
    1df8:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>

00001dfc <.LBE96>:
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1dfc:	80 ff       	sbrs	r24, 0
    1dfe:	19 c0       	rjmp	.+50     	; 0x1e32 <.L5>

00001e00 <.LBB98>:
						return (USBCON & (1 << VBUSTE));
    1e00:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

00001e04 <.LBE98>:
    1e04:	80 ff       	sbrs	r24, 0
    1e06:	15 c0       	rjmp	.+42     	; 0x1e32 <.L5>

00001e08 <.LBB100>:
						USBINT &= ~(1 << VBUSTI);
    1e08:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    1e0c:	8e 7f       	andi	r24, 0xFE	; 254
    1e0e:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>

00001e12 <.LBB102>:
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1e12:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>

00001e16 <.LBE102>:
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1e16:	80 ff       	sbrs	r24, 0
    1e18:	90 c0       	rjmp	.+288    	; 0x1f3a <.L6>

00001e1a <.LBB104>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1e1a:	80 e1       	ldi	r24, 0x10	; 16
    1e1c:	89 bd       	out	0x29, r24	; 41

00001e1e <.Loc.64>:
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1e1e:	82 e1       	ldi	r24, 0x12	; 18
    1e20:	89 bd       	out	0x29, r24	; 41

00001e22 <.L7>:
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1e22:	09 b4       	in	r0, 0x29	; 41
    1e24:	00 fe       	sbrs	r0, 0
    1e26:	fd cf       	rjmp	.-6      	; 0x1e22 <.L7>

00001e28 <.Loc.71>:
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <USB_DeviceState>

00001e2e <.Loc.73>:
			EVENT_USB_Device_Connect();
    1e2e:	0e 94 e5 03 	call	0x7ca	; 0x7ca <EVENT_USB_Device_Connect>

00001e32 <.L5>:
						return (UDINT  & (1 << SUSPI));
    1e32:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>

00001e36 <.LBE108>:
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1e36:	80 ff       	sbrs	r24, 0
    1e38:	18 c0       	rjmp	.+48     	; 0x1e6a <.L8>

00001e3a <.LBB110>:
						return (UDIEN  & (1 << SUSPE));
    1e3a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>

00001e3e <.LBE110>:
    1e3e:	80 ff       	sbrs	r24, 0
    1e40:	14 c0       	rjmp	.+40     	; 0x1e6a <.L8>

00001e42 <.LBB112>:
						UDIEN  &= ~(1 << SUSPE);
    1e42:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1e46:	8e 7f       	andi	r24, 0xFE	; 254
    1e48:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>

00001e4c <.LBB114>:
						UDIEN  |= (1 << WAKEUPE);
    1e4c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1e50:	80 61       	ori	r24, 0x10	; 16
    1e52:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>

00001e56 <.LBB116>:
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1e56:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1e5a:	80 62       	ori	r24, 0x20	; 32
    1e5c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

00001e60 <.LBB118>:
				PLLCSR = 0;
    1e60:	19 bc       	out	0x29, r1	; 41

00001e62 <.LBE118>:

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1e62:	85 e0       	ldi	r24, 0x05	; 5
    1e64:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <USB_DeviceState>

00001e68 <.Loc.112>:
		EVENT_USB_Device_Suspend();
    1e68:	e5 d1       	rcall	.+970    	; 0x2234 <USB_Event_Stub>

00001e6a <.L8>:
						return (UDINT  & (1 << WAKEUPI));
    1e6a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>

00001e6e <.LBE120>:
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1e6e:	84 ff       	sbrs	r24, 4
    1e70:	28 c0       	rjmp	.+80     	; 0x1ec2 <.L9>

00001e72 <.LBB122>:
						return (UDIEN  & (1 << WAKEUPE));
    1e72:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>

00001e76 <.LBE122>:
    1e76:	84 ff       	sbrs	r24, 4
    1e78:	24 c0       	rjmp	.+72     	; 0x1ec2 <.L9>

00001e7a <.LBB124>:
				PLLCSR = USB_PLL_PSC;
    1e7a:	80 e1       	ldi	r24, 0x10	; 16
    1e7c:	89 bd       	out	0x29, r24	; 41

00001e7e <.Loc.131>:
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1e7e:	82 e1       	ldi	r24, 0x12	; 18
    1e80:	89 bd       	out	0x29, r24	; 41

00001e82 <.L10>:
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1e82:	09 b4       	in	r0, 0x29	; 41
    1e84:	00 fe       	sbrs	r0, 0
    1e86:	fd cf       	rjmp	.-6      	; 0x1e82 <.L10>

00001e88 <.LBB128>:
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1e88:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1e8c:	8f 7d       	andi	r24, 0xDF	; 223
    1e8e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

00001e92 <.LBB130>:
						UDINT  &= ~(1 << WAKEUPI);
    1e92:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1e96:	8f 7e       	andi	r24, 0xEF	; 239
    1e98:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>

00001e9c <.LBB132>:
						UDIEN  &= ~(1 << WAKEUPE);
    1e9c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1ea0:	8f 7e       	andi	r24, 0xEF	; 239
    1ea2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>

00001ea6 <.LBB134>:
						UDIEN  |= (1 << SUSPE);
    1ea6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1eaa:	81 60       	ori	r24, 0x01	; 1
    1eac:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>

00001eb0 <.LBE134>:
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1eb0:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <USB_Device_ConfigurationNumber>
    1eb4:	88 23       	and	r24, r24
    1eb6:	09 f4       	brne	.+2      	; 0x1eba <.Loc.165>

00001eb8 <L0^A>:
    1eb8:	46 c0       	rjmp	.+140    	; 0x1f46 <.L11>

00001eba <.Loc.165>:
		  USB_DeviceState = DEVICE_STATE_Configured;
    1eba:	84 e0       	ldi	r24, 0x04	; 4

00001ebc <.L13>:
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1ebc:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <USB_DeviceState>

00001ec0 <.Loc.168>:

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1ec0:	b9 d1       	rcall	.+882    	; 0x2234 <USB_Event_Stub>

00001ec2 <.L9>:
						return (UDINT  & (1 << EORSTI));
    1ec2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>

00001ec6 <.LBE136>:
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1ec6:	83 ff       	sbrs	r24, 3
    1ec8:	27 c0       	rjmp	.+78     	; 0x1f18 <.L3>

00001eca <.LBB138>:
						return (UDIEN  & (1 << EORSTE));
    1eca:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>

00001ece <.LBE138>:
    1ece:	83 ff       	sbrs	r24, 3
    1ed0:	23 c0       	rjmp	.+70     	; 0x1f18 <.L3>

00001ed2 <.LBB140>:
						UDINT  &= ~(1 << EORSTI);
    1ed2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1ed6:	87 7f       	andi	r24, 0xF7	; 247
    1ed8:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>

00001edc <.LBE140>:
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1edc:	82 e0       	ldi	r24, 0x02	; 2
    1ede:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <USB_DeviceState>

00001ee2 <.Loc.191>:
		USB_Device_ConfigurationNumber = 0;
    1ee2:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <USB_Device_ConfigurationNumber>

00001ee6 <.LBB142>:
						UDINT  &= ~(1 << SUSPI);
    1ee6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1eea:	8e 7f       	andi	r24, 0xFE	; 254
    1eec:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>

00001ef0 <.LBB144>:
						UDIEN  &= ~(1 << SUSPE);
    1ef0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1ef4:	8e 7f       	andi	r24, 0xFE	; 254
    1ef6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>

00001efa <.LBB146>:
						UDIEN  |= (1 << WAKEUPE);
    1efa:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1efe:	80 61       	ori	r24, 0x10	; 16
    1f00:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>

00001f04 <.LBB148>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1f04:	42 e0       	ldi	r20, 0x02	; 2
    1f06:	60 e0       	ldi	r22, 0x00	; 0
    1f08:	80 e0       	ldi	r24, 0x00	; 0
    1f0a:	5e de       	rcall	.-836    	; 0x1bc8 <Endpoint_ConfigureEndpoint_Prv>

00001f0c <.LBB152>:
						UEIENX |= (1 << RXSTPE);
    1f0c:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1f10:	88 60       	ori	r24, 0x08	; 8
    1f12:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>

00001f16 <.LBE152>:

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1f16:	8e d1       	rcall	.+796    	; 0x2234 <USB_Event_Stub>

00001f18 <.L3>:
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1f18:	ff 91       	pop	r31
    1f1a:	ef 91       	pop	r30
    1f1c:	bf 91       	pop	r27
    1f1e:	af 91       	pop	r26
    1f20:	9f 91       	pop	r25
    1f22:	8f 91       	pop	r24
    1f24:	7f 91       	pop	r23
    1f26:	6f 91       	pop	r22
    1f28:	5f 91       	pop	r21
    1f2a:	4f 91       	pop	r20
    1f2c:	3f 91       	pop	r19
    1f2e:	2f 91       	pop	r18
    1f30:	0f 90       	pop	r0
    1f32:	0f be       	out	0x3f, r0	; 63
    1f34:	0f 90       	pop	r0
    1f36:	1f 90       	pop	r1
    1f38:	18 95       	reti

00001f3a <.L6>:
				PLLCSR = 0;
    1f3a:	19 bc       	out	0x29, r1	; 41

00001f3c <.LBE154>:
			USB_DeviceState = DEVICE_STATE_Unattached;
    1f3c:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <USB_DeviceState>

00001f40 <.Loc.243>:
			EVENT_USB_Device_Disconnect();
    1f40:	0e 94 e6 03 	call	0x7cc	; 0x7cc <EVENT_USB_Device_Disconnect>

00001f44 <.LVL40>:
    1f44:	76 cf       	rjmp	.-276    	; 0x1e32 <.L5>

00001f46 <.L11>:
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1f46:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

00001f4a <.LBE156>:
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1f4a:	87 fd       	sbrc	r24, 7
    1f4c:	02 c0       	rjmp	.+4      	; 0x1f52 <.L15>
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	b5 cf       	rjmp	.-150    	; 0x1ebc <.L13>

00001f52 <.L15>:
    1f52:	83 e0       	ldi	r24, 0x03	; 3
    1f54:	b3 cf       	rjmp	.-154    	; 0x1ebc <.L13>

00001f56 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1f56:	1f 92       	push	r1

00001f58 <.LCFI14>:
    1f58:	0f 92       	push	r0

00001f5a <.LCFI15>:
    1f5a:	0f b6       	in	r0, 0x3f	; 63
    1f5c:	0f 92       	push	r0
    1f5e:	11 24       	eor	r1, r1
    1f60:	2f 93       	push	r18

00001f62 <.LCFI16>:
    1f62:	3f 93       	push	r19

00001f64 <.LCFI17>:
    1f64:	4f 93       	push	r20

00001f66 <.LCFI18>:
    1f66:	5f 93       	push	r21

00001f68 <.LCFI19>:
    1f68:	6f 93       	push	r22

00001f6a <.LCFI20>:
    1f6a:	7f 93       	push	r23

00001f6c <.LCFI21>:
    1f6c:	8f 93       	push	r24

00001f6e <.LCFI22>:
    1f6e:	9f 93       	push	r25

00001f70 <.LCFI23>:
    1f70:	af 93       	push	r26

00001f72 <.LCFI24>:
    1f72:	bf 93       	push	r27

00001f74 <.LCFI25>:
    1f74:	cf 93       	push	r28

00001f76 <.LCFI26>:
    1f76:	df 93       	push	r29

00001f78 <.LCFI27>:
    1f78:	ef 93       	push	r30

00001f7a <.LCFI28>:
    1f7a:	ff 93       	push	r31

00001f7c <.LBB158>:
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1f7c:	d0 91 e9 00 	lds	r29, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

00001f80 <.Loc.254>:
    1f80:	df 70       	andi	r29, 0x0F	; 15

00001f82 <.LBB160>:
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1f82:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>

00001f86 <.Loc.258>:
    1f86:	c8 2f       	mov	r28, r24
    1f88:	c1 70       	andi	r28, 0x01	; 1
    1f8a:	80 fd       	sbrc	r24, 0
    1f8c:	c0 e8       	ldi	r28, 0x80	; 128

00001f8e <.LBB163>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f8e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

00001f92 <.LBB165>:
						UEIENX &= ~(1 << RXSTPE);
    1f92:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1f96:	87 7f       	andi	r24, 0xF7	; 247
    1f98:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>

00001f9c <.LBB167>:
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1f9c:	78 94       	sei

00001f9e <.LBE167>:
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1f9e:	1e d0       	rcall	.+60     	; 0x1fdc <USB_Device_ProcessControlRequest>

00001fa0 <.LBB169>:
    1fa0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

00001fa4 <.LBB171>:
						UEIENX |= (1 << RXSTPE);
    1fa4:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1fa8:	88 60       	ori	r24, 0x08	; 8
    1faa:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>

00001fae <.LBB173>:
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1fae:	cd 2b       	or	r28, r29

00001fb0 <.LBB177>:
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1fb0:	cf 70       	andi	r28, 0x0F	; 15

00001fb2 <.LVL48>:
    1fb2:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

00001fb6 <.LBE177>:

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1fb6:	ff 91       	pop	r31
    1fb8:	ef 91       	pop	r30
    1fba:	df 91       	pop	r29
    1fbc:	cf 91       	pop	r28
    1fbe:	bf 91       	pop	r27
    1fc0:	af 91       	pop	r26
    1fc2:	9f 91       	pop	r25
    1fc4:	8f 91       	pop	r24
    1fc6:	7f 91       	pop	r23
    1fc8:	6f 91       	pop	r22
    1fca:	5f 91       	pop	r21
    1fcc:	4f 91       	pop	r20
    1fce:	3f 91       	pop	r19
    1fd0:	2f 91       	pop	r18
    1fd2:	0f 90       	pop	r0
    1fd4:	0f be       	out	0x3f, r0	; 63
    1fd6:	0f 90       	pop	r0
    1fd8:	1f 90       	pop	r1
    1fda:	18 95       	reti

00001fdc <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1fdc:	1f 93       	push	r17

00001fde <.LCFI0>:
    1fde:	cf 93       	push	r28

00001fe0 <.LCFI1>:
    1fe0:	df 93       	push	r29

00001fe2 <.LCFI2>:
    1fe2:	00 d0       	rcall	.+0      	; 0x1fe4 <L0^A>

00001fe4 <L0^A>:
    1fe4:	0f 92       	push	r0

00001fe6 <.LCFI3>:
    1fe6:	cd b7       	in	r28, 0x3d	; 61
    1fe8:	de b7       	in	r29, 0x3e	; 62

00001fea <.LBB142>:
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    1fea:	85 ee       	ldi	r24, 0xE5	; 229
    1fec:	91 e0       	ldi	r25, 0x01	; 1

00001fee <.L2>:

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1fee:	fc 01       	movw	r30, r24

00001ff0 <.Loc.7>:
    1ff0:	01 96       	adiw	r24, 0x01	; 1

00001ff2 <.LBB143>:
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1ff2:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

00001ff6 <.LBE143>:
    1ff6:	20 83       	st	Z, r18

00001ff8 <.Loc.12>:
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1ff8:	21 e0       	ldi	r18, 0x01	; 1
    1ffa:	8d 3e       	cpi	r24, 0xED	; 237
    1ffc:	92 07       	cpc	r25, r18
    1ffe:	b9 f7       	brne	.-18     	; 0x1fee <.L2>

00002000 <.LBE145>:
	#endif

	EVENT_USB_Device_ControlRequest();
    2000:	0e 94 f6 03 	call	0x7ec	; 0x7ec <EVENT_USB_Device_ControlRequest>

00002004 <.LBB146>:
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2004:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00002008 <.LBE146>:

	if (Endpoint_IsSETUPReceived())
    2008:	83 ff       	sbrs	r24, 3
    200a:	10 c0       	rjmp	.+32     	; 0x202c <.L3>

0000200c <.LBB148>:
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    200c:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <USB_ControlRequest>

00002010 <.LVL5>:

		switch (USB_ControlRequest.bRequest)
    2010:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <USB_ControlRequest+0x1>

00002014 <.Loc.25>:
    2014:	95 30       	cpi	r25, 0x05	; 5
    2016:	09 f4       	brne	.+2      	; 0x201a <L0^A+0x2>

00002018 <L0^A>:
    2018:	a7 c0       	rjmp	.+334    	; 0x2168 <.L4>
    201a:	e8 f4       	brcc	.+58     	; 0x2056 <.L5>
    201c:	29 2f       	mov	r18, r25
    201e:	2d 7f       	andi	r18, 0xFD	; 253
    2020:	21 30       	cpi	r18, 0x01	; 1
    2022:	09 f4       	brne	.+2      	; 0x2026 <.LLST40+0x1>

00002024 <L0^A>:
    2024:	6e c0       	rjmp	.+220    	; 0x2102 <.L6>
    2026:	99 23       	and	r25, r25
    2028:	09 f4       	brne	.+2      	; 0x202c <.L3>

0000202a <L0^A>:
    202a:	43 c0       	rjmp	.+134    	; 0x20b2 <.L7>

0000202c <.L3>:
    202c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00002030 <.LBE221>:
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    2030:	83 ff       	sbrs	r24, 3
    2032:	0a c0       	rjmp	.+20     	; 0x2048 <.L1>

00002034 <.LBB223>:
				UEINTX &= ~(1 << RXSTPI);
    2034:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2038:	87 7f       	andi	r24, 0xF7	; 247
    203a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

0000203e <.LBB225>:
				UECONX |= (1 << STALLRQ);
    203e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2042:	80 62       	ori	r24, 0x20	; 32
    2044:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

00002048 <.L1>:
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    2048:	0f 90       	pop	r0
    204a:	0f 90       	pop	r0
    204c:	0f 90       	pop	r0
    204e:	df 91       	pop	r29
    2050:	cf 91       	pop	r28
    2052:	1f 91       	pop	r17
    2054:	08 95       	ret

00002056 <.L5>:
		switch (USB_ControlRequest.bRequest)
    2056:	98 30       	cpi	r25, 0x08	; 8
    2058:	09 f4       	brne	.+2      	; 0x205c <L0^A+0x2>

0000205a <L0^A>:
    205a:	ac c0       	rjmp	.+344    	; 0x21b4 <.L8>
    205c:	99 30       	cpi	r25, 0x09	; 9
    205e:	09 f4       	brne	.+2      	; 0x2062 <L0^A+0x2>

00002060 <L0^A>:
    2060:	b6 c0       	rjmp	.+364    	; 0x21ce <.L9>
    2062:	96 30       	cpi	r25, 0x06	; 6
    2064:	19 f7       	brne	.-58     	; 0x202c <.L3>

00002066 <.Loc.42>:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2066:	80 58       	subi	r24, 0x80	; 128

00002068 <.LVL8>:
    2068:	82 30       	cpi	r24, 0x02	; 2
    206a:	00 f7       	brcc	.-64     	; 0x202c <.L3>

0000206c <.LBB149>:
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    206c:	60 91 e9 01 	lds	r22, 0x01E9	; 0x8001e9 <USB_ControlRequest+0x4>
    2070:	70 91 ea 01 	lds	r23, 0x01EA	; 0x8001ea <USB_ControlRequest+0x5>
    2074:	9e 01       	movw	r18, r28
    2076:	2d 5f       	subi	r18, 0xFD	; 253
    2078:	3f 4f       	sbci	r19, 0xFF	; 255
    207a:	ae 01       	movw	r20, r28
    207c:	4f 5f       	subi	r20, 0xFF	; 255
    207e:	5f 4f       	sbci	r21, 0xFF	; 255
    2080:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <USB_ControlRequest+0x2>
    2084:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <USB_ControlRequest+0x3>
    2088:	2c d9       	rcall	.-3496   	; 0x12e2 <CALLBACK_USB_GetDescriptor>

0000208a <.LVL9>:
    208a:	bc 01       	movw	r22, r24

0000208c <.LVL10>:
    208c:	89 2b       	or	r24, r25
    208e:	71 f2       	breq	.-100    	; 0x202c <.L3>

00002090 <.LBB151>:
				UEINTX &= ~(1 << RXSTPI);
    2090:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2094:	87 7f       	andi	r24, 0xF7	; 247
    2096:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

0000209a <.LBE151>:
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
	#else
	if (DescriptorAddressSpace == MEMSPACE_FLASH)
    209a:	2b 81       	ldd	r18, Y+3	; 0x03
    209c:	89 81       	ldd	r24, Y+1	; 0x01
    209e:	9a 81       	ldd	r25, Y+2	; 0x02

000020a0 <.Loc.60>:
    20a0:	21 11       	cpse	r18, r1
    20a2:	82 c0       	rjmp	.+260    	; 0x21a8 <.L23>

000020a4 <.Loc.61>:
	  Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    20a4:	cb dc       	rcall	.-1642   	; 0x1a3c <Endpoint_Write_Control_PStream_LE>

000020a6 <.L24>:
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    20a6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    20aa:	8b 77       	andi	r24, 0x7B	; 123
    20ac:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

000020b0 <.LBE153>:
    20b0:	bd cf       	rjmp	.-134    	; 0x202c <.L3>

000020b2 <.L7>:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    20b2:	80 38       	cpi	r24, 0x80	; 128
    20b4:	99 f0       	breq	.+38     	; 0x20dc <.L11>

000020b6 <.Loc.69>:
    20b6:	82 38       	cpi	r24, 0x82	; 130
    20b8:	09 f0       	breq	.+2      	; 0x20bc <.LBB156>

000020ba <L0^A>:
    20ba:	b8 cf       	rjmp	.-144    	; 0x202c <.L3>

000020bc <.LBB156>:
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    20bc:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <USB_ControlRequest+0x4>

000020c0 <.LVL14>:
    20c0:	8f 70       	andi	r24, 0x0F	; 15

000020c2 <.LVL15>:

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    20c2:	87 30       	cpi	r24, 0x07	; 7
    20c4:	08 f0       	brcs	.+2      	; 0x20c8 <.LBB159>

000020c6 <L0^A>:
    20c6:	b2 cf       	rjmp	.-156    	; 0x202c <.L3>

000020c8 <.LBB159>:
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    20c8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

000020cc <.LBB161>:
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    20cc:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

000020d0 <.LVL18>:
    20d0:	85 fb       	bst	r24, 5
    20d2:	88 27       	eor	r24, r24
    20d4:	80 f9       	bld	r24, 0

000020d6 <.LBB163>:
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    20d6:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

000020da <.LVL20>:
			}
    20da:	06 c0       	rjmp	.+12     	; 0x20e8 <.L13>

000020dc <.L11>:
	uint8_t CurrentStatus = 0;
    20dc:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <USB_Device_CurrentlySelfPowered>

000020e0 <.LVL22>:
			if (USB_Device_RemoteWakeupEnabled)
    20e0:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <USB_Device_RemoteWakeupEnabled>
    20e4:	91 11       	cpse	r25, r1

000020e6 <.Loc.100>:
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    20e6:	82 60       	ori	r24, 0x02	; 2

000020e8 <.L13>:
				UEINTX &= ~(1 << RXSTPI);
    20e8:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    20ec:	97 7f       	andi	r25, 0xF7	; 247
    20ee:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

000020f2 <.LBB167>:
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    20f2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

000020f6 <.Loc.110>:
				UEDATX = (Data >> 8);
    20f6:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

000020fa <.L52>:
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    20fa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    20fe:	8e 77       	andi	r24, 0x7E	; 126
    2100:	95 c0       	rjmp	.+298    	; 0x222c <.L51>

00002102 <.L6>:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2102:	88 23       	and	r24, r24
    2104:	09 f4       	brne	.+2      	; 0x2108 <.Loc.124>

00002106 <L0^A>:
    2106:	82 c0       	rjmp	.+260    	; 0x220c <.L14>

00002108 <.Loc.124>:
    2108:	82 30       	cpi	r24, 0x02	; 2
    210a:	09 f0       	breq	.+2      	; 0x210e <.LBB180>

0000210c <L0^A>:
    210c:	8f cf       	rjmp	.-226    	; 0x202c <.L3>

0000210e <.LBB180>:
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    210e:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <USB_ControlRequest+0x2>

00002112 <.LVL27>:
    2112:	81 11       	cpse	r24, r1
    2114:	86 c0       	rjmp	.+268    	; 0x2222 <.L17>

00002116 <.LBB182>:
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    2116:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <USB_ControlRequest+0x4>
    211a:	8f 70       	andi	r24, 0x0F	; 15

0000211c <.LVL28>:

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    211c:	2f ef       	ldi	r18, 0xFF	; 255
    211e:	28 0f       	add	r18, r24

00002120 <.Loc.135>:
    2120:	26 30       	cpi	r18, 0x06	; 6
    2122:	08 f0       	brcs	.+2      	; 0x2126 <.LBB183>

00002124 <L0^A>:
    2124:	83 cf       	rjmp	.-250    	; 0x202c <.L3>

00002126 <.LBB183>:
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2126:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

0000212a <.LBB185>:
				return ((UECONX & (1 << EPEN)) ? true : false);
    212a:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

0000212e <.LBE185>:
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    212e:	20 ff       	sbrs	r18, 0
    2130:	78 c0       	rjmp	.+240    	; 0x2222 <.L17>

00002132 <.Loc.146>:
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    2132:	93 30       	cpi	r25, 0x03	; 3
    2134:	31 f4       	brne	.+12     	; 0x2142 <.L19>

00002136 <.LBB187>:
				UECONX |= (1 << STALLRQ);
    2136:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

0000213a <.LVL31>:
    213a:	80 62       	ori	r24, 0x20	; 32

0000213c <.L50>:
				UECONX |= (1 << RSTDT);
    213c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

00002140 <.Loc.155>:
			}
    2140:	70 c0       	rjmp	.+224    	; 0x2222 <.L17>

00002142 <.L19>:
				UECONX |= (1 << STALLRQC);
    2142:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2146:	90 61       	ori	r25, 0x10	; 16
    2148:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

0000214c <.LBB194>:
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    214c:	21 e0       	ldi	r18, 0x01	; 1
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	01 c0       	rjmp	.+2      	; 0x2154 <.L2^B1>

00002152 <.L1^B1>:
    2152:	22 0f       	add	r18, r18

00002154 <.L2^B1>:
    2154:	8a 95       	dec	r24
    2156:	ea f7       	brpl	.-6      	; 0x2152 <.L1^B1>

00002158 <.Loc.165>:
    2158:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

0000215c <.Loc.166>:
				UERST = 0;
    215c:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

00002160 <.LBB196>:
				UECONX |= (1 << RSTDT);
    2160:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

00002164 <.LVL36>:
    2164:	88 60       	ori	r24, 0x08	; 8
    2166:	ea cf       	rjmp	.-44     	; 0x213c <.L50>

00002168 <.L4>:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2168:	81 11       	cpse	r24, r1
    216a:	60 cf       	rjmp	.-320    	; 0x202c <.L3>

0000216c <.LBB202>:
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    216c:	10 91 e7 01 	lds	r17, 0x01E7	; 0x8001e7 <USB_ControlRequest+0x2>
    2170:	1f 77       	andi	r17, 0x7F	; 127

00002172 <.LBB204>:
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    2172:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

00002176 <.LVL39>:
    2176:	80 78       	andi	r24, 0x80	; 128

00002178 <.Loc.186>:
    2178:	81 2b       	or	r24, r17

0000217a <.Loc.187>:
    217a:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

0000217e <.LBB206>:
				UEINTX &= ~(1 << RXSTPI);
    217e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2182:	87 7f       	andi	r24, 0xF7	; 247
    2184:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00002188 <.LBE206>:
	Endpoint_ClearStatusStage();
    2188:	53 dd       	rcall	.-1370   	; 0x1c30 <Endpoint_ClearStatusStage>

0000218a <.L20>:
				return ((UEINTX & (1 << TXINI)) ? true : false);
    218a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

0000218e <.LBE208>:
	while (!(Endpoint_IsINReady()));
    218e:	80 ff       	sbrs	r24, 0
    2190:	fc cf       	rjmp	.-8      	; 0x218a <.L20>

00002192 <.LBB210>:
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    2192:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    2196:	80 68       	ori	r24, 0x80	; 128
    2198:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

0000219c <.LBE210>:
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    219c:	82 e0       	ldi	r24, 0x02	; 2
    219e:	11 11       	cpse	r17, r1
    21a0:	83 e0       	ldi	r24, 0x03	; 3
    21a2:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <USB_DeviceState>

000021a6 <.Loc.209>:
}
    21a6:	42 cf       	rjmp	.-380    	; 0x202c <.L3>

000021a8 <.L23>:
	else if (DescriptorAddressSpace == MEMSPACE_EEPROM)
    21a8:	21 30       	cpi	r18, 0x01	; 1
    21aa:	11 f4       	brne	.+4      	; 0x21b0 <.L25>

000021ac <.Loc.213>:
	  Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
    21ac:	a2 dc       	rcall	.-1724   	; 0x1af2 <Endpoint_Write_Control_EStream_LE>

000021ae <.LVL45>:
    21ae:	7b cf       	rjmp	.-266    	; 0x20a6 <.L24>

000021b0 <.L25>:
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    21b0:	eb db       	rcall	.-2090   	; 0x1988 <Endpoint_Write_Control_Stream_LE>

000021b2 <.LVL47>:
    21b2:	79 cf       	rjmp	.-270    	; 0x20a6 <.L24>

000021b4 <.L8>:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    21b4:	80 38       	cpi	r24, 0x80	; 128
    21b6:	09 f0       	breq	.+2      	; 0x21ba <.LBB175>

000021b8 <L0^A>:
    21b8:	39 cf       	rjmp	.-398    	; 0x202c <.L3>

000021ba <.LBB175>:
				UEINTX &= ~(1 << RXSTPI);
    21ba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

000021be <.LVL49>:
    21be:	87 7f       	andi	r24, 0xF7	; 247
    21c0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

000021c4 <.LBE175>:
	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    21c4:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <USB_Device_ConfigurationNumber>

000021c8 <.LBB177>:
				UEDATX = Data;
    21c8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    21cc:	96 cf       	rjmp	.-212    	; 0x20fa <.L52>

000021ce <.L9>:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    21ce:	81 11       	cpse	r24, r1
    21d0:	2d cf       	rjmp	.-422    	; 0x202c <.L3>

000021d2 <.LBB214>:
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    21d2:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <USB_ControlRequest+0x2>
    21d6:	92 30       	cpi	r25, 0x02	; 2
    21d8:	08 f0       	brcs	.+2      	; 0x21dc <.LBB216>

000021da <L0^A>:
    21da:	28 cf       	rjmp	.-432    	; 0x202c <.L3>

000021dc <.LBB216>:
				UEINTX &= ~(1 << RXSTPI);
    21dc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

000021e0 <.LVL53>:
    21e0:	87 7f       	andi	r24, 0xF7	; 247
    21e2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

000021e6 <.LBE216>:
	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    21e6:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <USB_Device_ConfigurationNumber>

000021ea <.Loc.247>:
	Endpoint_ClearStatusStage();
    21ea:	22 dd       	rcall	.-1468   	; 0x1c30 <Endpoint_ClearStatusStage>

000021ec <.LVL55>:
	if (USB_Device_ConfigurationNumber)
    21ec:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <USB_Device_ConfigurationNumber>
    21f0:	88 23       	and	r24, r24
    21f2:	11 f0       	breq	.+4      	; 0x21f8 <.L26>

000021f4 <.L34>:
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    21f4:	84 e0       	ldi	r24, 0x04	; 4
    21f6:	05 c0       	rjmp	.+10     	; 0x2202 <.L28>

000021f8 <.L26>:
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    21f8:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

000021fc <.LBE218>:
    21fc:	87 fd       	sbrc	r24, 7
    21fe:	fa cf       	rjmp	.-12     	; 0x21f4 <.L34>
    2200:	81 e0       	ldi	r24, 0x01	; 1

00002202 <.L28>:
    2202:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <USB_DeviceState>

00002206 <.Loc.256>:
	EVENT_USB_Device_ConfigurationChanged();
    2206:	0e 94 e7 03 	call	0x7ce	; 0x7ce <EVENT_USB_Device_ConfigurationChanged>

0000220a <.LVL56>:
    220a:	10 cf       	rjmp	.-480    	; 0x202c <.L3>

0000220c <.L14>:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    220c:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <USB_ControlRequest+0x2>

00002210 <.LVL58>:
    2210:	81 30       	cpi	r24, 0x01	; 1
    2212:	09 f0       	breq	.+2      	; 0x2216 <.Loc.264>

00002214 <L0^A>:
    2214:	0b cf       	rjmp	.-490    	; 0x202c <.L3>

00002216 <.Loc.264>:
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	93 30       	cpi	r25, 0x03	; 3
    221a:	09 f0       	breq	.+2      	; 0x221e <.L16>
    221c:	80 e0       	ldi	r24, 0x00	; 0

0000221e <.L16>:
    221e:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <USB_Device_RemoteWakeupEnabled>

00002222 <.L17>:
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2222:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

00002226 <.LBB199>:
				UEINTX &= ~(1 << RXSTPI);
    2226:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    222a:	87 7f       	andi	r24, 0xF7	; 247

0000222c <.L51>:
    222c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00002230 <.LBE199>:

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    2230:	ff dc       	rcall	.-1538   	; 0x1c30 <Endpoint_ClearStatusStage>

00002232 <.LVL61>:
    2232:	fc ce       	rjmp	.-520    	; 0x202c <.L3>

00002234 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    2234:	08 95       	ret

00002236 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    2236:	cf 93       	push	r28

00002238 <.LBB26>:
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    2238:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <USB_DeviceState>

0000223c <.Loc.5>:
    223c:	88 23       	and	r24, r24
    223e:	99 f0       	breq	.+38     	; 0x2266 <.L1>

00002240 <.LBB28>:
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2240:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

00002244 <.Loc.10>:
    2244:	cf 70       	andi	r28, 0x0F	; 15

00002246 <.LBB30>:
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2246:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>

0000224a <.Loc.14>:
    224a:	89 2f       	mov	r24, r25
    224c:	81 70       	andi	r24, 0x01	; 1
    224e:	90 fd       	sbrc	r25, 0
    2250:	80 e8       	ldi	r24, 0x80	; 128

00002252 <.LBE30>:
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2252:	c8 2b       	or	r28, r24

00002254 <.LBB32>:
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2254:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

00002258 <.LBB34>:
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2258:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

0000225c <.LBE34>:

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    225c:	83 fd       	sbrc	r24, 3

0000225e <.Loc.27>:
	  USB_Device_ProcessControlRequest();
    225e:	be de       	rcall	.-644    	; 0x1fdc <USB_Device_ProcessControlRequest>

00002260 <.LBB36>:
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2260:	cf 70       	andi	r28, 0x0F	; 15

00002262 <.LVL3>:
    2262:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

00002266 <.L1>:
}
    2266:	cf 91       	pop	r28
    2268:	08 95       	ret

0000226a <__udivmodqi4>:
    226a:	99 1b       	sub	r25, r25

0000226c <.Loc.1>:
    226c:	79 e0       	ldi	r23, 0x09	; 9

0000226e <.Loc.2>:
    226e:	04 c0       	rjmp	.+8      	; 0x2278 <__udivmodqi4_ep>

00002270 <__udivmodqi4_loop>:
    2270:	99 1f       	adc	r25, r25

00002272 <.Loc.4>:
    2272:	96 17       	cp	r25, r22

00002274 <.Loc.5>:
    2274:	08 f0       	brcs	.+2      	; 0x2278 <__udivmodqi4_ep>

00002276 <.Loc.6>:
    2276:	96 1b       	sub	r25, r22

00002278 <__udivmodqi4_ep>:
    2278:	88 1f       	adc	r24, r24

0000227a <.Loc.8>:
    227a:	7a 95       	dec	r23

0000227c <.Loc.9>:
    227c:	c9 f7       	brne	.-14     	; 0x2270 <__udivmodqi4_loop>

0000227e <.Loc.10>:
    227e:	80 95       	com	r24

00002280 <.Loc.11>:
    2280:	08 95       	ret

00002282 <memcpy>:
    2282:	fb 01       	movw	r30, r22
    2284:	dc 01       	movw	r26, r24
    2286:	02 c0       	rjmp	.+4      	; 0x228c <.L_memcpy_start>

00002288 <.L_memcpy_loop>:
    2288:	01 90       	ld	r0, Z+
    228a:	0d 92       	st	X+, r0

0000228c <.L_memcpy_start>:
    228c:	41 50       	subi	r20, 0x01	; 1
    228e:	50 40       	sbci	r21, 0x00	; 0
    2290:	d8 f7       	brcc	.-10     	; 0x2288 <.L_memcpy_loop>
    2292:	08 95       	ret

00002294 <eeprom_read_byte>:
    2294:	f9 99       	sbic	0x1f, 1	; 31
    2296:	fe cf       	rjmp	.-4      	; 0x2294 <eeprom_read_byte>
    2298:	92 bd       	out	0x22, r25	; 34
    229a:	81 bd       	out	0x21, r24	; 33
    229c:	f8 9a       	sbi	0x1f, 0	; 31
    229e:	99 27       	eor	r25, r25
    22a0:	80 b5       	in	r24, 0x20	; 32
    22a2:	08 95       	ret

000022a4 <eeprom_write_byte>:
    22a4:	26 2f       	mov	r18, r22

000022a6 <eeprom_write_r18>:
    22a6:	f9 99       	sbic	0x1f, 1	; 31
    22a8:	fe cf       	rjmp	.-4      	; 0x22a6 <eeprom_write_r18>
    22aa:	1f ba       	out	0x1f, r1	; 31
    22ac:	92 bd       	out	0x22, r25	; 34
    22ae:	81 bd       	out	0x21, r24	; 33
    22b0:	20 bd       	out	0x20, r18	; 32
    22b2:	0f b6       	in	r0, 0x3f	; 63
    22b4:	f8 94       	cli
    22b6:	fa 9a       	sbi	0x1f, 2	; 31
    22b8:	f9 9a       	sbi	0x1f, 1	; 31
    22ba:	0f be       	out	0x3f, r0	; 63
    22bc:	01 96       	adiw	r24, 0x01	; 1
    22be:	08 95       	ret

000022c0 <_exit>:
    22c0:	f8 94       	cli

000022c2 <__stop_program>:
    22c2:	ff cf       	rjmp	.-2      	; 0x22c2 <__stop_program>
