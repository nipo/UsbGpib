
TestAndMeasurement.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00002138  000021cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002138  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d1  0080012c  0080012c  000021f8  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000021f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000220c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a8  00000000  00000000  0000224c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000079ca  00000000  00000000  000025f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001f93  00000000  00000000  00009fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000041d4  00000000  00000000  0000bf51  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b98  00000000  00000000  00010128  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000026d8  00000000  00000000  00010cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000515d  00000000  00000000  00013398  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004a8  00000000  00000000  000184f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	89 c0       	rjmp	.+274    	; 0x114 <__ctors_end>
       2:	00 00       	nop
       4:	a3 c0       	rjmp	.+326    	; 0x14c <__bad_interrupt>
       6:	00 00       	nop
       8:	a1 c0       	rjmp	.+322    	; 0x14c <__bad_interrupt>
       a:	00 00       	nop
       c:	9f c0       	rjmp	.+318    	; 0x14c <__bad_interrupt>
       e:	00 00       	nop
      10:	9d c0       	rjmp	.+314    	; 0x14c <__bad_interrupt>
      12:	00 00       	nop
      14:	9b c0       	rjmp	.+310    	; 0x14c <__bad_interrupt>
      16:	00 00       	nop
      18:	99 c0       	rjmp	.+306    	; 0x14c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	97 c0       	rjmp	.+302    	; 0x14c <__bad_interrupt>
      1e:	00 00       	nop
      20:	95 c0       	rjmp	.+298    	; 0x14c <__bad_interrupt>
      22:	00 00       	nop
      24:	93 c0       	rjmp	.+294    	; 0x14c <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 0d 0e 	jmp	0x1c1a	; 0x1c1a <__vector_10>
      2c:	0c 94 da 0e 	jmp	0x1db4	; 0x1db4 <__vector_11>
      30:	8d c0       	rjmp	.+282    	; 0x14c <__bad_interrupt>
      32:	00 00       	nop
      34:	8b c0       	rjmp	.+278    	; 0x14c <__bad_interrupt>
      36:	00 00       	nop
      38:	89 c0       	rjmp	.+274    	; 0x14c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	87 c0       	rjmp	.+270    	; 0x14c <__bad_interrupt>
      3e:	00 00       	nop
      40:	85 c0       	rjmp	.+266    	; 0x14c <__bad_interrupt>
      42:	00 00       	nop
      44:	83 c0       	rjmp	.+262    	; 0x14c <__bad_interrupt>
      46:	00 00       	nop
      48:	81 c0       	rjmp	.+258    	; 0x14c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7f c0       	rjmp	.+254    	; 0x14c <__bad_interrupt>
      4e:	00 00       	nop
      50:	7d c0       	rjmp	.+250    	; 0x14c <__bad_interrupt>
      52:	00 00       	nop
      54:	7b c0       	rjmp	.+246    	; 0x14c <__bad_interrupt>
      56:	00 00       	nop
      58:	79 c0       	rjmp	.+242    	; 0x14c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 f5 08 	jmp	0x11ea	; 0x11ea <__vector_23>
      60:	75 c0       	rjmp	.+234    	; 0x14c <__bad_interrupt>
      62:	00 00       	nop
      64:	73 c0       	rjmp	.+230    	; 0x14c <__bad_interrupt>
      66:	00 00       	nop
      68:	71 c0       	rjmp	.+226    	; 0x14c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6f c0       	rjmp	.+222    	; 0x14c <__bad_interrupt>
      6e:	00 00       	nop
      70:	6d c0       	rjmp	.+218    	; 0x14c <__bad_interrupt>
      72:	00 00       	nop
      74:	6b c0       	rjmp	.+214    	; 0x14c <__bad_interrupt>
      76:	00 00       	nop
      78:	69 c0       	rjmp	.+210    	; 0x14c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	67 c0       	rjmp	.+206    	; 0x14c <__bad_interrupt>
      7e:	00 00       	nop
      80:	65 c0       	rjmp	.+202    	; 0x14c <__bad_interrupt>
      82:	00 00       	nop
      84:	63 c0       	rjmp	.+198    	; 0x14c <__bad_interrupt>
      86:	00 00       	nop
      88:	61 c0       	rjmp	.+194    	; 0x14c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5f c0       	rjmp	.+190    	; 0x14c <__bad_interrupt>
      8e:	00 00       	nop
      90:	5d c0       	rjmp	.+186    	; 0x14c <__bad_interrupt>
      92:	00 00       	nop
      94:	5b c0       	rjmp	.+182    	; 0x14c <__bad_interrupt>
      96:	00 00       	nop
      98:	59 c0       	rjmp	.+178    	; 0x14c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	57 c0       	rjmp	.+174    	; 0x14c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	55 c0       	rjmp	.+170    	; 0x14c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	53 c0       	rjmp	.+166    	; 0x14c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	51 c0       	rjmp	.+162    	; 0x14c <__bad_interrupt>
      aa:	00 00       	nop

000000ac <ProductString>:
      ac:	10 03 47 00 70 00 69 00 62 00 55 00 73 00 62 00     ..G.p.i.b.U.s.b.
      bc:	00 00                                               ..

000000be <ManufacturerString>:
      be:	16 03 58 00 79 00 70 00 68 00 72 00 6f 00 4c 00     ..X.y.p.h.r.o.L.
      ce:	61 00 62 00 73 00 00 00                             a.b.s...

000000d6 <LanguageString>:
      d6:	04 03 09 04                                         ....

000000da <ConfigurationDescriptor>:
      da:	09 02 27 00 01 01 00 c0 32 09 04 00 00 02 fe 03     ..'.....2.......
      ea:	01 00 07 05 03 02 40 00 05 07 05 82 02 40 00 05     ......@......@..
      fa:	00 00 00 00 00 00 00                                .......

00000101 <DeviceDescriptor>:
     101:	12 01 10 01 00 00 00 08 eb 03 65 20 01 00 01 02     ..........e ....
     111:	03 01 00                                            ...

00000114 <__ctors_end>:
     114:	11 24       	eor	r1, r1
     116:	1f be       	out	0x3f, r1	; 63
     118:	cf ef       	ldi	r28, 0xFF	; 255
     11a:	da e0       	ldi	r29, 0x0A	; 10
     11c:	de bf       	out	0x3e, r29	; 62
     11e:	cd bf       	out	0x3d, r28	; 61

00000120 <__do_copy_data>:
     120:	11 e0       	ldi	r17, 0x01	; 1
     122:	a0 e0       	ldi	r26, 0x00	; 0
     124:	b1 e0       	ldi	r27, 0x01	; 1
     126:	e8 e3       	ldi	r30, 0x38	; 56
     128:	f1 e2       	ldi	r31, 0x21	; 33
     12a:	02 c0       	rjmp	.+4      	; 0x130 <__do_copy_data+0x10>
     12c:	05 90       	lpm	r0, Z+
     12e:	0d 92       	st	X+, r0
     130:	ac 32       	cpi	r26, 0x2C	; 44
     132:	b1 07       	cpc	r27, r17
     134:	d9 f7       	brne	.-10     	; 0x12c <__do_copy_data+0xc>

00000136 <__do_clear_bss>:
     136:	21 e0       	ldi	r18, 0x01	; 1
     138:	ac e2       	ldi	r26, 0x2C	; 44
     13a:	b1 e0       	ldi	r27, 0x01	; 1
     13c:	01 c0       	rjmp	.+2      	; 0x140 <.do_clear_bss_start>

0000013e <.do_clear_bss_loop>:
     13e:	1d 92       	st	X+, r1

00000140 <.do_clear_bss_start>:
     140:	ad 3f       	cpi	r26, 0xFD	; 253
     142:	b2 07       	cpc	r27, r18
     144:	e1 f7       	brne	.-8      	; 0x13e <.do_clear_bss_loop>
     146:	31 d7       	rcall	.+3682   	; 0xfaa <main>
     148:	0c 94 9a 10 	jmp	0x2134	; 0x2134 <_exit>

0000014c <__bad_interrupt>:
     14c:	59 cf       	rjmp	.-334    	; 0x0 <__vectors>

0000014e <TMC_SetInternalSerial>:

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
     14e:	4f e5       	ldi	r20, 0x5F	; 95
     150:	50 e0       	ldi	r21, 0x00	; 0
     152:	af b7       	in	r26, 0x3f	; 63
     154:	f8 94       	cli
     156:	93 e0       	ldi	r25, 0x03	; 3
     158:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <tmc_serial_string+0x1>
     15c:	88 23       	and	r24, r24
     15e:	b1 f1       	breq	.+108    	; 0x1cc <TMC_SetInternalSerial+0x7e>
     160:	87 e4       	ldi	r24, 0x47	; 71
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <tmc_serial_string+0x3>
     168:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <tmc_serial_string+0x2>
     16c:	80 e5       	ldi	r24, 0x50	; 80
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <tmc_serial_string+0x5>
     174:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <tmc_serial_string+0x4>
     178:	89 e4       	ldi	r24, 0x49	; 73
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <tmc_serial_string+0x7>
     180:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <tmc_serial_string+0x6>
     184:	82 e4       	ldi	r24, 0x42	; 66
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <tmc_serial_string+0x9>
     18c:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <tmc_serial_string+0x8>
     190:	50 93 95 01 	sts	0x0195, r21	; 0x800195 <tmc_serial_string+0xb>
     194:	40 93 94 01 	sts	0x0194, r20	; 0x800194 <tmc_serial_string+0xa>
     198:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     19c:	6a e0       	ldi	r22, 0x0A	; 10
     19e:	0e 94 6f 10 	call	0x20de	; 0x20de <__udivmodqi4>
     1a2:	28 2f       	mov	r18, r24
     1a4:	30 e0       	ldi	r19, 0x00	; 0
     1a6:	20 5d       	subi	r18, 0xD0	; 208
     1a8:	3f 4f       	sbci	r19, 0xFF	; 255
     1aa:	30 93 97 01 	sts	0x0197, r19	; 0x800197 <tmc_serial_string+0xd>
     1ae:	20 93 96 01 	sts	0x0196, r18	; 0x800196 <tmc_serial_string+0xc>
     1b2:	89 2f       	mov	r24, r25
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	c0 96       	adiw	r24, 0x30	; 48
     1b8:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <tmc_serial_string+0xf>
     1bc:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <tmc_serial_string+0xe>
     1c0:	50 93 9b 01 	sts	0x019B, r21	; 0x80019b <tmc_serial_string+0x11>
     1c4:	40 93 9a 01 	sts	0x019A, r20	; 0x80019a <tmc_serial_string+0x10>
     1c8:	88 e0       	ldi	r24, 0x08	; 8
     1ca:	01 c0       	rjmp	.+2      	; 0x1ce <TMC_SetInternalSerial+0x80>
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	6e e0       	ldi	r22, 0x0E	; 14
     1d2:	71 e2       	ldi	r23, 0x21	; 33
     1d4:	28 2f       	mov	r18, r24
     1d6:	29 0f       	add	r18, r25
     1d8:	e6 2f       	mov	r30, r22
     1da:	f0 e0       	ldi	r31, 0x00	; 0
     1dc:	70 93 57 00 	sts	0x0057, r23	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
     1e0:	e4 91       	lpm	r30, Z
     1e2:	90 ff       	sbrs	r25, 0
     1e4:	03 c0       	rjmp	.+6      	; 0x1ec <TMC_SetInternalSerial+0x9e>
     1e6:	e2 95       	swap	r30
     1e8:	ef 70       	andi	r30, 0x0F	; 15
     1ea:	6f 5f       	subi	r22, 0xFF	; 255
     1ec:	ef 70       	andi	r30, 0x0F	; 15
     1ee:	30 e0       	ldi	r19, 0x00	; 0
     1f0:	4e 2f       	mov	r20, r30
     1f2:	50 e0       	ldi	r21, 0x00	; 0
     1f4:	ea 30       	cpi	r30, 0x0A	; 10
     1f6:	18 f0       	brcs	.+6      	; 0x1fe <TMC_SetInternalSerial+0xb0>
     1f8:	49 5c       	subi	r20, 0xC9	; 201
     1fa:	5f 4f       	sbci	r21, 0xFF	; 255
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <TMC_SetInternalSerial+0xb4>
     1fe:	40 5d       	subi	r20, 0xD0	; 208
     200:	5f 4f       	sbci	r21, 0xFF	; 255
     202:	f9 01       	movw	r30, r18
     204:	ee 0f       	add	r30, r30
     206:	ff 1f       	adc	r31, r31
     208:	e4 57       	subi	r30, 0x74	; 116
     20a:	fe 4f       	sbci	r31, 0xFE	; 254
     20c:	51 83       	std	Z+1, r21	; 0x01
     20e:	40 83       	st	Z, r20
     210:	9f 5f       	subi	r25, 0xFF	; 255
     212:	94 31       	cpi	r25, 0x14	; 20
     214:	f9 f6       	brne	.-66     	; 0x1d4 <TMC_SetInternalSerial+0x86>
     216:	8b 5e       	subi	r24, 0xEB	; 235
     218:	88 0f       	add	r24, r24
     21a:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <tmc_serial_string>
     21e:	af bf       	out	0x3f, r26	; 63
     220:	08 95       	ret

00000222 <charToval>:
     222:	98 2f       	mov	r25, r24
     224:	80 ed       	ldi	r24, 0xD0	; 208
     226:	89 0f       	add	r24, r25
     228:	8a 30       	cpi	r24, 0x0A	; 10
     22a:	08 f0       	brcs	.+2      	; 0x22e <charToval+0xc>
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	2f e9       	ldi	r18, 0x9F	; 159
     230:	29 0f       	add	r18, r25
     232:	26 30       	cpi	r18, 0x06	; 6
     234:	10 f4       	brcc	.+4      	; 0x23a <charToval+0x18>
     236:	89 ea       	ldi	r24, 0xA9	; 169
     238:	89 0f       	add	r24, r25
     23a:	2f eb       	ldi	r18, 0xBF	; 191
     23c:	29 0f       	add	r18, r25
     23e:	26 30       	cpi	r18, 0x06	; 6
     240:	10 f4       	brcc	.+4      	; 0x246 <charToval+0x24>
     242:	89 ec       	ldi	r24, 0xC9	; 201
     244:	89 0f       	add	r24, r25
     246:	08 95       	ret

00000248 <is_timedout>:
     248:	85 e3       	ldi	r24, 0x35	; 53
     24a:	8a 95       	dec	r24
     24c:	f1 f7       	brne	.-4      	; 0x24a <is_timedout+0x2>
     24e:	00 00       	nop
     250:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <timeout_val>
     254:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <timeout_val+0x1>
     258:	a0 91 87 01 	lds	r26, 0x0187	; 0x800187 <timeout_val+0x2>
     25c:	b0 91 88 01 	lds	r27, 0x0188	; 0x800188 <timeout_val+0x3>
     260:	00 97       	sbiw	r24, 0x00	; 0
     262:	a1 05       	cpc	r26, r1
     264:	b1 05       	cpc	r27, r1
     266:	69 f0       	breq	.+26     	; 0x282 <is_timedout+0x3a>
     268:	01 97       	sbiw	r24, 0x01	; 1
     26a:	a1 09       	sbc	r26, r1
     26c:	b1 09       	sbc	r27, r1
     26e:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <timeout_val>
     272:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <timeout_val+0x1>
     276:	a0 93 87 01 	sts	0x0187, r26	; 0x800187 <timeout_val+0x2>
     27a:	b0 93 88 01 	sts	0x0188, r27	; 0x800188 <timeout_val+0x3>
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	08 95       	ret
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	08 95       	ret

00000286 <tmc_gpib_write_timedout>:
     286:	0e 94 55 10 	call	0x20aa	; 0x20aa <USB_USBTask>
     28a:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <IsTMCBulkOUTReset>
     28e:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <IsTMCBulkINReset>
     292:	89 2b       	or	r24, r25
     294:	08 95       	ret

00000296 <tmc_gpib_read_timedout>:
     296:	0e 94 55 10 	call	0x20aa	; 0x20aa <USB_USBTask>
     29a:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <IsTMCBulkINReset>
     29e:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <IsTMCBulkOUTReset>
     2a2:	89 2b       	or	r24, r25
     2a4:	08 95       	ret

000002a6 <Jump_To_Bootloader>:
     2a6:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <USB_Disable>
     2aa:	f8 94       	cli
     2ac:	2f ef       	ldi	r18, 0xFF	; 255
     2ae:	87 ea       	ldi	r24, 0xA7	; 167
     2b0:	91 e6       	ldi	r25, 0x61	; 97
     2b2:	21 50       	subi	r18, 0x01	; 1
     2b4:	80 40       	sbci	r24, 0x00	; 0
     2b6:	90 40       	sbci	r25, 0x00	; 0
     2b8:	e1 f7       	brne	.-8      	; 0x2b2 <Jump_To_Bootloader+0xc>
     2ba:	00 c0       	rjmp	.+0      	; 0x2bc <Jump_To_Bootloader+0x16>
     2bc:	00 00       	nop
     2be:	9c e0       	ldi	r25, 0x0C	; 12
     2c0:	88 e1       	ldi	r24, 0x18	; 24
     2c2:	0f b6       	in	r0, 0x3f	; 63
     2c4:	f8 94       	cli
     2c6:	a8 95       	wdr
     2c8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     2cc:	0f be       	out	0x3f, r0	; 63
     2ce:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     2d2:	ef ef       	ldi	r30, 0xFF	; 255
     2d4:	f9 e6       	ldi	r31, 0x69	; 105
     2d6:	28 e1       	ldi	r18, 0x18	; 24
     2d8:	e1 50       	subi	r30, 0x01	; 1
     2da:	f0 40       	sbci	r31, 0x00	; 0
     2dc:	20 40       	sbci	r18, 0x00	; 0
     2de:	e1 f7       	brne	.-8      	; 0x2d8 <Jump_To_Bootloader+0x32>
     2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <Jump_To_Bootloader+0x3c>
     2e2:	00 00       	nop
     2e4:	e0 e0       	ldi	r30, 0x00	; 0
     2e6:	f0 e7       	ldi	r31, 0x70	; 112
     2e8:	09 95       	icall
     2ea:	ff cf       	rjmp	.-2      	; 0x2ea <Jump_To_Bootloader+0x44>

000002ec <findGpibdevice>:
	bool devicepresent;
	
	//gpib_interface_clear();
	
	devicepresent = false;
	addr = gpib_search();
     2ec:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <gpib_search>
	devicepresent = (addr < 255);
     2f0:	91 e0       	ldi	r25, 0x01	; 1
     2f2:	8f 3f       	cpi	r24, 0xFF	; 255
     2f4:	11 f4       	brne	.+4      	; 0x2fa <findGpibdevice+0xe>
     2f6:	90 e0       	ldi	r25, 0x00	; 0
	if (addr >= 255)	/* fallback to GPIB address 1, if no device was found */
		addr = 1;
     2f8:	81 e0       	ldi	r24, 0x01	; 1
	gpib_addr = addr; /* set global GPIB address to found address*/
     2fa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <gpib_addr>
	
	return devicepresent;
}
     2fe:	89 2f       	mov	r24, r25
     300:	08 95       	ret

00000302 <useResponseAsSn>:

bool useResponseAsSn(const char *command)
{
     302:	ef 92       	push	r14
     304:	ff 92       	push	r15
     306:	0f 93       	push	r16
     308:	1f 93       	push	r17
     30a:	cf 93       	push	r28
     30c:	df 93       	push	r29
     30e:	00 d0       	rcall	.+0      	; 0x310 <useResponseAsSn+0xe>
     310:	cd b7       	in	r28, 0x3d	; 61
     312:	de b7       	in	r29, 0x3e	; 62
     314:	7c 01       	movw	r14, r24
	bool    eoi, timedout;
	bool    gotStringViaGPIB = true;
    uint8_t hascomma = false; /* does the response contain a , character? */
    uint8_t spacesLeft = 3;

	tmc_serial_string.Header.Size = 0;
     316:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <tmc_serial_string>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
     31a:	80 ea       	ldi	r24, 0xA0	; 160
     31c:	96 e8       	ldi	r25, 0x86	; 134
     31e:	a1 e0       	ldi	r26, 0x01	; 1
     320:	b0 e0       	ldi	r27, 0x00	; 0
     322:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <timeout_val>
     326:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <timeout_val+0x1>
     32a:	a0 93 87 01 	sts	0x0187, r26	; 0x800187 <timeout_val+0x2>
     32e:	b0 93 88 01 	sts	0x0188, r27	; 0x800188 <timeout_val+0x3>
    uint8_t spacesLeft = 3;

	tmc_serial_string.Header.Size = 0;

	timeout_start(100000); /* 1s timeout*/
	gpib_make_listener(gpib_addr, is_timedout);
     332:	64 e2       	ldi	r22, 0x24	; 36
     334:	71 e0       	ldi	r23, 0x01	; 1
     336:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     33a:	0e 94 bb 0a 	call	0x1576	; 0x1576 <gpib_make_listener>
     33e:	87 01       	movw	r16, r14

    while (*command != '\0') {
     340:	f8 01       	movw	r30, r16
     342:	81 91       	ld	r24, Z+
     344:	8f 01       	movw	r16, r30
     346:	88 23       	and	r24, r24
     348:	91 f0       	breq	.+36     	; 0x36e <useResponseAsSn+0x6c>
        if (timeout_val != 0)
     34a:	40 91 85 01 	lds	r20, 0x0185	; 0x800185 <timeout_val>
     34e:	50 91 86 01 	lds	r21, 0x0186	; 0x800186 <timeout_val+0x1>
     352:	60 91 87 01 	lds	r22, 0x0187	; 0x800187 <timeout_val+0x2>
     356:	70 91 88 01 	lds	r23, 0x0188	; 0x800188 <timeout_val+0x3>
     35a:	45 2b       	or	r20, r21
     35c:	46 2b       	or	r20, r22
     35e:	47 2b       	or	r20, r23
     360:	79 f3       	breq	.-34     	; 0x340 <useResponseAsSn+0x3e>
            gpib_writedat(*command, false, is_timedout);
     362:	44 e2       	ldi	r20, 0x24	; 36
     364:	51 e0       	ldi	r21, 0x01	; 1
     366:	60 e0       	ldi	r22, 0x00	; 0
     368:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <gpib_writedat>
     36c:	e9 cf       	rjmp	.-46     	; 0x340 <useResponseAsSn+0x3e>
        command++;
    }
	gpib_untalk_unlisten(is_timedout);
     36e:	84 e2       	ldi	r24, 0x24	; 36
     370:	91 e0       	ldi	r25, 0x01	; 1
     372:	0e 94 8b 0a 	call	0x1516	; 0x1516 <gpib_untalk_unlisten>
	
	if (timeout_val == 0)
     376:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <timeout_val>
     37a:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <timeout_val+0x1>
     37e:	a0 91 87 01 	lds	r26, 0x0187	; 0x800187 <timeout_val+0x2>
     382:	b0 91 88 01 	lds	r27, 0x0188	; 0x800188 <timeout_val+0x3>
     386:	89 2b       	or	r24, r25
     388:	8a 2b       	or	r24, r26
     38a:	8b 2b       	or	r24, r27
     38c:	11 f4       	brne	.+4      	; 0x392 <useResponseAsSn+0x90>
        return false;
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	72 c0       	rjmp	.+228    	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
     392:	80 ea       	ldi	r24, 0xA0	; 160
     394:	96 e8       	ldi	r25, 0x86	; 134
     396:	a1 e0       	ldi	r26, 0x01	; 1
     398:	b0 e0       	ldi	r27, 0x00	; 0
     39a:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <timeout_val>
     39e:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <timeout_val+0x1>
     3a2:	a0 93 87 01 	sts	0x0187, r26	; 0x800187 <timeout_val+0x2>
     3a6:	b0 93 88 01 	sts	0x0188, r27	; 0x800188 <timeout_val+0x3>
	
	if (timeout_val == 0)
        return false;

    timeout_start(100000); /* 1s timeout*/
    gpib_make_talker(gpib_addr, is_timedout);
     3aa:	64 e2       	ldi	r22, 0x24	; 36
     3ac:	71 e0       	ldi	r23, 0x01	; 1
     3ae:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     3b2:	0e 94 9f 0a 	call	0x153e	; 0x153e <gpib_make_talker>
	uint8_t c;
    uint8_t len = 0;
	bool    eoi, timedout;
	bool    gotStringViaGPIB = true;
    uint8_t hascomma = false; /* does the response contain a , character? */
    uint8_t spacesLeft = 3;
     3b6:	03 e0       	ldi	r16, 0x03	; 3
}

bool useResponseAsSn(const char *command)
{
	uint8_t c;
    uint8_t len = 0;
     3b8:	10 e0       	ldi	r17, 0x00	; 0
    timeout_start(100000); /* 1s timeout*/
    gpib_make_talker(gpib_addr, is_timedout);

    do
    {
        c = gpib_readdat(&eoi, &timedout, is_timedout);
     3ba:	44 e2       	ldi	r20, 0x24	; 36
     3bc:	51 e0       	ldi	r21, 0x01	; 1
     3be:	be 01       	movw	r22, r28
     3c0:	6f 5f       	subi	r22, 0xFF	; 255
     3c2:	7f 4f       	sbci	r23, 0xFF	; 255
     3c4:	ce 01       	movw	r24, r28
     3c6:	02 96       	adiw	r24, 0x02	; 2
     3c8:	0e 94 00 0a 	call	0x1400	; 0x1400 <gpib_readdat>
        hascomma = hascomma || (c == ',');
        if ( (c=='\"') || (c=='*') || (c=='/') || (c=='\\') || (c==':') || (c=='?') || (c==' ') || (c==',') || (c=='&') ) /* YEP, a comma and amphersand is allowed in USBTMC spec, but R&S SW does not like this... */
     3cc:	98 2f       	mov	r25, r24
     3ce:	9f 7e       	andi	r25, 0xEF	; 239
     3d0:	9a 32       	cpi	r25, 0x2A	; 42
     3d2:	71 f0       	breq	.+28     	; 0x3f0 <useResponseAsSn+0xee>
     3d4:	9f 32       	cpi	r25, 0x2F	; 47
     3d6:	61 f0       	breq	.+24     	; 0x3f0 <useResponseAsSn+0xee>
     3d8:	8c 35       	cpi	r24, 0x5C	; 92
     3da:	51 f0       	breq	.+20     	; 0x3f0 <useResponseAsSn+0xee>
     3dc:	98 2f       	mov	r25, r24
     3de:	9d 7f       	andi	r25, 0xFD	; 253
     3e0:	90 32       	cpi	r25, 0x20	; 32
     3e2:	31 f0       	breq	.+12     	; 0x3f0 <useResponseAsSn+0xee>
     3e4:	8c 32       	cpi	r24, 0x2C	; 44
     3e6:	21 f0       	breq	.+8      	; 0x3f0 <useResponseAsSn+0xee>
     3e8:	86 32       	cpi	r24, 0x26	; 38
     3ea:	11 f0       	breq	.+4      	; 0x3f0 <useResponseAsSn+0xee>
            c='_';

        if (c == '_')
     3ec:	8f 35       	cpi	r24, 0x5F	; 95
     3ee:	21 f4       	brne	.+8      	; 0x3f8 <useResponseAsSn+0xf6>
            spacesLeft--;
     3f0:	01 50       	subi	r16, 0x01	; 1
        else
            spacesLeft = 3;

        if (spacesLeft == 0)
     3f2:	e9 f0       	breq	.+58     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     3f4:	8f e5       	ldi	r24, 0x5F	; 95
     3f6:	01 c0       	rjmp	.+2      	; 0x3fa <useResponseAsSn+0xf8>
            c='_';

        if (c == '_')
            spacesLeft--;
        else
            spacesLeft = 3;
     3f8:	03 e0       	ldi	r16, 0x03	; 3

        if (spacesLeft == 0)
            break;
        
        if ( (c >=32) && (c <=126))
     3fa:	90 ee       	ldi	r25, 0xE0	; 224
     3fc:	98 0f       	add	r25, r24
     3fe:	9f 35       	cpi	r25, 0x5F	; 95
     400:	50 f4       	brcc	.+20     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
            tmc_serial_string.UnicodeString[len++] = cpu_to_le16(c);
     402:	e1 2f       	mov	r30, r17
     404:	f0 e0       	ldi	r31, 0x00	; 0
     406:	ee 0f       	add	r30, r30
     408:	ff 1f       	adc	r31, r31
     40a:	e4 57       	subi	r30, 0x74	; 116
     40c:	fe 4f       	sbci	r31, 0xFE	; 254
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	80 83       	st	Z, r24
     414:	1f 5f       	subi	r17, 0xFF	; 255
    }
    while ((len < TMC_MAX_SERIAL_STRING_LENGTH) && (!timedout) && (!eoi));
     416:	12 33       	cpi	r17, 0x32	; 50
     418:	50 f4       	brcc	.+20     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     41a:	89 81       	ldd	r24, Y+1	; 0x01
     41c:	81 11       	cpse	r24, r1
     41e:	07 c0       	rjmp	.+14     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     420:	8a 81       	ldd	r24, Y+2	; 0x02
     422:	88 23       	and	r24, r24
     424:	51 f2       	breq	.-108    	; 0x3ba <useResponseAsSn+0xb8>
     426:	03 c0       	rjmp	.+6      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>

    /* strip away spaces at end */
    while ((tmc_serial_string.UnicodeString[len-1] == '_') && (len > 1))
     428:	12 30       	cpi	r17, 0x02	; 2
     42a:	60 f0       	brcs	.+24     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
        len--;
     42c:	11 50       	subi	r17, 0x01	; 1
            tmc_serial_string.UnicodeString[len++] = cpu_to_le16(c);
    }
    while ((len < TMC_MAX_SERIAL_STRING_LENGTH) && (!timedout) && (!eoi));

    /* strip away spaces at end */
    while ((tmc_serial_string.UnicodeString[len-1] == '_') && (len > 1))
     42e:	e1 2f       	mov	r30, r17
     430:	f0 e0       	ldi	r31, 0x00	; 0
     432:	ee 0f       	add	r30, r30
     434:	ff 1f       	adc	r31, r31
     436:	e6 57       	subi	r30, 0x76	; 118
     438:	fe 4f       	sbci	r31, 0xFE	; 254
     43a:	80 81       	ld	r24, Z
     43c:	91 81       	ldd	r25, Z+1	; 0x01
     43e:	8f 35       	cpi	r24, 0x5F	; 95
     440:	91 05       	cpc	r25, r1
     442:	91 f3       	breq	.-28     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
        len--;
		
    gpib_untalk_unlisten(is_timedout);
     444:	84 e2       	ldi	r24, 0x24	; 36
     446:	91 e0       	ldi	r25, 0x01	; 1
     448:	0e 94 8b 0a 	call	0x1516	; 0x1516 <gpib_untalk_unlisten>
        && tmc_serial_string.UnicodeString[2] >= '0'
        && tmc_serial_string.UnicodeString[2] <= '9')
        return false;
    */

    if (!timeout_val || !len)
     44c:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <timeout_val>
     450:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <timeout_val+0x1>
     454:	a0 91 87 01 	lds	r26, 0x0187	; 0x800187 <timeout_val+0x2>
     458:	b0 91 88 01 	lds	r27, 0x0188	; 0x800188 <timeout_val+0x3>
     45c:	89 2b       	or	r24, r25
     45e:	8a 2b       	or	r24, r26
     460:	8b 2b       	or	r24, r27
     462:	09 f4       	brne	.+2      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
     464:	94 cf       	rjmp	.-216    	; 0x38e <useResponseAsSn+0x8c>
     466:	11 23       	and	r17, r17
     468:	09 f4       	brne	.+2      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
     46a:	91 cf       	rjmp	.-222    	; 0x38e <useResponseAsSn+0x8c>
        return false;
    
    tmc_serial_string.Header.Size = len*2 + sizeof(USB_Descriptor_Header_t);
     46c:	1f 5f       	subi	r17, 0xFF	; 255
     46e:	11 0f       	add	r17, r17
     470:	10 93 8a 01 	sts	0x018A, r17	; 0x80018a <tmc_serial_string>

    return true;
     474:	81 e0       	ldi	r24, 0x01	; 1
}
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	1f 91       	pop	r17
     480:	0f 91       	pop	r16
     482:	ff 90       	pop	r15
     484:	ef 90       	pop	r14
     486:	08 95       	ret

00000488 <identifyGpibDevice>:

/* returns TRUE, if a string was received over GPIB */
bool identifyGpibDevice(void)
{
     488:	cf 93       	push	r28
    bool ok;

    ok = useResponseAsSn("SI\r\n");
     48a:	8b e1       	ldi	r24, 0x1B	; 27
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	39 df       	rcall	.-398    	; 0x302 <useResponseAsSn>

    if (!ok)
     490:	81 11       	cpse	r24, r1
     492:	0e c0       	rjmp	.+28     	; 0x4b0 <identifyGpibDevice+0x28>
        ok = useResponseAsSn("*IDN?\n");
     494:	80 e2       	ldi	r24, 0x20	; 32
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	34 df       	rcall	.-408    	; 0x302 <useResponseAsSn>

    if (!ok)
     49a:	81 11       	cpse	r24, r1
     49c:	09 c0       	rjmp	.+18     	; 0x4b0 <identifyGpibDevice+0x28>
        ok = useResponseAsSn("ID?\n");
     49e:	87 e2       	ldi	r24, 0x27	; 39
     4a0:	91 e0       	ldi	r25, 0x01	; 1
     4a2:	2f df       	rcall	.-418    	; 0x302 <useResponseAsSn>
     4a4:	c8 2f       	mov	r28, r24

    /* no gpib address found => use normal serial number */
	if (!ok)
     4a6:	81 11       	cpse	r24, r1
		TMC_SetInternalSerial(true);
     4a8:	03 c0       	rjmp	.+6      	; 0x4b0 <identifyGpibDevice+0x28>
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	50 de       	rcall	.-864    	; 0x14e <TMC_SetInternalSerial>
    return true;
}

/* returns TRUE, if a string was received over GPIB */
bool identifyGpibDevice(void)
{
     4ae:	01 c0       	rjmp	.+2      	; 0x4b2 <identifyGpibDevice+0x2a>

    /* no gpib address found => use normal serial number */
	if (!ok)
		TMC_SetInternalSerial(true);
	
	gpib_ren(false);
     4b0:	c1 e0       	ldi	r28, 0x01	; 1
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	d0 d6       	rcall	.+3488   	; 0x1256 <gpib_ren>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4b6:	2f ef       	ldi	r18, 0xFF	; 255
     4b8:	81 ee       	ldi	r24, 0xE1	; 225
     4ba:	94 e0       	ldi	r25, 0x04	; 4
     4bc:	21 50       	subi	r18, 0x01	; 1
     4be:	80 40       	sbci	r24, 0x00	; 0
     4c0:	90 40       	sbci	r25, 0x00	; 0
     4c2:	e1 f7       	brne	.-8      	; 0x4bc <identifyGpibDevice+0x34>
     4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <identifyGpibDevice+0x3e>
	_delay_ms(100);
	gpib_ren(true);
     4c6:	00 00       	nop
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	c5 d6       	rcall	.+3466   	; 0x1256 <gpib_ren>

	return ok;
}
     4cc:	8c 2f       	mov	r24, r28
     4ce:	cf 91       	pop	r28
     4d0:	08 95       	ret

000004d2 <check_bootloaderEntry>:
	SetGlobalInterruptMask(CurrentGlobalInt);
}

void check_bootloaderEntry(void)
{
	if ( !(PINB & (1<<2)) ) /* check if PB2 is LOW*/
     4d2:	1a 9b       	sbis	0x03, 2	; 3
	{
		Jump_To_Bootloader();
     4d4:	e8 ce       	rjmp	.-560    	; 0x2a6 <Jump_To_Bootloader>
     4d6:	08 95       	ret

000004d8 <eeprom_update_if_changed>:
	}
}

void eeprom_update_if_changed(uint16_t addr, uint8_t value)
{
     4d8:	1f 93       	push	r17
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	ec 01       	movw	r28, r24
     4e0:	16 2f       	mov	r17, r22
	uint8_t oldval;
	eeprom_busy_wait();
     4e2:	f9 99       	sbic	0x1f, 1	; 31
     4e4:	fe cf       	rjmp	.-4      	; 0x4e2 <eeprom_update_if_changed+0xa>
	oldval = eeprom_read_byte((uint8_t*)addr); /* read previous gpib address */
     4e6:	ce 01       	movw	r24, r28
     4e8:	0e 94 84 10 	call	0x2108	; 0x2108 <eeprom_read_byte>
	if (oldval != value)
     4ec:	81 17       	cp	r24, r17
     4ee:	49 f0       	breq	.+18     	; 0x502 <eeprom_update_if_changed+0x2a>
	{
		eeprom_busy_wait();
     4f0:	f9 99       	sbic	0x1f, 1	; 31
     4f2:	fe cf       	rjmp	.-4      	; 0x4f0 <eeprom_update_if_changed+0x18>
		eeprom_write_byte((uint8_t*)addr, value);		
     4f4:	61 2f       	mov	r22, r17
     4f6:	ce 01       	movw	r24, r28
	}
}
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	1f 91       	pop	r17
	eeprom_busy_wait();
	oldval = eeprom_read_byte((uint8_t*)addr); /* read previous gpib address */
	if (oldval != value)
	{
		eeprom_busy_wait();
		eeprom_write_byte((uint8_t*)addr, value);		
     4fe:	0c 94 8c 10 	jmp	0x2118	; 0x2118 <eeprom_write_byte>
	}
}
     502:	df 91       	pop	r29
     504:	cf 91       	pop	r28
     506:	1f 91       	pop	r17
     508:	08 95       	ret

0000050a <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     50a:	84 b7       	in	r24, 0x34	; 52
     50c:	87 7f       	andi	r24, 0xF7	; 247
     50e:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	f8 94       	cli
     514:	a8 95       	wdr
     516:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     51a:	88 61       	ori	r24, 0x18	; 24
     51c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     520:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     524:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	80 e8       	ldi	r24, 0x80	; 128
     52a:	0f b6       	in	r0, 0x3f	; 63
     52c:	f8 94       	cli
     52e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f8061>
     532:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f8061>
     536:	0f be       	out	0x3f, r0	; 63
	clock_prescale_set(clock_div_1);
	

	/* Hardware Initialization */
	//LEDs_Init();
	USB_Init();
     538:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <USB_Init>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     53c:	e0 ee       	ldi	r30, 0xE0	; 224
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	80 81       	ld	r24, Z
     542:	81 60       	ori	r24, 0x01	; 1
     544:	80 83       	st	Z, r24
	USB_Detach();

	
	/* update the TMC default serial number*/
	TMC_SetInternalSerial(false);
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	02 de       	rcall	.-1020   	; 0x14e <TMC_SetInternalSerial>
	
	/* LED to output and turn on */
	DDRF |= (1<<5);
     54a:	85 9a       	sbi	0x10, 5	; 16
	LED(1);
     54c:	8d 9a       	sbi	0x11, 5	; 17
     54e:	08 95       	ret

00000550 <EVENT_USB_Device_Connect>:
     550:	08 95       	ret

00000552 <EVENT_USB_Device_Disconnect>:

/** Event handler for the USB_Disconnect event. This indicates that the device is no longer connected to a host via
 *  the status LEDs and stops the USB management and CDC management tasks.
 */
void EVENT_USB_Device_Disconnect(void)
{
     552:	08 95       	ret

00000554 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     554:	42 e3       	ldi	r20, 0x32	; 50
     556:	61 ec       	ldi	r22, 0xC1	; 193
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Endpoint_ConfigureEndpoint_Prv>
     55e:	42 e3       	ldi	r20, 0x32	; 50
     560:	61 e8       	ldi	r22, 0x81	; 129
     562:	82 e0       	ldi	r24, 0x02	; 2
     564:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Endpoint_ConfigureEndpoint_Prv>
     568:	42 e3       	ldi	r20, 0x32	; 50
     56a:	60 e8       	ldi	r22, 0x80	; 128
     56c:	83 e0       	ldi	r24, 0x03	; 3
     56e:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <Endpoint_ConfigureEndpoint_Prv>

00000572 <InternalConfigSet>:
    INTERNAL_CONFIG_COUNT,
};

void InternalConfigSet(uint8_t key, uint8_t value)
{
    switch (key)
     572:	88 23       	and	r24, r24
     574:	19 f0       	breq	.+6      	; 0x57c <InternalConfigSet+0xa>
     576:	81 30       	cpi	r24, 0x01	; 1
     578:	21 f0       	breq	.+8      	; 0x582 <InternalConfigSet+0x10>
     57a:	08 95       	ret
	{
    case INTERNAL_CONFIG_AUTO_DETECT:
        eeprom_update_if_changed(104, value);
     57c:	88 e6       	ldi	r24, 0x68	; 104
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	ab cf       	rjmp	.-170    	; 0x4d8 <eeprom_update_if_changed>
        break;
    case INTERNAL_CONFIG_LINE_TERMINATION:
        switch (value)
     582:	61 30       	cpi	r22, 0x01	; 1
     584:	41 f0       	breq	.+16     	; 0x596 <InternalConfigSet+0x24>
     586:	62 30       	cpi	r22, 0x02	; 2
     588:	61 f4       	brne	.+24     	; 0x5a2 <InternalConfigSet+0x30>
        case 0x01: /* \n */
            eeprom_update_if_changed(105, '\n');
            gpib_set_readtermination('\n');
            break;
        case 0x02: /* \r */
            eeprom_update_if_changed(105, '\r');
     58a:	6d e0       	ldi	r22, 0x0D	; 13
     58c:	89 e6       	ldi	r24, 0x69	; 105
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	a3 df       	rcall	.-186    	; 0x4d8 <eeprom_update_if_changed>
            gpib_set_readtermination('\r');
     592:	8d e0       	ldi	r24, 0x0D	; 13
     594:	0b c0       	rjmp	.+22     	; 0x5ac <InternalConfigSet+0x3a>
        break;
    case INTERNAL_CONFIG_LINE_TERMINATION:
        switch (value)
        {
        case 0x01: /* \n */
            eeprom_update_if_changed(105, '\n');
     596:	6a e0       	ldi	r22, 0x0A	; 10
     598:	89 e6       	ldi	r24, 0x69	; 105
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	9d df       	rcall	.-198    	; 0x4d8 <eeprom_update_if_changed>
            gpib_set_readtermination('\n');
     59e:	8a e0       	ldi	r24, 0x0A	; 10
     5a0:	05 c0       	rjmp	.+10     	; 0x5ac <InternalConfigSet+0x3a>
        case 0x02: /* \r */
            eeprom_update_if_changed(105, '\r');
            gpib_set_readtermination('\r');
            break;
        default:
            eeprom_update_if_changed(105, '\0');
     5a2:	60 e0       	ldi	r22, 0x00	; 0
     5a4:	89 e6       	ldi	r24, 0x69	; 105
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	97 df       	rcall	.-210    	; 0x4d8 <eeprom_update_if_changed>
            gpib_set_readtermination('\0');
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	0c 94 e1 0a 	jmp	0x15c2	; 0x15c2 <gpib_set_readtermination>

000005b0 <InternalConfigGet>:
}

uint8_t InternalConfigGet(uint8_t key)
{
    uint8_t value = 0xff;
	eeprom_busy_wait();
     5b0:	f9 99       	sbic	0x1f, 1	; 31
     5b2:	fe cf       	rjmp	.-4      	; 0x5b0 <InternalConfigGet>

    switch (key)
     5b4:	88 23       	and	r24, r24
     5b6:	19 f0       	breq	.+6      	; 0x5be <InternalConfigGet+0xe>
     5b8:	81 30       	cpi	r24, 0x01	; 1
     5ba:	29 f0       	breq	.+10     	; 0x5c6 <InternalConfigGet+0x16>
     5bc:	10 c0       	rjmp	.+32     	; 0x5de <InternalConfigGet+0x2e>
	{
    case INTERNAL_CONFIG_AUTO_DETECT:
        value = eeprom_read_byte((uint8_t*)104);
     5be:	88 e6       	ldi	r24, 0x68	; 104
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	0c 94 84 10 	jmp	0x2108	; 0x2108 <eeprom_read_byte>
        break;

    case INTERNAL_CONFIG_LINE_TERMINATION:
        value = eeprom_read_byte((uint8_t*)105);
     5c6:	89 e6       	ldi	r24, 0x69	; 105
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	0e 94 84 10 	call	0x2108	; 0x2108 <eeprom_read_byte>
        switch (value)
     5ce:	8a 30       	cpi	r24, 0x0A	; 10
     5d0:	41 f0       	breq	.+16     	; 0x5e2 <InternalConfigGet+0x32>
     5d2:	8d 30       	cpi	r24, 0x0D	; 13
     5d4:	11 f4       	brne	.+4      	; 0x5da <InternalConfigGet+0x2a>
        {
        case '\n':
            value = 1;
            break;
        case '\r':
            value = 2;
     5d6:	82 e0       	ldi	r24, 0x02	; 2
     5d8:	08 95       	ret
            break;
        default:
            value = 0;
     5da:	80 e0       	ldi	r24, 0x00	; 0
            break;
     5dc:	08 95       	ret
	}
}

uint8_t InternalConfigGet(uint8_t key)
{
    uint8_t value = 0xff;
     5de:	8f ef       	ldi	r24, 0xFF	; 255
     5e0:	08 95       	ret
    case INTERNAL_CONFIG_LINE_TERMINATION:
        value = eeprom_read_byte((uint8_t*)105);
        switch (value)
        {
        case '\n':
            value = 1;
     5e2:	81 e0       	ldi	r24, 0x01	; 1
        }
        break;
	}

    return value;
}
     5e4:	08 95       	ret

000005e6 <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
     5e6:	cf 93       	push	r28
	uint8_t TMCRequestStatus = TMC_STATUS_SUCCESS;
	uint8_t btag, statusReg;
	
	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_TYPE) == REQTYPE_VENDOR
     5e8:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <USB_ControlRequest>
     5ec:	89 2f       	mov	r24, r25
     5ee:	80 76       	andi	r24, 0x60	; 96
     5f0:	80 34       	cpi	r24, 0x40	; 64
     5f2:	09 f0       	breq	.+2      	; 0x5f6 <EVENT_USB_Device_ControlRequest+0x10>
     5f4:	49 c0       	rjmp	.+146    	; 0x688 <EVENT_USB_Device_ControlRequest+0xa2>
        && (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_DEVICE)
     5f6:	89 2f       	mov	r24, r25
     5f8:	8f 71       	andi	r24, 0x1F	; 31
     5fa:	09 f0       	breq	.+2      	; 0x5fe <EVENT_USB_Device_ControlRequest+0x18>
     5fc:	45 c0       	rjmp	.+138    	; 0x688 <EVENT_USB_Device_ControlRequest+0xa2>
    {
        if (USB_ControlRequest.bRequest == 0
     5fe:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <USB_ControlRequest+0x1>
     602:	81 11       	cpse	r24, r1
     604:	41 c0       	rjmp	.+130    	; 0x688 <EVENT_USB_Device_ControlRequest+0xa2>
            && USB_ControlRequest.wIndex < INTERNAL_CONFIG_COUNT) {
     606:	20 91 f9 01 	lds	r18, 0x01F9	; 0x8001f9 <USB_ControlRequest+0x4>
     60a:	30 91 fa 01 	lds	r19, 0x01FA	; 0x8001fa <USB_ControlRequest+0x5>
     60e:	22 30       	cpi	r18, 0x02	; 2
     610:	31 05       	cpc	r19, r1
     612:	d0 f5       	brcc	.+116    	; 0x688 <EVENT_USB_Device_ControlRequest+0xa2>

            if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_HOSTTODEVICE
     614:	97 fd       	sbrc	r25, 7
     616:	11 c0       	rjmp	.+34     	; 0x63a <EVENT_USB_Device_ControlRequest+0x54>
                && USB_ControlRequest.wLength == 0)
     618:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <USB_ControlRequest+0x6>
     61c:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <USB_ControlRequest+0x7>
     620:	89 2b       	or	r24, r25
     622:	59 f4       	brne	.+22     	; 0x63a <EVENT_USB_Device_ControlRequest+0x54>
            {
                InternalConfigSet(USB_ControlRequest.wIndex, USB_ControlRequest.wValue);
     624:	60 91 f7 01 	lds	r22, 0x01F7	; 0x8001f7 <USB_ControlRequest+0x2>
     628:	82 2f       	mov	r24, r18
     62a:	a3 df       	rcall	.-186    	; 0x572 <InternalConfigSet>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     62c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     630:	87 7f       	andi	r24, 0xF7	; 247
     632:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
     636:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <Endpoint_ClearStatusStage>
            }

            if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST
     63a:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <USB_ControlRequest>
     63e:	87 ff       	sbrs	r24, 7
     640:	23 c0       	rjmp	.+70     	; 0x688 <EVENT_USB_Device_ControlRequest+0xa2>
                && USB_ControlRequest.wLength == 1)
     642:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <USB_ControlRequest+0x6>
     646:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <USB_ControlRequest+0x7>
     64a:	01 97       	sbiw	r24, 0x01	; 1
     64c:	e9 f4       	brne	.+58     	; 0x688 <EVENT_USB_Device_ControlRequest+0xa2>
            {
                uint8_t value = InternalConfigGet(USB_ControlRequest.wIndex);
     64e:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <USB_ControlRequest+0x4>
     652:	ae df       	rcall	.-164    	; 0x5b0 <InternalConfigGet>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
     654:	40 e5       	ldi	r20, 0x50	; 80
     656:	53 ec       	ldi	r21, 0xC3	; 195
     658:	60 e0       	ldi	r22, 0x00	; 0
     65a:	70 e0       	ldi	r23, 0x00	; 0
     65c:	40 93 85 01 	sts	0x0185, r20	; 0x800185 <timeout_val>
     660:	50 93 86 01 	sts	0x0186, r21	; 0x800186 <timeout_val+0x1>
     664:	60 93 87 01 	sts	0x0187, r22	; 0x800187 <timeout_val+0x2>
     668:	70 93 88 01 	sts	0x0188, r23	; 0x800188 <timeout_val+0x3>
     66c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     670:	97 7f       	andi	r25, 0xF7	; 247
     672:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     676:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     67a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     67e:	8e 77       	andi	r24, 0x7E	; 126
     680:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
                /* 0.5s timeout*/
                timeout_start(50000);
                Endpoint_ClearSETUP();
                Endpoint_Write_8(value);
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
     684:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <Endpoint_ClearStatusStage>
            }
        }
    }
	
	if ((USB_ControlRequest.wIndex == INTERFACE_ID_TestAndMeasurement
     688:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <USB_ControlRequest+0x4>
     68c:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <USB_ControlRequest+0x5>
     690:	00 97       	sbiw	r24, 0x00	; 0
     692:	39 f4       	brne	.+14     	; 0x6a2 <EVENT_USB_Device_ControlRequest+0xbc>
         && (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_INTERFACE)
     694:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <USB_ControlRequest>
     698:	8f 71       	andi	r24, 0x1F	; 31
     69a:	81 30       	cpi	r24, 0x01	; 1
     69c:	09 f0       	breq	.+2      	; 0x6a0 <EVENT_USB_Device_ControlRequest+0xba>
     69e:	7d c1       	rjmp	.+762    	; 0x99a <EVENT_USB_Device_ControlRequest+0x3b4>
     6a0:	0c c0       	rjmp	.+24     	; 0x6ba <EVENT_USB_Device_ControlRequest+0xd4>
        || ((USB_ControlRequest.wIndex == TMC_IN_EPADDR || USB_ControlRequest.wIndex == TMC_OUT_EPADDR)
     6a2:	82 38       	cpi	r24, 0x82	; 130
     6a4:	91 05       	cpc	r25, r1
     6a6:	19 f0       	breq	.+6      	; 0x6ae <EVENT_USB_Device_ControlRequest+0xc8>
     6a8:	03 97       	sbiw	r24, 0x03	; 3
     6aa:	09 f0       	breq	.+2      	; 0x6ae <EVENT_USB_Device_ControlRequest+0xc8>
     6ac:	76 c1       	rjmp	.+748    	; 0x99a <EVENT_USB_Device_ControlRequest+0x3b4>
          && (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_ENDPOINT))
     6ae:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <USB_ControlRequest>
     6b2:	8f 71       	andi	r24, 0x1F	; 31
     6b4:	82 30       	cpi	r24, 0x02	; 2
     6b6:	09 f0       	breq	.+2      	; 0x6ba <EVENT_USB_Device_ControlRequest+0xd4>
     6b8:	70 c1       	rjmp	.+736    	; 0x99a <EVENT_USB_Device_ControlRequest+0x3b4>
	{
		/* Process TMC specific control requests */
		switch (USB_ControlRequest.bRequest)
     6ba:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <USB_ControlRequest+0x1>
     6be:	86 30       	cpi	r24, 0x06	; 6
     6c0:	09 f4       	brne	.+2      	; 0x6c4 <EVENT_USB_Device_ControlRequest+0xde>
     6c2:	fc c0       	rjmp	.+504    	; 0x8bc <EVENT_USB_Device_ControlRequest+0x2d6>
     6c4:	90 f4       	brcc	.+36     	; 0x6ea <EVENT_USB_Device_ControlRequest+0x104>
     6c6:	83 30       	cpi	r24, 0x03	; 3
     6c8:	09 f4       	brne	.+2      	; 0x6cc <EVENT_USB_Device_ControlRequest+0xe6>
     6ca:	8c c0       	rjmp	.+280    	; 0x7e4 <EVENT_USB_Device_ControlRequest+0x1fe>
     6cc:	38 f4       	brcc	.+14     	; 0x6dc <EVENT_USB_Device_ControlRequest+0xf6>
     6ce:	81 30       	cpi	r24, 0x01	; 1
     6d0:	09 f4       	brne	.+2      	; 0x6d4 <EVENT_USB_Device_ControlRequest+0xee>
     6d2:	59 c0       	rjmp	.+178    	; 0x786 <EVENT_USB_Device_ControlRequest+0x1a0>
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	09 f4       	brne	.+2      	; 0x6da <EVENT_USB_Device_ControlRequest+0xf4>
     6d8:	79 c0       	rjmp	.+242    	; 0x7cc <EVENT_USB_Device_ControlRequest+0x1e6>
     6da:	5f c1       	rjmp	.+702    	; 0x99a <EVENT_USB_Device_ControlRequest+0x3b4>
     6dc:	84 30       	cpi	r24, 0x04	; 4
     6de:	09 f4       	brne	.+2      	; 0x6e2 <EVENT_USB_Device_ControlRequest+0xfc>
     6e0:	a8 c0       	rjmp	.+336    	; 0x832 <EVENT_USB_Device_ControlRequest+0x24c>
     6e2:	85 30       	cpi	r24, 0x05	; 5
     6e4:	09 f4       	brne	.+2      	; 0x6e8 <EVENT_USB_Device_ControlRequest+0x102>
     6e6:	d5 c0       	rjmp	.+426    	; 0x892 <EVENT_USB_Device_ControlRequest+0x2ac>
     6e8:	58 c1       	rjmp	.+688    	; 0x99a <EVENT_USB_Device_ControlRequest+0x3b4>
     6ea:	80 38       	cpi	r24, 0x80	; 128
     6ec:	71 f1       	breq	.+92     	; 0x74a <EVENT_USB_Device_ControlRequest+0x164>
     6ee:	18 f5       	brcc	.+70     	; 0x736 <EVENT_USB_Device_ControlRequest+0x150>
     6f0:	87 30       	cpi	r24, 0x07	; 7
     6f2:	09 f4       	brne	.+2      	; 0x6f6 <EVENT_USB_Device_ControlRequest+0x110>
     6f4:	05 c1       	rjmp	.+522    	; 0x900 <EVENT_USB_Device_ControlRequest+0x31a>
     6f6:	80 34       	cpi	r24, 0x40	; 64
     6f8:	09 f0       	breq	.+2      	; 0x6fc <EVENT_USB_Device_ControlRequest+0x116>
     6fa:	4f c1       	rjmp	.+670    	; 0x99a <EVENT_USB_Device_ControlRequest+0x3b4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     6fc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     700:	87 7f       	andi	r24, 0xF7	; 247
     702:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     706:	c1 e0       	ldi	r28, 0x01	; 1
     708:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     70c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     710:	8e 77       	andi	r24, 0x7E	; 126
     712:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
				Endpoint_ClearSETUP();

				/* USBTMC Status response (1 Byte) */
				Endpoint_Write_8(TMC_STATUS_SUCCESS);
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     716:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <Endpoint_ClearStatusStage>
				
				LED(0);
     71a:	8d 98       	cbi	0x11, 5	; 17
     71c:	2f ef       	ldi	r18, 0xFF	; 255
     71e:	84 e3       	ldi	r24, 0x34	; 52
     720:	9c e0       	ldi	r25, 0x0C	; 12
     722:	21 50       	subi	r18, 0x01	; 1
     724:	80 40       	sbci	r24, 0x00	; 0
     726:	90 40       	sbci	r25, 0x00	; 0
     728:	e1 f7       	brne	.-8      	; 0x722 <EVENT_USB_Device_ControlRequest+0x13c>
     72a:	00 c0       	rjmp	.+0      	; 0x72c <EVENT_USB_Device_ControlRequest+0x146>
     72c:	00 00       	nop
				_delay_ms(250);
				LED(1);
     72e:	8d 9a       	sbi	0x11, 5	; 17
				
				s_nextwrite_mightbeparameterset = true;
     730:	c0 93 36 01 	sts	0x0136, r28	; 0x800136 <s_nextwrite_mightbeparameterset>
				break;
     734:	32 c1       	rjmp	.+612    	; 0x99a <EVENT_USB_Device_ControlRequest+0x3b4>
         && (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_INTERFACE)
        || ((USB_ControlRequest.wIndex == TMC_IN_EPADDR || USB_ControlRequest.wIndex == TMC_OUT_EPADDR)
          && (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_ENDPOINT))
	{
		/* Process TMC specific control requests */
		switch (USB_ControlRequest.bRequest)
     736:	81 3a       	cpi	r24, 0xA1	; 161
     738:	09 f4       	brne	.+2      	; 0x73c <EVENT_USB_Device_ControlRequest+0x156>
     73a:	0e c1       	rjmp	.+540    	; 0x958 <EVENT_USB_Device_ControlRequest+0x372>
     73c:	82 3a       	cpi	r24, 0xA2	; 162
     73e:	09 f4       	brne	.+2      	; 0x742 <EVENT_USB_Device_ControlRequest+0x15c>
     740:	fb c0       	rjmp	.+502    	; 0x938 <EVENT_USB_Device_ControlRequest+0x352>
     742:	80 3a       	cpi	r24, 0xA0	; 160
     744:	09 f0       	breq	.+2      	; 0x748 <EVENT_USB_Device_ControlRequest+0x162>
     746:	29 c1       	rjmp	.+594    	; 0x99a <EVENT_USB_Device_ControlRequest+0x3b4>
     748:	f0 c0       	rjmp	.+480    	; 0x92a <EVENT_USB_Device_ControlRequest+0x344>
		{
			case Req_ReadStatusByte:
			
//Jump_To_Bootloader();			
				btag = USB_ControlRequest.wValue;
     74a:	c0 91 f7 01 	lds	r28, 0x01F7	; 0x8001f7 <USB_ControlRequest+0x2>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
     74e:	80 e5       	ldi	r24, 0x50	; 80
     750:	93 ec       	ldi	r25, 0xC3	; 195
     752:	a0 e0       	ldi	r26, 0x00	; 0
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <timeout_val>
     75a:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <timeout_val+0x1>
     75e:	a0 93 87 01 	sts	0x0187, r26	; 0x800187 <timeout_val+0x2>
     762:	b0 93 88 01 	sts	0x0188, r27	; 0x800188 <timeout_val+0x3>
			
//Jump_To_Bootloader();			
				btag = USB_ControlRequest.wValue;

				timeout_start(50000); /* 0.5s timeout*/
				statusReg =  gpib_readStatusByte(gpib_addr, is_timedout);
     766:	64 e2       	ldi	r22, 0x24	; 36
     768:	71 e0       	ldi	r23, 0x01	; 1
     76a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     76e:	92 d6       	rcall	.+3364   	; 0x1494 <gpib_readStatusByte>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     770:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     774:	97 7f       	andi	r25, 0xF7	; 247
     776:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     77a:	91 e0       	ldi	r25, 0x01	; 1
     77c:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     780:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     784:	00 c1       	rjmp	.+512    	; 0x986 <EVENT_USB_Device_ControlRequest+0x3a0>

	
				
				break;
			case Req_InitiateAbortBulkOut:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
     786:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <USB_ControlRequest>
     78a:	92 3a       	cpi	r25, 0xA2	; 162
     78c:	09 f0       	breq	.+2      	; 0x790 <EVENT_USB_Device_ControlRequest+0x1aa>
     78e:	05 c1       	rjmp	.+522    	; 0x99a <EVENT_USB_Device_ControlRequest+0x3b4>
				{
					/* Check that no split transaction is already in progress and the data transfer tag is valid */
					if (RequestInProgress != 0)
     790:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <RequestInProgress>
     794:	91 11       	cpse	r25, r1
     796:	0e c0       	rjmp	.+28     	; 0x7b4 <EVENT_USB_Device_ControlRequest+0x1ce>
					{
						TMCRequestStatus = TMC_STATUS_SPLIT_IN_PROGRESS;
					}
					else if (USB_ControlRequest.wValue != CurrentTransferTag)
     798:	20 91 79 01 	lds	r18, 0x0179	; 0x800179 <CurrentTransferTag>
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	40 91 f7 01 	lds	r20, 0x01F7	; 0x8001f7 <USB_ControlRequest+0x2>
     7a2:	50 91 f8 01 	lds	r21, 0x01F8	; 0x8001f8 <USB_ControlRequest+0x3>
     7a6:	42 17       	cp	r20, r18
     7a8:	53 07       	cpc	r21, r19
     7aa:	31 f4       	brne	.+12     	; 0x7b8 <EVENT_USB_Device_ControlRequest+0x1d2>
					{
						/* Indicate that all in-progress/pending data OUT requests should be aborted */
						IsTMCBulkOUTReset = true;

						/* Save the split request for later checking when a new request is received */
						RequestInProgress = Req_InitiateAbortBulkOut;
     7ac:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <RequestInProgress>
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	uint8_t TMCRequestStatus = TMC_STATUS_SUCCESS;
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	03 c0       	rjmp	.+6      	; 0x7ba <EVENT_USB_Device_ControlRequest+0x1d4>
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
				{
					/* Check that no split transaction is already in progress and the data transfer tag is valid */
					if (RequestInProgress != 0)
					{
						TMCRequestStatus = TMC_STATUS_SPLIT_IN_PROGRESS;
     7b4:	83 e8       	ldi	r24, 0x83	; 131
     7b6:	01 c0       	rjmp	.+2      	; 0x7ba <EVENT_USB_Device_ControlRequest+0x1d4>
					}
					else if (USB_ControlRequest.wValue != CurrentTransferTag)
					{
						TMCRequestStatus = TMC_STATUS_TRANSFER_NOT_IN_PROGRESS;
     7b8:	81 e8       	ldi	r24, 0x81	; 129
						IsTMCBulkOUTReset = true;

						/* Save the split request for later checking when a new request is received */
						RequestInProgress = Req_InitiateAbortBulkOut;
					}
IsTMCBulkOUTReset = true;
     7ba:	91 e0       	ldi	r25, 0x01	; 1
     7bc:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <IsTMCBulkOUTReset>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     7c0:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     7c4:	97 7f       	andi	r25, 0xF7	; 247
     7c6:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     7ca:	dd c0       	rjmp	.+442    	; 0x986 <EVENT_USB_Device_ControlRequest+0x3a0>
//Endpoint_ResetEndpoint(TMC_IN_EPADDR);
				}

				break;
			case Req_CheckAbortBulkOutStatus:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
     7cc:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <USB_ControlRequest>
     7d0:	82 3a       	cpi	r24, 0xA2	; 162
     7d2:	09 f0       	breq	.+2      	; 0x7d6 <EVENT_USB_Device_ControlRequest+0x1f0>
     7d4:	e2 c0       	rjmp	.+452    	; 0x99a <EVENT_USB_Device_ControlRequest+0x3b4>
				{
					/* Check that an ABORT BULK OUT transaction has been requested and that the request has completed */
					if (RequestInProgress != Req_InitiateAbortBulkOut)
     7d6:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <RequestInProgress>
     7da:	81 30       	cpi	r24, 0x01	; 1
     7dc:	d9 f5       	brne	.+118    	; 0x854 <EVENT_USB_Device_ControlRequest+0x26e>
					  TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
					else if (IsTMCBulkOUTReset)
     7de:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <IsTMCBulkOUTReset>
     7e2:	32 c0       	rjmp	.+100    	; 0x848 <EVENT_USB_Device_ControlRequest+0x262>
					Endpoint_ClearStatusStage();
				}

				break;
			case Req_InitiateAbortBulkIn:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
     7e4:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <USB_ControlRequest>
     7e8:	92 3a       	cpi	r25, 0xA2	; 162
     7ea:	09 f0       	breq	.+2      	; 0x7ee <EVENT_USB_Device_ControlRequest+0x208>
     7ec:	d6 c0       	rjmp	.+428    	; 0x99a <EVENT_USB_Device_ControlRequest+0x3b4>
				{
					/* Check that no split transaction is already in progress and the data transfer tag is valid */
					if (RequestInProgress != 0)
     7ee:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <RequestInProgress>
     7f2:	91 11       	cpse	r25, r1
     7f4:	0e c0       	rjmp	.+28     	; 0x812 <EVENT_USB_Device_ControlRequest+0x22c>
					{
						TMCRequestStatus = TMC_STATUS_SPLIT_IN_PROGRESS;
					}
					else if (USB_ControlRequest.wValue != CurrentTransferTag)
     7f6:	20 91 79 01 	lds	r18, 0x0179	; 0x800179 <CurrentTransferTag>
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	40 91 f7 01 	lds	r20, 0x01F7	; 0x8001f7 <USB_ControlRequest+0x2>
     800:	50 91 f8 01 	lds	r21, 0x01F8	; 0x8001f8 <USB_ControlRequest+0x3>
     804:	42 17       	cp	r20, r18
     806:	53 07       	cpc	r21, r19
     808:	31 f4       	brne	.+12     	; 0x816 <EVENT_USB_Device_ControlRequest+0x230>
					{
						/* Indicate that all in-progress/pending data IN requests should be aborted */
						IsTMCBulkINReset = true;

						/* Save the split request for later checking when a new request is received */
						RequestInProgress = Req_InitiateAbortBulkIn;
     80a:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <RequestInProgress>
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	uint8_t TMCRequestStatus = TMC_STATUS_SUCCESS;
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	03 c0       	rjmp	.+6      	; 0x818 <EVENT_USB_Device_ControlRequest+0x232>
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
				{
					/* Check that no split transaction is already in progress and the data transfer tag is valid */
					if (RequestInProgress != 0)
					{
						TMCRequestStatus = TMC_STATUS_SPLIT_IN_PROGRESS;
     812:	83 e8       	ldi	r24, 0x83	; 131
     814:	01 c0       	rjmp	.+2      	; 0x818 <EVENT_USB_Device_ControlRequest+0x232>
					}
					else if (USB_ControlRequest.wValue != CurrentTransferTag)
					{
						TMCRequestStatus = TMC_STATUS_TRANSFER_NOT_IN_PROGRESS;
     816:	81 e8       	ldi	r24, 0x81	; 129
						IsTMCBulkINReset = true;

						/* Save the split request for later checking when a new request is received */
						RequestInProgress = Req_InitiateAbortBulkIn;
					}
					IsTMCBulkINReset = true;
     818:	91 e0       	ldi	r25, 0x01	; 1
     81a:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <IsTMCBulkINReset>
     81e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     822:	97 7f       	andi	r25, 0xF7	; 247
     824:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     828:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>

					Endpoint_ClearSETUP();

					/* Write the request response bytes */
					Endpoint_Write_8(TMCRequestStatus);
					Endpoint_Write_8(CurrentTransferTag);
     82c:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <CurrentTransferTag>
     830:	aa c0       	rjmp	.+340    	; 0x986 <EVENT_USB_Device_ControlRequest+0x3a0>
#endif
				}

				break;
			case Req_CheckAbortBulkInStatus:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
     832:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <USB_ControlRequest>
     836:	82 3a       	cpi	r24, 0xA2	; 162
     838:	09 f0       	breq	.+2      	; 0x83c <EVENT_USB_Device_ControlRequest+0x256>
     83a:	af c0       	rjmp	.+350    	; 0x99a <EVENT_USB_Device_ControlRequest+0x3b4>
				{
					/* Check that an ABORT BULK IN transaction has been requested and that the request has completed */
					if (RequestInProgress != Req_InitiateAbortBulkIn)
     83c:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <RequestInProgress>
     840:	83 30       	cpi	r24, 0x03	; 3
     842:	41 f4       	brne	.+16     	; 0x854 <EVENT_USB_Device_ControlRequest+0x26e>
					  TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
					else if (IsTMCBulkINReset)
     844:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <IsTMCBulkINReset>
     848:	81 11       	cpse	r24, r1
     84a:	06 c0       	rjmp	.+12     	; 0x858 <EVENT_USB_Device_ControlRequest+0x272>
					  TMCRequestStatus = TMC_STATUS_PENDING;
					else
					  RequestInProgress = 0;
     84c:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <RequestInProgress>
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	uint8_t TMCRequestStatus = TMC_STATUS_SUCCESS;
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	03 c0       	rjmp	.+6      	; 0x85a <EVENT_USB_Device_ControlRequest+0x274>
			case Req_CheckAbortBulkInStatus:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
				{
					/* Check that an ABORT BULK IN transaction has been requested and that the request has completed */
					if (RequestInProgress != Req_InitiateAbortBulkIn)
					  TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
     854:	82 e8       	ldi	r24, 0x82	; 130
     856:	01 c0       	rjmp	.+2      	; 0x85a <EVENT_USB_Device_ControlRequest+0x274>
					else if (IsTMCBulkINReset)
					  TMCRequestStatus = TMC_STATUS_PENDING;
     858:	82 e0       	ldi	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     85a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     85e:	97 7f       	andi	r25, 0xF7	; 247
     860:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     864:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     868:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				UEDATX = (Data >> 8);
     86c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
					Endpoint_ClearSETUP();

					/* Write the request response bytes */
					Endpoint_Write_8(TMCRequestStatus);
					Endpoint_Write_16_LE(0);
					Endpoint_Write_32_LE(LastTransferLength);
     870:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <LastTransferLength>
     874:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <LastTransferLength+0x1>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     878:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				UEDATX = (Data >> 8);
     87c:	a0 e0       	ldi	r26, 0x00	; 0
     87e:	b0 e0       	ldi	r27, 0x00	; 0
     880:	89 2f       	mov	r24, r25
     882:	9a 2f       	mov	r25, r26
     884:	ab 2f       	mov	r26, r27
     886:	bb 27       	eor	r27, r27
     888:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				UEDATX = (Data >> 16);
     88c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     890:	34 c0       	rjmp	.+104    	; 0x8fa <EVENT_USB_Device_ControlRequest+0x314>
					Endpoint_ClearStatusStage();
				}

				break;
			case Req_InitiateClear:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     892:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <USB_ControlRequest>
     896:	91 3a       	cpi	r25, 0xA1	; 161
     898:	09 f0       	breq	.+2      	; 0x89c <EVENT_USB_Device_ControlRequest+0x2b6>
     89a:	7f c0       	rjmp	.+254    	; 0x99a <EVENT_USB_Device_ControlRequest+0x3b4>
				{
					/* Check that no split transaction is already in progress */
					if (RequestInProgress != 0)
     89c:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <RequestInProgress>
     8a0:	99 23       	and	r25, r25
     8a2:	21 f0       	breq	.+8      	; 0x8ac <EVENT_USB_Device_ControlRequest+0x2c6>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     8a4:	83 e8       	ldi	r24, 0x83	; 131
     8a6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     8aa:	67 c0       	rjmp	.+206    	; 0x97a <EVENT_USB_Device_ControlRequest+0x394>
						Endpoint_Write_8(TMC_STATUS_SPLIT_IN_PROGRESS);
					}
					else
					{
						/* Indicate that all in-progress/pending data IN and OUT requests should be aborted */
						IsTMCBulkINReset  = true;
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <IsTMCBulkINReset>
						IsTMCBulkOUTReset = true;
     8b2:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <IsTMCBulkOUTReset>

						/* Save the split request for later checking when a new request is received */
						RequestInProgress = Req_InitiateClear;
     8b6:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <RequestInProgress>
     8ba:	5f c0       	rjmp	.+190    	; 0x97a <EVENT_USB_Device_ControlRequest+0x394>
					Endpoint_ClearStatusStage();
				}

				break;
			case Req_CheckClearStatus:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     8bc:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <USB_ControlRequest>
     8c0:	81 3a       	cpi	r24, 0xA1	; 161
     8c2:	09 f0       	breq	.+2      	; 0x8c6 <EVENT_USB_Device_ControlRequest+0x2e0>
     8c4:	6a c0       	rjmp	.+212    	; 0x99a <EVENT_USB_Device_ControlRequest+0x3b4>
				{
					/* Check that a CLEAR transaction has been requested and that the request has completed */
					if (RequestInProgress != Req_InitiateClear)
     8c6:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <RequestInProgress>
     8ca:	85 30       	cpi	r24, 0x05	; 5
     8cc:	61 f4       	brne	.+24     	; 0x8e6 <EVENT_USB_Device_ControlRequest+0x300>
						TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
					else if (IsTMCBulkINReset || IsTMCBulkOUTReset)
     8ce:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <IsTMCBulkINReset>
     8d2:	81 11       	cpse	r24, r1
     8d4:	0a c0       	rjmp	.+20     	; 0x8ea <EVENT_USB_Device_ControlRequest+0x304>
     8d6:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <IsTMCBulkOUTReset>
     8da:	81 11       	cpse	r24, r1
     8dc:	06 c0       	rjmp	.+12     	; 0x8ea <EVENT_USB_Device_ControlRequest+0x304>
						TMCRequestStatus = TMC_STATUS_PENDING;
					else
						RequestInProgress = 0;
     8de:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <RequestInProgress>
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	uint8_t TMCRequestStatus = TMC_STATUS_SUCCESS;
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	03 c0       	rjmp	.+6      	; 0x8ec <EVENT_USB_Device_ControlRequest+0x306>
			case Req_CheckClearStatus:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
				{
					/* Check that a CLEAR transaction has been requested and that the request has completed */
					if (RequestInProgress != Req_InitiateClear)
						TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
     8e6:	82 e8       	ldi	r24, 0x82	; 130
     8e8:	01 c0       	rjmp	.+2      	; 0x8ec <EVENT_USB_Device_ControlRequest+0x306>
					else if (IsTMCBulkINReset || IsTMCBulkOUTReset)
						TMCRequestStatus = TMC_STATUS_PENDING;
     8ea:	82 e0       	ldi	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     8ec:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     8f0:	97 7f       	andi	r25, 0xF7	; 247
     8f2:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     8f6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     8fa:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     8fe:	45 c0       	rjmp	.+138    	; 0x98a <EVENT_USB_Device_ControlRequest+0x3a4>
					Endpoint_ClearStatusStage();
				}

				break;
			case Req_GetCapabilities:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     900:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <USB_ControlRequest>
     904:	81 3a       	cpi	r24, 0xA1	; 161
     906:	09 f0       	breq	.+2      	; 0x90a <EVENT_USB_Device_ControlRequest+0x324>
     908:	48 c0       	rjmp	.+144    	; 0x99a <EVENT_USB_Device_ControlRequest+0x3b4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     90a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     90e:	87 7f       	andi	r24, 0xF7	; 247
     910:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
				{
					Endpoint_ClearSETUP();

					/* Write the device capabilities to the control endpoint */
					Endpoint_Write_Control_Stream_LE(&Capabilities, sizeof(TMC_Capabilities_t));
     914:	68 e1       	ldi	r22, 0x18	; 24
     916:	70 e0       	ldi	r23, 0x00	; 0
     918:	83 e0       	ldi	r24, 0x03	; 3
     91a:	91 e0       	ldi	r25, 0x01	; 1
     91c:	4a d7       	rcall	.+3732   	; 0x17b2 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     91e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     922:	8b 77       	andi	r24, 0x7B	; 123
     924:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     928:	38 c0       	rjmp	.+112    	; 0x99a <EVENT_USB_Device_ControlRequest+0x3b4>
				
				s_nextwrite_mightbeparameterset = true;
				break;

			case Req_RenControl:
				if ((USB_ControlRequest.wValue & 0xff) == 1)
     92a:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <USB_ControlRequest+0x2>
     92e:	81 30       	cpi	r24, 0x01	; 1
				{
					gpib_ren(1);
				}
				else
				{
					gpib_ren(0);
     930:	09 f0       	breq	.+2      	; 0x934 <EVENT_USB_Device_ControlRequest+0x34e>
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	90 d4       	rcall	.+2336   	; 0x1256 <gpib_ren>
     936:	21 c0       	rjmp	.+66     	; 0x97a <EVENT_USB_Device_ControlRequest+0x394>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
     938:	80 e5       	ldi	r24, 0x50	; 80
     93a:	93 ec       	ldi	r25, 0xC3	; 195
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e0       	ldi	r27, 0x00	; 0
     940:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <timeout_val>
     944:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <timeout_val+0x1>
     948:	a0 93 87 01 	sts	0x0187, r26	; 0x800187 <timeout_val+0x2>
     94c:	b0 93 88 01 	sts	0x0188, r27	; 0x800188 <timeout_val+0x3>
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
				break;
			case Req_LocalLockout:
				timeout_start(50000); /* 0.5s timeout*/
				gpib_localLockout(is_timedout);
     950:	84 e2       	ldi	r24, 0x24	; 36
     952:	91 e0       	ldi	r25, 0x01	; 1
     954:	4a d5       	rcall	.+2708   	; 0x13ea <gpib_localLockout>
     956:	11 c0       	rjmp	.+34     	; 0x97a <EVENT_USB_Device_ControlRequest+0x394>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
     958:	80 e5       	ldi	r24, 0x50	; 80
     95a:	93 ec       	ldi	r25, 0xC3	; 195
     95c:	a0 e0       	ldi	r26, 0x00	; 0
     95e:	b0 e0       	ldi	r27, 0x00	; 0
     960:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <timeout_val>
     964:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <timeout_val+0x1>
     968:	a0 93 87 01 	sts	0x0187, r26	; 0x800187 <timeout_val+0x2>
     96c:	b0 93 88 01 	sts	0x0188, r27	; 0x800188 <timeout_val+0x3>
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
				break;
			case Req_GoToLocal:
				timeout_start(50000); /* 0.5s timeout*/
				gpib_gotoLocal(gpib_addr, is_timedout);
     970:	64 e2       	ldi	r22, 0x24	; 36
     972:	71 e0       	ldi	r23, 0x01	; 1
     974:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     978:	24 d5       	rcall	.+2632   	; 0x13c2 <gpib_gotoLocal>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     97a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     97e:	87 7f       	andi	r24, 0xF7	; 247
     980:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     98a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     98e:	8e 77       	andi	r24, 0x7E	; 126
     990:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
				break;
		}
	}
}
     994:	cf 91       	pop	r28
				
				Endpoint_ClearSETUP();
				/* USBTMC Status response (1 Byte) */
				Endpoint_Write_8(TMC_STATUS_SUCCESS);
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     996:	0c 94 46 0d 	jmp	0x1a8c	; 0x1a8c <Endpoint_ClearStatusStage>
				break;
		}
	}
}
     99a:	cf 91       	pop	r28
     99c:	08 95       	ret

0000099e <ProcessInternalCommand>:
					0x00 or 0xff => EOI termination
					0x01         => EOI or '\n' (LF = linefeed)
					0x02         => EOI or '\r' (CR = carriage return)
*/
void ProcessInternalCommand(uint8_t* const Data, uint8_t Length)
{
     99e:	0f 93       	push	r16
     9a0:	1f 93       	push	r17
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
     9a6:	ec 01       	movw	r28, r24
	uint8_t xx, yy;
	
	xx = charToval(Data[1])*16 + charToval(Data[2]);
     9a8:	89 81       	ldd	r24, Y+1	; 0x01
     9aa:	3b dc       	rcall	.-1930   	; 0x222 <charToval>
     9ac:	18 2f       	mov	r17, r24
     9ae:	8a 81       	ldd	r24, Y+2	; 0x02
     9b0:	38 dc       	rcall	.-1936   	; 0x222 <charToval>
     9b2:	90 e1       	ldi	r25, 0x10	; 16
     9b4:	19 9f       	mul	r17, r25
     9b6:	80 0d       	add	r24, r0
     9b8:	11 24       	eor	r1, r1
     9ba:	18 2f       	mov	r17, r24
	yy = charToval(Data[3])*16 + charToval(Data[4]);
     9bc:	8b 81       	ldd	r24, Y+3	; 0x03
     9be:	31 dc       	rcall	.-1950   	; 0x222 <charToval>
     9c0:	08 2f       	mov	r16, r24
     9c2:	8c 81       	ldd	r24, Y+4	; 0x04
     9c4:	2e dc       	rcall	.-1956   	; 0x222 <charToval>
     9c6:	68 2f       	mov	r22, r24

    InternalConfigSet(xx, yy);
     9c8:	90 e1       	ldi	r25, 0x10	; 16
     9ca:	09 9f       	mul	r16, r25
     9cc:	60 0d       	add	r22, r0
     9ce:	11 24       	eor	r1, r1
     9d0:	81 2f       	mov	r24, r17
     9d2:	df 91       	pop	r29
}
     9d4:	cf 91       	pop	r28
     9d6:	1f 91       	pop	r17
     9d8:	0f 91       	pop	r16
	uint8_t xx, yy;
	
	xx = charToval(Data[1])*16 + charToval(Data[2]);
	yy = charToval(Data[3])*16 + charToval(Data[4]);

    InternalConfigSet(xx, yy);
     9da:	cb cd       	rjmp	.-1130   	; 0x572 <InternalConfigSet>

000009dc <ProcessSentMessage>:
     9dc:	cf 92       	push	r12
}

void ProcessSentMessage(uint8_t* const Data, uint8_t Length, bool isFirstTransfer, bool isLastTransfer, gpibtimeout_t ptimeoutfunc)
{
     9de:	df 92       	push	r13
     9e0:	ef 92       	push	r14
     9e2:	ff 92       	push	r15
     9e4:	0f 93       	push	r16
     9e6:	1f 93       	push	r17
     9e8:	cf 93       	push	r28
     9ea:	df 93       	push	r29
     9ec:	7c 01       	movw	r14, r24
     9ee:	c6 2f       	mov	r28, r22
     9f0:	d4 2e       	mov	r13, r20
     9f2:	d2 2f       	mov	r29, r18
	uint8_t i, dat;
	bool timedout, isinternalcommand;
	
	
	/* check, if this is an internal command */ 
	isinternalcommand = isFirstTransfer && isFirstTransfer && s_nextwrite_mightbeparameterset && (Data[0] == '!');
     9f4:	44 23       	and	r20, r20
     9f6:	49 f0       	breq	.+18     	; 0xa0a <__DATA_REGION_LENGTH__+0xa>
     9f8:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <s_nextwrite_mightbeparameterset>
     9fc:	88 23       	and	r24, r24
     9fe:	29 f0       	breq	.+10     	; 0xa0a <__DATA_REGION_LENGTH__+0xa>
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	f7 01       	movw	r30, r14
     a04:	90 81       	ld	r25, Z
     a06:	91 32       	cpi	r25, 0x21	; 33
     a08:	09 f0       	breq	.+2      	; 0xa0c <__DATA_REGION_LENGTH__+0xc>
     a0a:	80 e0       	ldi	r24, 0x00	; 0
	if (isinternalcommand)
     a0c:	80 ff       	sbrs	r24, 0
     a0e:	04 c0       	rjmp	.+8      	; 0xa18 <__DATA_REGION_LENGTH__+0x18>
	{
		ProcessInternalCommand(Data, Length);
     a10:	6c 2f       	mov	r22, r28
     a12:	c7 01       	movw	r24, r14
     a14:	c4 df       	rcall	.-120    	; 0x99e <ProcessInternalCommand>
     a16:	24 c0       	rjmp	.+72     	; 0xa60 <__DATA_REGION_LENGTH__+0x60>
	}
	else
	{
		timedout = false;
		
		gpib_ren(1); /* ensure that remote control is enabled */
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	1d d4       	rcall	.+2106   	; 0x1256 <gpib_ren>
		
		LED(0);
     a1c:	8d 98       	cbi	0x11, 5	; 17
		if (isFirstTransfer)
     a1e:	dd 20       	and	r13, r13
     a20:	29 f0       	breq	.+10     	; 0xa2c <__DATA_REGION_LENGTH__+0x2c>
			timedout = gpib_make_listener(gpib_addr, ptimeoutfunc);
     a22:	b8 01       	movw	r22, r16
     a24:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     a28:	a6 d5       	rcall	.+2892   	; 0x1576 <gpib_make_listener>
     a2a:	01 c0       	rjmp	.+2      	; 0xa2e <__DATA_REGION_LENGTH__+0x2e>
	{
		ProcessInternalCommand(Data, Length);
	}
	else
	{
		timedout = false;
     a2c:	80 e0       	ldi	r24, 0x00	; 0
		i = 0;
		while ( (Length > 0) && !timedout)
		{
			Length--;
			dat = Data[i++];
			timedout = gpib_writedat(dat, (Length == 0)  && isLastTransfer, ptimeoutfunc);
     a2e:	cd 2e       	mov	r12, r29
		LED(0);
		if (isFirstTransfer)
			timedout = gpib_make_listener(gpib_addr, ptimeoutfunc);
			
		i = 0;
		while ( (Length > 0) && !timedout)
     a30:	cc 23       	and	r28, r28
     a32:	79 f0       	breq	.+30     	; 0xa52 <__DATA_REGION_LENGTH__+0x52>
     a34:	81 11       	cpse	r24, r1
     a36:	13 c0       	rjmp	.+38     	; 0xa5e <__DATA_REGION_LENGTH__+0x5e>
		{
			Length--;
     a38:	c1 50       	subi	r28, 0x01	; 1
			dat = Data[i++];
     a3a:	f7 01       	movw	r30, r14
     a3c:	81 91       	ld	r24, Z+
     a3e:	7f 01       	movw	r14, r30
			timedout = gpib_writedat(dat, (Length == 0)  && isLastTransfer, ptimeoutfunc);
     a40:	c1 11       	cpse	r28, r1
     a42:	02 c0       	rjmp	.+4      	; 0xa48 <__DATA_REGION_LENGTH__+0x48>
     a44:	6c 2d       	mov	r22, r12
     a46:	01 c0       	rjmp	.+2      	; 0xa4a <__DATA_REGION_LENGTH__+0x4a>
     a48:	60 e0       	ldi	r22, 0x00	; 0
     a4a:	61 70       	andi	r22, 0x01	; 1
     a4c:	a8 01       	movw	r20, r16
     a4e:	b3 d5       	rcall	.+2918   	; 0x15b6 <gpib_writedat>
     a50:	ef cf       	rjmp	.-34     	; 0xa30 <__DATA_REGION_LENGTH__+0x30>
		}
		
		if (isLastTransfer && !timedout) /* in case of timeout the interface is cleared within the writedat function, no need to untalk!*/
     a52:	dd 23       	and	r29, r29
     a54:	21 f0       	breq	.+8      	; 0xa5e <__DATA_REGION_LENGTH__+0x5e>
     a56:	81 11       	cpse	r24, r1
			gpib_untalk_unlisten(ptimeoutfunc);
     a58:	02 c0       	rjmp	.+4      	; 0xa5e <__DATA_REGION_LENGTH__+0x5e>
     a5a:	c8 01       	movw	r24, r16
     a5c:	5c d5       	rcall	.+2744   	; 0x1516 <gpib_untalk_unlisten>
		LED(1);
     a5e:	8d 9a       	sbi	0x11, 5	; 17
	}
	s_nextwrite_mightbeparameterset = false;
     a60:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <s_nextwrite_mightbeparameterset>
}
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	1f 91       	pop	r17
     a6a:	0f 91       	pop	r16
     a6c:	ff 90       	pop	r15
     a6e:	ef 90       	pop	r14
     a70:	df 90       	pop	r13
     a72:	cf 90       	pop	r12
     a74:	08 95       	ret

00000a76 <GetNextMessage>:

uint8_t GetNextMessage(uint8_t* const Data, uint8_t maxlen, bool isFirstMessage, bool *pisLastMessage, gpibtimeout_t ptimeoutfunc)
{
     a76:	6f 92       	push	r6
     a78:	7f 92       	push	r7
     a7a:	8f 92       	push	r8
     a7c:	9f 92       	push	r9
     a7e:	af 92       	push	r10
     a80:	bf 92       	push	r11
     a82:	cf 92       	push	r12
     a84:	df 92       	push	r13
     a86:	ff 92       	push	r15
     a88:	0f 93       	push	r16
     a8a:	1f 93       	push	r17
     a8c:	cf 93       	push	r28
     a8e:	df 93       	push	r29
     a90:	00 d0       	rcall	.+0      	; 0xa92 <GetNextMessage+0x1c>
     a92:	cd b7       	in	r28, 0x3d	; 61
     a94:	de b7       	in	r29, 0x3e	; 62
     a96:	5c 01       	movw	r10, r24
     a98:	f6 2e       	mov	r15, r22
     a9a:	74 2e       	mov	r7, r20
     a9c:	49 01       	movw	r8, r18
     a9e:	68 01       	movw	r12, r16
	uint8_t c, i;
	bool    Eoi, timedout;
	
	gpib_ren(1); /* ensure that remote control is enabled */
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	d9 d3       	rcall	.+1970   	; 0x1256 <gpib_ren>
	
	LED(0);	
     aa4:	8d 98       	cbi	0x11, 5	; 17
	
	timedout = false;
     aa6:	19 82       	std	Y+1, r1	; 0x01
	if (isFirstMessage)
     aa8:	77 20       	and	r7, r7
     aaa:	29 f0       	breq	.+10     	; 0xab6 <GetNextMessage+0x40>
		timedout = gpib_make_talker(gpib_addr, ptimeoutfunc);
     aac:	b8 01       	movw	r22, r16
     aae:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     ab2:	45 d5       	rcall	.+2698   	; 0x153e <gpib_make_talker>
     ab4:	89 83       	std	Y+1, r24	; 0x01

	i = 0;
	Eoi = false;
     ab6:	1a 82       	std	Y+2, r1	; 0x02
     ab8:	87 e3       	ldi	r24, 0x37	; 55
     aba:	68 2e       	mov	r6, r24
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	78 2e       	mov	r7, r24
	
	timedout = false;
	if (isFirstMessage)
		timedout = gpib_make_talker(gpib_addr, ptimeoutfunc);

	i = 0;
     ac0:	10 e0       	ldi	r17, 0x00	; 0
	Eoi = false;

	while (!Eoi && (i < maxlen) && !timedout)
     ac2:	9a 81       	ldd	r25, Y+2	; 0x02
     ac4:	89 81       	ldd	r24, Y+1	; 0x01
     ac6:	91 11       	cpse	r25, r1
     ac8:	13 c0       	rjmp	.+38     	; 0xaf0 <GetNextMessage+0x7a>
     aca:	f1 16       	cp	r15, r17
     acc:	b1 f0       	breq	.+44     	; 0xafa <GetNextMessage+0x84>
     ace:	81 11       	cpse	r24, r1
     ad0:	18 c0       	rjmp	.+48     	; 0xb02 <__stack+0x3>
	{
	
		c = gpib_readdat(&Eoi, &timedout, ptimeoutfunc); 
     ad2:	a6 01       	movw	r20, r12
     ad4:	be 01       	movw	r22, r28
     ad6:	6f 5f       	subi	r22, 0xFF	; 255
     ad8:	7f 4f       	sbci	r23, 0xFF	; 255
     ada:	ce 01       	movw	r24, r28
     adc:	02 96       	adiw	r24, 0x02	; 2
     ade:	90 d4       	rcall	.+2336   	; 0x1400 <gpib_readdat>
		if (!timedout)
     ae0:	99 81       	ldd	r25, Y+1	; 0x01
     ae2:	91 11       	cpse	r25, r1
     ae4:	ee cf       	rjmp	.-36     	; 0xac2 <GetNextMessage+0x4c>
			NextResponseBuffer[i++] = c;
     ae6:	1f 5f       	subi	r17, 0xFF	; 255
     ae8:	f3 01       	movw	r30, r6
     aea:	81 93       	st	Z+, r24
     aec:	3f 01       	movw	r6, r30
     aee:	e9 cf       	rjmp	.-46     	; 0xac2 <GetNextMessage+0x4c>
	}
		
	if (Eoi && !timedout) /* in case of timeout, no need to unlisten => interface clear done in readdat function! */
     af0:	81 11       	cpse	r24, r1
		gpib_untalk_unlisten(ptimeoutfunc);
     af2:	07 c0       	rjmp	.+14     	; 0xb02 <__stack+0x3>
     af4:	c6 01       	movw	r24, r12
     af6:	0f d5       	rcall	.+2590   	; 0x1516 <gpib_untalk_unlisten>
     af8:	f1 2e       	mov	r15, r17

	if (timedout) /* in case of timedout, simulate an end of message */
     afa:	89 81       	ldd	r24, Y+1	; 0x01
     afc:	88 23       	and	r24, r24
     afe:	21 f0       	breq	.+8      	; 0xb08 <__stack+0x9>
     b00:	1f 2d       	mov	r17, r15
		Eoi = true;
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	8a 83       	std	Y+2, r24	; 0x02
     b06:	f1 2e       	mov	r15, r17
	*pisLastMessage = Eoi;
     b08:	8a 81       	ldd	r24, Y+2	; 0x02
     b0a:	f4 01       	movw	r30, r8
     b0c:	80 83       	st	Z, r24
	
//NextResponseBuffer[i++]	= gpib_search();

	memcpy((char*)Data, (char*)NextResponseBuffer, i);
     b0e:	4f 2d       	mov	r20, r15
     b10:	50 e0       	ldi	r21, 0x00	; 0
     b12:	67 e3       	ldi	r22, 0x37	; 55
     b14:	71 e0       	ldi	r23, 0x01	; 1
     b16:	c5 01       	movw	r24, r10
     b18:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <memcpy>
	
	LED(1);
     b1c:	8d 9a       	sbi	0x11, 5	; 17

	return i;
}
     b1e:	8f 2d       	mov	r24, r15
     b20:	0f 90       	pop	r0
     b22:	0f 90       	pop	r0
     b24:	df 91       	pop	r29
     b26:	cf 91       	pop	r28
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	df 90       	pop	r13
     b30:	cf 90       	pop	r12
     b32:	bf 90       	pop	r11
     b34:	af 90       	pop	r10
     b36:	9f 90       	pop	r9
     b38:	8f 90       	pop	r8
     b3a:	7f 90       	pop	r7
     b3c:	6f 90       	pop	r6
     b3e:	08 95       	ret

00000b40 <TMC_resetstates>:
bool TMC_eom;
bool TMC_InLastMessageComplete = true;

void TMC_resetstates(void)
{
	TMC_LastMessageComplete = true;
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <TMC_LastMessageComplete>
	TMC_InLastMessageComplete = true;
     b46:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	s_remaining_bytes_receive = 0;
     b4a:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <s_remaining_bytes_receive>
     b4e:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <s_remaining_bytes_receive+0x1>
     b52:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <s_remaining_bytes_receive+0x2>
     b56:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <s_remaining_bytes_receive+0x3>
	gpib_interface_clear();
     b5a:	83 c3       	rjmp	.+1798   	; 0x1262 <gpib_interface_clear>

00000b5c <ReadTMCHeader>:
 *  \param[out] MessageHeader  Pointer to a location where the read header (if any) should be stored
 *
 *  \return Boolean \c true if a header was read, \c false otherwise
 */
bool ReadTMCHeader(TMC_MessageHeader_t* const MessageHeader)
{
     b5c:	0f 93       	push	r16
     b5e:	1f 93       	push	r17
     b60:	cf 93       	push	r28
     b62:	df 93       	push	r29
     b64:	00 d0       	rcall	.+0      	; 0xb66 <ReadTMCHeader+0xa>
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b6a:	23 e0       	ldi	r18, 0x03	; 3
     b6c:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     b70:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	/* Select the Data Out endpoint */
	Endpoint_SelectEndpoint(TMC_OUT_EPADDR);

	/* Abort if no command has been sent from the host */
	if (!(Endpoint_IsOUTReceived()))
     b74:	22 ff       	sbrs	r18, 2
     b76:	1c c0       	rjmp	.+56     	; 0xbb0 <ReadTMCHeader+0x54>
     b78:	8c 01       	movw	r16, r24
	  return false;

	/* Read in the header of the command from the host */
	BytesTransferred = 0;
     b7a:	1a 82       	std	Y+2, r1	; 0x02
     b7c:	19 82       	std	Y+1, r1	; 0x01
	while ((ErrorCode = Endpoint_Read_Stream_LE(MessageHeader, sizeof(TMC_MessageHeader_t), &BytesTransferred)) ==
     b7e:	ae 01       	movw	r20, r28
     b80:	4f 5f       	subi	r20, 0xFF	; 255
     b82:	5f 4f       	sbci	r21, 0xFF	; 255
     b84:	6c e0       	ldi	r22, 0x0C	; 12
     b86:	70 e0       	ldi	r23, 0x00	; 0
     b88:	c8 01       	movw	r24, r16
     b8a:	ca d5       	rcall	.+2964   	; 0x1720 <Endpoint_Read_Stream_LE>
     b8c:	98 2f       	mov	r25, r24
     b8e:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <IsTMCBulkOUTReset>
     b92:	95 30       	cpi	r25, 0x05	; 5
     b94:	11 f4       	brne	.+4      	; 0xb9a <ReadTMCHeader+0x3e>
	       ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (IsTMCBulkOUTReset)
     b96:	88 23       	and	r24, r24
     b98:	91 f3       	breq	.-28     	; 0xb7e <ReadTMCHeader+0x22>
		  break;
	}

	/* Store the new command tag value for later use */
	CurrentTransferTag = MessageHeader->Tag;
     b9a:	f8 01       	movw	r30, r16
     b9c:	21 81       	ldd	r18, Z+1	; 0x01
     b9e:	20 93 79 01 	sts	0x0179, r18	; 0x800179 <CurrentTransferTag>

	/* Indicate if the command has been aborted or not */
	return (!(IsTMCBulkOUTReset) && (ErrorCode == ENDPOINT_RWSTREAM_NoError));
     ba2:	81 11       	cpse	r24, r1
     ba4:	02 c0       	rjmp	.+4      	; 0xbaa <ReadTMCHeader+0x4e>
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	91 11       	cpse	r25, r1
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	81 70       	andi	r24, 0x01	; 1
     bae:	01 c0       	rjmp	.+2      	; 0xbb2 <ReadTMCHeader+0x56>
	/* Select the Data Out endpoint */
	Endpoint_SelectEndpoint(TMC_OUT_EPADDR);

	/* Abort if no command has been sent from the host */
	if (!(Endpoint_IsOUTReceived()))
	  return false;
     bb0:	80 e0       	ldi	r24, 0x00	; 0
	/* Store the new command tag value for later use */
	CurrentTransferTag = MessageHeader->Tag;

	/* Indicate if the command has been aborted or not */
	return (!(IsTMCBulkOUTReset) && (ErrorCode == ENDPOINT_RWSTREAM_NoError));
}
     bb2:	0f 90       	pop	r0
     bb4:	0f 90       	pop	r0
     bb6:	df 91       	pop	r29
     bb8:	cf 91       	pop	r28
     bba:	1f 91       	pop	r17
     bbc:	0f 91       	pop	r16
     bbe:	08 95       	ret

00000bc0 <WriteTMCHeader>:

bool WriteTMCHeader(TMC_MessageHeader_t* const MessageHeader)
{
     bc0:	0f 93       	push	r16
     bc2:	1f 93       	push	r17
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
     bc8:	00 d0       	rcall	.+0      	; 0xbca <WriteTMCHeader+0xa>
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	8c 01       	movw	r16, r24
	uint16_t BytesTransferred;
	uint8_t  ErrorCode;

	/* Set the message tag of the command header */
	MessageHeader->Tag        =  CurrentTransferTag;
     bd0:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <CurrentTransferTag>
     bd4:	f8 01       	movw	r30, r16
     bd6:	81 83       	std	Z+1, r24	; 0x01
	MessageHeader->InverseTag = ~CurrentTransferTag;
     bd8:	80 95       	com	r24
     bda:	82 83       	std	Z+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     bdc:	82 e0       	ldi	r24, 0x02	; 2
     bde:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>

	/* Select the Data In endpoint */
	Endpoint_SelectEndpoint(TMC_IN_EPADDR);

	/* Send the command header to the host */
	BytesTransferred = 0;
     be2:	1a 82       	std	Y+2, r1	; 0x02
     be4:	19 82       	std	Y+1, r1	; 0x01
	while ((ErrorCode = Endpoint_Write_Stream_LE(MessageHeader, sizeof(TMC_MessageHeader_t), &BytesTransferred)) ==
     be6:	ae 01       	movw	r20, r28
     be8:	4f 5f       	subi	r20, 0xFF	; 255
     bea:	5f 4f       	sbci	r21, 0xFF	; 255
     bec:	6c e0       	ldi	r22, 0x0C	; 12
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	c8 01       	movw	r24, r16
     bf2:	4d d5       	rcall	.+2714   	; 0x168e <Endpoint_Write_Stream_LE>
     bf4:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <IsTMCBulkINReset>
     bf8:	85 30       	cpi	r24, 0x05	; 5
     bfa:	11 f4       	brne	.+4      	; 0xc00 <WriteTMCHeader+0x40>
	       ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (IsTMCBulkINReset)
     bfc:	99 23       	and	r25, r25
     bfe:	99 f3       	breq	.-26     	; 0xbe6 <WriteTMCHeader+0x26>
		  break;
	}

	/* Indicate if the command has been aborted or not */
	return (!(IsTMCBulkINReset) && (ErrorCode == ENDPOINT_RWSTREAM_NoError));
     c00:	91 11       	cpse	r25, r1
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <WriteTMCHeader+0x4e>
     c04:	91 e0       	ldi	r25, 0x01	; 1
     c06:	81 11       	cpse	r24, r1
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	89 2f       	mov	r24, r25
     c0c:	01 c0       	rjmp	.+2      	; 0xc10 <WriteTMCHeader+0x50>
     c0e:	80 e0       	ldi	r24, 0x00	; 0
}
     c10:	81 70       	andi	r24, 0x01	; 1
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	df 91       	pop	r29
     c18:	cf 91       	pop	r28
     c1a:	1f 91       	pop	r17
     c1c:	0f 91       	pop	r16
     c1e:	08 95       	ret

00000c20 <TMC_Task>:
//	gpib_untalk_unlisten();
}

/** Function to manage TMC data transmission and reception to and from the host. */
void TMC_Task(void)
{
     c20:	bf 92       	push	r11
     c22:	cf 92       	push	r12
     c24:	df 92       	push	r13
     c26:	ef 92       	push	r14
     c28:	ff 92       	push	r15
     c2a:	0f 93       	push	r16
     c2c:	1f 93       	push	r17
     c2e:	cf 93       	push	r28
     c30:	df 93       	push	r29
     c32:	cd b7       	in	r28, 0x3d	; 61
     c34:	de b7       	in	r29, 0x3e	; 62
     c36:	cd 58       	subi	r28, 0x8D	; 141
     c38:	d1 09       	sbc	r29, r1
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	f8 94       	cli
     c3e:	de bf       	out	0x3e, r29	; 62
     c40:	0f be       	out	0x3f, r0	; 63
     c42:	cd bf       	out	0x3d, r28	; 61
	bool lastmessage;
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     c44:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <USB_DeviceState>
     c48:	84 30       	cpi	r24, 0x04	; 4
     c4a:	09 f0       	breq	.+2      	; 0xc4e <TMC_Task+0x2e>
     c4c:	9d c1       	rjmp	.+826    	; 0xf88 <TMC_Task+0x368>
	TMC_MessageHeader_t MessageHeader;
	uint8_t             MessagePayload[128], curlen;
	
	

	if (s_remaining_bytes_receive == 0)
     c4e:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <s_remaining_bytes_receive>
     c52:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <s_remaining_bytes_receive+0x1>
     c56:	a0 91 34 01 	lds	r26, 0x0134	; 0x800134 <s_remaining_bytes_receive+0x2>
     c5a:	b0 91 35 01 	lds	r27, 0x0135	; 0x800135 <s_remaining_bytes_receive+0x3>
     c5e:	89 2b       	or	r24, r25
     c60:	8a 2b       	or	r24, r26
     c62:	8b 2b       	or	r24, r27
     c64:	09 f0       	breq	.+2      	; 0xc68 <TMC_Task+0x48>
     c66:	20 c1       	rjmp	.+576    	; 0xea8 <TMC_Task+0x288>
	{
	
		/* Try to read in a TMC message from the interface, process if one is available */
		if (ReadTMCHeader(&MessageHeader))
     c68:	ce 01       	movw	r24, r28
     c6a:	8f 57       	subi	r24, 0x7F	; 127
     c6c:	9f 4f       	sbci	r25, 0xFF	; 255
     c6e:	76 df       	rcall	.-276    	; 0xb5c <ReadTMCHeader>
     c70:	88 23       	and	r24, r24
     c72:	09 f4       	brne	.+2      	; 0xc76 <TMC_Task+0x56>
     c74:	7d c1       	rjmp	.+762    	; 0xf70 <TMC_Task+0x350>
		{
		dbg++;
     c76:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
     c7a:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <__data_end+0x1>
     c7e:	01 96       	adiw	r24, 0x01	; 1
     c80:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__data_end+0x1>
     c84:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
		
			/* Indicate busy */
			//LEDs_SetAllLEDs(LEDMASK_USB_BUSY);

			switch (MessageHeader.MessageID)
     c88:	cf 57       	subi	r28, 0x7F	; 127
     c8a:	df 4f       	sbci	r29, 0xFF	; 255
     c8c:	88 81       	ld	r24, Y
     c8e:	c1 58       	subi	r28, 0x81	; 129
     c90:	d0 40       	sbci	r29, 0x00	; 0
     c92:	82 30       	cpi	r24, 0x02	; 2
     c94:	09 f4       	brne	.+2      	; 0xc98 <TMC_Task+0x78>
     c96:	9e c0       	rjmp	.+316    	; 0xdd4 <TMC_Task+0x1b4>
     c98:	80 38       	cpi	r24, 0x80	; 128
     c9a:	21 f0       	breq	.+8      	; 0xca4 <TMC_Task+0x84>
     c9c:	81 30       	cpi	r24, 0x01	; 1
     c9e:	09 f0       	breq	.+2      	; 0xca2 <TMC_Task+0x82>
     ca0:	fd c0       	rjmp	.+506    	; 0xe9c <TMC_Task+0x27c>
     ca2:	17 c0       	rjmp	.+46     	; 0xcd2 <TMC_Task+0xb2>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
     ca4:	80 e5       	ldi	r24, 0x50	; 80
     ca6:	93 ec       	ldi	r25, 0xC3	; 195
     ca8:	a0 e0       	ldi	r26, 0x00	; 0
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <timeout_val>
     cb0:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <timeout_val+0x1>
     cb4:	a0 93 87 01 	sts	0x0187, r26	; 0x800187 <timeout_val+0x2>
     cb8:	b0 93 88 01 	sts	0x0188, r27	; 0x800188 <timeout_val+0x3>

			switch (MessageHeader.MessageID)
			{
				case TMC_MESSAGEID_TRIGGER:
					timeout_start(50000); /* 0.5s timeout*/
					gpib_trigger(gpib_addr, is_timedout);
     cbc:	64 e2       	ldi	r22, 0x24	; 36
     cbe:	71 e0       	ldi	r23, 0x01	; 1
     cc0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     cc4:	69 d3       	rcall	.+1746   	; 0x1398 <gpib_trigger>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     cc6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     cca:	8b 77       	andi	r24, 0x7B	; 123
     ccc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     cd0:	4f c1       	rjmp	.+670    	; 0xf70 <TMC_Task+0x350>
					Endpoint_ClearOUT();					
					break;
				case TMC_MESSAGEID_DEV_DEP_MSG_OUT:
					s_remaining_bytes_receive = MessageHeader.TransferSize;
     cd2:	cb 57       	subi	r28, 0x7B	; 123
     cd4:	df 4f       	sbci	r29, 0xFF	; 255
     cd6:	38 81       	ld	r19, Y
     cd8:	c5 58       	subi	r28, 0x85	; 133
     cda:	d0 40       	sbci	r29, 0x00	; 0
     cdc:	ca 57       	subi	r28, 0x7A	; 122
     cde:	df 4f       	sbci	r29, 0xFF	; 255
     ce0:	28 81       	ld	r18, Y
     ce2:	c6 58       	subi	r28, 0x86	; 134
     ce4:	d0 40       	sbci	r29, 0x00	; 0
     ce6:	c9 57       	subi	r28, 0x79	; 121
     ce8:	df 4f       	sbci	r29, 0xFF	; 255
     cea:	98 81       	ld	r25, Y
     cec:	c7 58       	subi	r28, 0x87	; 135
     cee:	d0 40       	sbci	r29, 0x00	; 0
     cf0:	c8 57       	subi	r28, 0x78	; 120
     cf2:	df 4f       	sbci	r29, 0xFF	; 255
     cf4:	88 81       	ld	r24, Y
     cf6:	c8 58       	subi	r28, 0x88	; 136
     cf8:	d0 40       	sbci	r29, 0x00	; 0
     cfa:	30 93 32 01 	sts	0x0132, r19	; 0x800132 <s_remaining_bytes_receive>
     cfe:	20 93 33 01 	sts	0x0133, r18	; 0x800133 <s_remaining_bytes_receive+0x1>
     d02:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <s_remaining_bytes_receive+0x2>
     d06:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <s_remaining_bytes_receive+0x3>
					
					LastTransferLength = 0;
     d0a:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <LastTransferLength+0x1>
     d0e:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <LastTransferLength>
					curlen = MIN(TMC_IO_EPSIZE-sizeof(TMC_MessageHeader_t), MessageHeader.TransferSize);
     d12:	c3 2e       	mov	r12, r19
     d14:	d2 2e       	mov	r13, r18
     d16:	e9 2e       	mov	r14, r25
     d18:	f8 2e       	mov	r15, r24
     d1a:	85 e3       	ldi	r24, 0x35	; 53
     d1c:	c8 16       	cp	r12, r24
     d1e:	d1 04       	cpc	r13, r1
     d20:	e1 04       	cpc	r14, r1
     d22:	f1 04       	cpc	r15, r1
     d24:	28 f0       	brcs	.+10     	; 0xd30 <TMC_Task+0x110>
     d26:	94 e3       	ldi	r25, 0x34	; 52
     d28:	c9 2e       	mov	r12, r25
     d2a:	d1 2c       	mov	r13, r1
     d2c:	e1 2c       	mov	r14, r1
     d2e:	f1 2c       	mov	r15, r1
     d30:	bc 2c       	mov	r11, r12
					//
					while (Endpoint_Read_Stream_LE(MessagePayload, curlen, &LastTransferLength) ==
     d32:	47 e7       	ldi	r20, 0x77	; 119
     d34:	51 e0       	ldi	r21, 0x01	; 1
     d36:	b6 01       	movw	r22, r12
     d38:	ce 01       	movw	r24, r28
     d3a:	01 96       	adiw	r24, 0x01	; 1
     d3c:	f1 d4       	rcall	.+2530   	; 0x1720 <Endpoint_Read_Stream_LE>
     d3e:	85 30       	cpi	r24, 0x05	; 5
     d40:	21 f4       	brne	.+8      	; 0xd4a <TMC_Task+0x12a>
						   ENDPOINT_RWSTREAM_IncompleteTransfer)
					{
						if (IsTMCBulkOUTReset)
     d42:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <IsTMCBulkOUTReset>
     d46:	88 23       	and	r24, r24
     d48:	a1 f3       	breq	.-24     	; 0xd32 <TMC_Task+0x112>
						  break;
					}					
					
					s_remaining_bytes_receive -= curlen;
     d4a:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <s_remaining_bytes_receive>
     d4e:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <s_remaining_bytes_receive+0x1>
     d52:	a0 91 34 01 	lds	r26, 0x0134	; 0x800134 <s_remaining_bytes_receive+0x2>
     d56:	b0 91 35 01 	lds	r27, 0x0135	; 0x800135 <s_remaining_bytes_receive+0x3>
     d5a:	8c 19       	sub	r24, r12
     d5c:	9d 09       	sbc	r25, r13
     d5e:	ae 09       	sbc	r26, r14
     d60:	bf 09       	sbc	r27, r15
     d62:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <s_remaining_bytes_receive>
     d66:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <s_remaining_bytes_receive+0x1>
     d6a:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <s_remaining_bytes_receive+0x2>
     d6e:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <s_remaining_bytes_receive+0x3>
					
					TMC_eom = (MessageHeader.MessageIDSpecific.DeviceOUT.LastMessageTransaction != 0);
     d72:	c7 57       	subi	r28, 0x77	; 119
     d74:	df 4f       	sbci	r29, 0xFF	; 255
     d76:	28 81       	ld	r18, Y
     d78:	c9 58       	subi	r28, 0x89	; 137
     d7a:	d0 40       	sbci	r29, 0x00	; 0
     d7c:	31 e0       	ldi	r19, 0x01	; 1
     d7e:	21 11       	cpse	r18, r1
     d80:	01 c0       	rjmp	.+2      	; 0xd84 <TMC_Task+0x164>
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	30 93 89 01 	sts	0x0189, r19	; 0x800189 <TMC_eom>
					lastmessage =  TMC_eom && (s_remaining_bytes_receive==0);
     d88:	22 23       	and	r18, r18
     d8a:	29 f0       	breq	.+10     	; 0xd96 <TMC_Task+0x176>
     d8c:	21 e0       	ldi	r18, 0x01	; 1
     d8e:	89 2b       	or	r24, r25
     d90:	8a 2b       	or	r24, r26
     d92:	8b 2b       	or	r24, r27
     d94:	09 f0       	breq	.+2      	; 0xd98 <TMC_Task+0x178>
     d96:	20 e0       	ldi	r18, 0x00	; 0
     d98:	21 70       	andi	r18, 0x01	; 1
     d9a:	c3 57       	subi	r28, 0x73	; 115
     d9c:	df 4f       	sbci	r29, 0xFF	; 255
     d9e:	28 83       	st	Y, r18
     da0:	cd 58       	subi	r28, 0x8D	; 141
     da2:	d0 40       	sbci	r29, 0x00	; 0
					ProcessSentMessage(MessagePayload, curlen, TMC_LastMessageComplete, lastmessage, tmc_gpib_write_timedout);
     da4:	03 e4       	ldi	r16, 0x43	; 67
     da6:	11 e0       	ldi	r17, 0x01	; 1
     da8:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <TMC_LastMessageComplete>
     dac:	6b 2d       	mov	r22, r11
     dae:	ce 01       	movw	r24, r28
     db0:	01 96       	adiw	r24, 0x01	; 1
     db2:	14 de       	rcall	.-984    	; 0x9dc <ProcessSentMessage>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     db4:	83 e0       	ldi	r24, 0x03	; 3
     db6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     dba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     dbe:	8b 77       	andi	r24, 0x7B	; 123
     dc0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
					
					/* Select the Data Out endpoint, this has to be done because the timeout function cal select the control endpoint */
					Endpoint_SelectEndpoint(TMC_OUT_EPADDR);
					Endpoint_ClearOUT();
					
					TMC_LastMessageComplete = lastmessage;
     dc4:	c3 57       	subi	r28, 0x73	; 115
     dc6:	df 4f       	sbci	r29, 0xFF	; 255
     dc8:	88 81       	ld	r24, Y
     dca:	cd 58       	subi	r28, 0x8D	; 141
     dcc:	d0 40       	sbci	r29, 0x00	; 0
     dce:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <TMC_LastMessageComplete>
					break;
     dd2:	ce c0       	rjmp	.+412    	; 0xf70 <TMC_Task+0x350>
     dd4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     dd8:	8b 77       	andi	r24, 0x7B	; 123
     dda:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
				case TMC_MESSAGEID_DEV_DEP_MSG_IN:
					Endpoint_ClearOUT();
//FIXME: ZLP not OK! -------------------------------------------------------v
					curlen = MIN(TMC_IO_EPSIZE-sizeof(TMC_MessageHeader_t) -1, MessageHeader.TransferSize);
					MessageHeader.TransferSize = GetNextMessage(MessagePayload, curlen, TMC_InLastMessageComplete, &lastmessage, tmc_gpib_read_timedout);
     dde:	cb 57       	subi	r28, 0x7B	; 123
     de0:	df 4f       	sbci	r29, 0xFF	; 255
     de2:	68 81       	ld	r22, Y
     de4:	79 81       	ldd	r23, Y+1	; 0x01
     de6:	8a 81       	ldd	r24, Y+2	; 0x02
     de8:	9b 81       	ldd	r25, Y+3	; 0x03
     dea:	c5 58       	subi	r28, 0x85	; 133
     dec:	d0 40       	sbci	r29, 0x00	; 0
     dee:	64 33       	cpi	r22, 0x34	; 52
     df0:	71 05       	cpc	r23, r1
     df2:	81 05       	cpc	r24, r1
     df4:	91 05       	cpc	r25, r1
     df6:	20 f0       	brcs	.+8      	; 0xe00 <TMC_Task+0x1e0>
     df8:	63 e3       	ldi	r22, 0x33	; 51
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	0b e4       	ldi	r16, 0x4B	; 75
     e02:	11 e0       	ldi	r17, 0x01	; 1
     e04:	9e 01       	movw	r18, r28
     e06:	23 57       	subi	r18, 0x73	; 115
     e08:	3f 4f       	sbci	r19, 0xFF	; 255
     e0a:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     e0e:	ce 01       	movw	r24, r28
     e10:	01 96       	adiw	r24, 0x01	; 1
     e12:	31 de       	rcall	.-926    	; 0xa76 <GetNextMessage>
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	a0 e0       	ldi	r26, 0x00	; 0
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	cb 57       	subi	r28, 0x7B	; 123
     e1c:	df 4f       	sbci	r29, 0xFF	; 255
     e1e:	88 83       	st	Y, r24
     e20:	99 83       	std	Y+1, r25	; 0x01
     e22:	aa 83       	std	Y+2, r26	; 0x02
     e24:	bb 83       	std	Y+3, r27	; 0x03
     e26:	c5 58       	subi	r28, 0x85	; 133
     e28:	d0 40       	sbci	r29, 0x00	; 0
					TMC_InLastMessageComplete = lastmessage;
     e2a:	c3 57       	subi	r28, 0x73	; 115
     e2c:	df 4f       	sbci	r29, 0xFF	; 255
     e2e:	88 81       	ld	r24, Y
     e30:	cd 58       	subi	r28, 0x8D	; 141
     e32:	d0 40       	sbci	r29, 0x00	; 0
     e34:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
					
					MessageHeader.MessageIDSpecific.DeviceOUT.LastMessageTransaction = lastmessage;
     e38:	c7 57       	subi	r28, 0x77	; 119
     e3a:	df 4f       	sbci	r29, 0xFF	; 255
     e3c:	88 83       	st	Y, r24
     e3e:	c9 58       	subi	r28, 0x89	; 137
     e40:	d0 40       	sbci	r29, 0x00	; 0
					if (!IsTMCBulkINReset)
     e42:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <IsTMCBulkINReset>
     e46:	81 11       	cpse	r24, r1
						WriteTMCHeader(&MessageHeader);					
     e48:	04 c0       	rjmp	.+8      	; 0xe52 <TMC_Task+0x232>
     e4a:	ce 01       	movw	r24, r28
     e4c:	8f 57       	subi	r24, 0x7F	; 127
     e4e:	9f 4f       	sbci	r25, 0xFF	; 255
     e50:	b7 de       	rcall	.-658    	; 0xbc0 <WriteTMCHeader>
					
					LastTransferLength = 0;
     e52:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <LastTransferLength+0x1>
     e56:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <LastTransferLength>
					if (!IsTMCBulkINReset)
     e5a:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <IsTMCBulkINReset>
     e5e:	88 23       	and	r24, r24
     e60:	79 f0       	breq	.+30     	; 0xe80 <TMC_Task+0x260>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e62:	82 e0       	ldi	r24, 0x02	; 2
     e64:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e68:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     e6c:	8e 77       	andi	r24, 0x7E	; 126
     e6e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

					/* Also in case of a timeout, the host does not expire a Bulk IN IRP, so we still need to commit an empty endpoint to retire the IRP */
					Endpoint_SelectEndpoint(TMC_IN_EPADDR);
					Endpoint_ClearIN();
					
					if (IsTMCBulkINReset)
     e72:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <IsTMCBulkINReset>
     e76:	88 23       	and	r24, r24
     e78:	09 f4       	brne	.+2      	; 0xe7c <TMC_Task+0x25c>
					{
						//Endpoint_SelectEndpoint(TMC_IN_EPADDR);
						//Endpoint_AbortPendingIN();
						/* KG: Added for proper synchronsity handling */
						//Endpoint_ResetEndpoint(TMC_IN_EPADDR);
						TMC_resetstates();
     e7a:	7a c0       	rjmp	.+244    	; 0xf70 <TMC_Task+0x350>
     e7c:	61 de       	rcall	.-830    	; 0xb40 <TMC_resetstates>
     e7e:	78 c0       	rjmp	.+240    	; 0xf70 <TMC_Task+0x350>
						WriteTMCHeader(&MessageHeader);					
					
					LastTransferLength = 0;
					if (!IsTMCBulkINReset)
					{
						while (Endpoint_Write_Stream_LE(MessagePayload, MessageHeader.TransferSize, &LastTransferLength) ==
     e80:	cb 57       	subi	r28, 0x7B	; 123
     e82:	df 4f       	sbci	r29, 0xFF	; 255
     e84:	68 81       	ld	r22, Y
     e86:	79 81       	ldd	r23, Y+1	; 0x01
     e88:	c5 58       	subi	r28, 0x85	; 133
     e8a:	d0 40       	sbci	r29, 0x00	; 0
     e8c:	47 e7       	ldi	r20, 0x77	; 119
     e8e:	51 e0       	ldi	r21, 0x01	; 1
     e90:	ce 01       	movw	r24, r28
     e92:	01 96       	adiw	r24, 0x01	; 1
     e94:	fc d3       	rcall	.+2040   	; 0x168e <Endpoint_Write_Stream_LE>
     e96:	85 30       	cpi	r24, 0x05	; 5
     e98:	01 f3       	breq	.-64     	; 0xe5a <TMC_Task+0x23a>
     e9a:	e3 cf       	rjmp	.-58     	; 0xe62 <TMC_Task+0x242>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     e9c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
     ea0:	80 62       	ori	r24, 0x20	; 32
     ea2:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
     ea6:	64 c0       	rjmp	.+200    	; 0xf70 <TMC_Task+0x350>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ea8:	83 e0       	ldi	r24, 0x03	; 3
     eaa:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     eae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	
			/* Select the Data Out endpoint */
		Endpoint_SelectEndpoint(TMC_OUT_EPADDR);

		/* Abort if no command has been sent from the host */
		if (Endpoint_IsOUTReceived())
     eb2:	82 ff       	sbrs	r24, 2
     eb4:	5d c0       	rjmp	.+186    	; 0xf70 <TMC_Task+0x350>
		{
			LastTransferLength = 0;
     eb6:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <LastTransferLength+0x1>
     eba:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <LastTransferLength>
			
			curlen = TMC_IO_EPSIZE;
			if (s_remaining_bytes_receive < TMC_IO_EPSIZE)
     ebe:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <s_remaining_bytes_receive>
     ec2:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <s_remaining_bytes_receive+0x1>
     ec6:	a0 91 34 01 	lds	r26, 0x0134	; 0x800134 <s_remaining_bytes_receive+0x2>
     eca:	b0 91 35 01 	lds	r27, 0x0135	; 0x800135 <s_remaining_bytes_receive+0x3>
     ece:	80 34       	cpi	r24, 0x40	; 64
     ed0:	91 05       	cpc	r25, r1
     ed2:	a1 05       	cpc	r26, r1
     ed4:	b1 05       	cpc	r27, r1
     ed6:	10 f4       	brcc	.+4      	; 0xedc <TMC_Task+0x2bc>
			{
				curlen = s_remaining_bytes_receive;
     ed8:	f8 2e       	mov	r15, r24
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <TMC_Task+0x2c0>
		/* Abort if no command has been sent from the host */
		if (Endpoint_IsOUTReceived())
		{
			LastTransferLength = 0;
			
			curlen = TMC_IO_EPSIZE;
     edc:	80 e4       	ldi	r24, 0x40	; 64
			{
				curlen = s_remaining_bytes_receive;
			}
			
			//
			while (Endpoint_Read_Stream_LE(MessagePayload, curlen, &LastTransferLength) ==
     ede:	f8 2e       	mov	r15, r24
     ee0:	cf 2c       	mov	r12, r15
     ee2:	d1 2c       	mov	r13, r1
     ee4:	47 e7       	ldi	r20, 0x77	; 119
     ee6:	51 e0       	ldi	r21, 0x01	; 1
     ee8:	b6 01       	movw	r22, r12
     eea:	ce 01       	movw	r24, r28
     eec:	01 96       	adiw	r24, 0x01	; 1
     eee:	18 d4       	rcall	.+2096   	; 0x1720 <Endpoint_Read_Stream_LE>
     ef0:	85 30       	cpi	r24, 0x05	; 5
     ef2:	21 f4       	brne	.+8      	; 0xefc <TMC_Task+0x2dc>
				   ENDPOINT_RWSTREAM_IncompleteTransfer)
			{
				if (IsTMCBulkOUTReset)
     ef4:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <IsTMCBulkOUTReset>
     ef8:	88 23       	and	r24, r24
     efa:	a1 f3       	breq	.-24     	; 0xee4 <TMC_Task+0x2c4>
				  break;
			}
			s_remaining_bytes_receive -= curlen;
     efc:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <s_remaining_bytes_receive>
     f00:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <s_remaining_bytes_receive+0x1>
     f04:	a0 91 34 01 	lds	r26, 0x0134	; 0x800134 <s_remaining_bytes_receive+0x2>
     f08:	b0 91 35 01 	lds	r27, 0x0135	; 0x800135 <s_remaining_bytes_receive+0x3>
     f0c:	8f 19       	sub	r24, r15
     f0e:	91 09       	sbc	r25, r1
     f10:	a1 09       	sbc	r26, r1
     f12:	b1 09       	sbc	r27, r1
     f14:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <s_remaining_bytes_receive>
     f18:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <s_remaining_bytes_receive+0x1>
     f1c:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <s_remaining_bytes_receive+0x2>
     f20:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <s_remaining_bytes_receive+0x3>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f24:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     f28:	8b 77       	andi	r24, 0x7B	; 123
     f2a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

			Endpoint_ClearOUT();
			
			lastmessage = TMC_eom && (s_remaining_bytes_receive==0);
     f2e:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <TMC_eom>
     f32:	88 23       	and	r24, r24
     f34:	69 f0       	breq	.+26     	; 0xf50 <TMC_Task+0x330>
     f36:	21 e0       	ldi	r18, 0x01	; 1
     f38:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <s_remaining_bytes_receive>
     f3c:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <s_remaining_bytes_receive+0x1>
     f40:	a0 91 34 01 	lds	r26, 0x0134	; 0x800134 <s_remaining_bytes_receive+0x2>
     f44:	b0 91 35 01 	lds	r27, 0x0135	; 0x800135 <s_remaining_bytes_receive+0x3>
     f48:	89 2b       	or	r24, r25
     f4a:	8a 2b       	or	r24, r26
     f4c:	8b 2b       	or	r24, r27
     f4e:	09 f0       	breq	.+2      	; 0xf52 <TMC_Task+0x332>
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	21 70       	andi	r18, 0x01	; 1
     f54:	c3 57       	subi	r28, 0x73	; 115
     f56:	df 4f       	sbci	r29, 0xFF	; 255
     f58:	28 83       	st	Y, r18
     f5a:	cd 58       	subi	r28, 0x8D	; 141
			TMC_LastMessageComplete = lastmessage;
     f5c:	d0 40       	sbci	r29, 0x00	; 0
     f5e:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <TMC_LastMessageComplete>
			ProcessSentMessage(MessagePayload, curlen, false, lastmessage, tmc_gpib_write_timedout);
     f62:	03 e4       	ldi	r16, 0x43	; 67
     f64:	11 e0       	ldi	r17, 0x01	; 1
     f66:	40 e0       	ldi	r20, 0x00	; 0
     f68:	6f 2d       	mov	r22, r15
     f6a:	ce 01       	movw	r24, r28
     f6c:	01 96       	adiw	r24, 0x01	; 1
		}
	}

	if (IsTMCBulkOUTReset || IsTMCBulkINReset)
     f6e:	36 dd       	rcall	.-1428   	; 0x9dc <ProcessSentMessage>
     f70:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <IsTMCBulkOUTReset>
     f74:	81 11       	cpse	r24, r1
     f76:	03 c0       	rjmp	.+6      	; 0xf7e <TMC_Task+0x35e>
     f78:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <IsTMCBulkINReset>
		TMC_resetstates();
     f7c:	81 11       	cpse	r24, r1
     f7e:	e0 dd       	rcall	.-1088   	; 0xb40 <TMC_resetstates>
	
	/* All pending data has been processed - reset the data abort flags */
	IsTMCBulkINReset  = false;
     f80:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <IsTMCBulkINReset>
	IsTMCBulkOUTReset = false;
     f84:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <IsTMCBulkOUTReset>
}
     f88:	c3 57       	subi	r28, 0x73	; 115
     f8a:	df 4f       	sbci	r29, 0xFF	; 255
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
     f90:	de bf       	out	0x3e, r29	; 62
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	cd bf       	out	0x3d, r28	; 61
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	ff 90       	pop	r15
     fa0:	ef 90       	pop	r14
     fa2:	df 90       	pop	r13
     fa4:	cf 90       	pop	r12
     fa6:	bf 90       	pop	r11
     fa8:	08 95       	ret

00000faa <main>:
int main(void)
{
	uint8_t prevaddr;

	//mcusr_mirror = MCUSR; 
	MCUSR = 0; 
     faa:	14 be       	out	0x34, r1	; 52
     fac:	0f b6       	in	r0, 0x3f	; 63
     fae:	f8 94       	cli
     fb0:	a8 95       	wdr
     fb2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     fb6:	88 61       	ori	r24, 0x18	; 24
     fb8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     fbc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     fc0:	0f be       	out	0x3f, r0	; 63
	wdt_disable(); 
	
	PORTB |=  (1<<2); /* PB2 = PULLUP */
     fc2:	2a 9a       	sbi	0x05, 2	; 5
	DDRB  &= ~(1<<2); /* PB2 = input*/
     fc4:	22 98       	cbi	0x04, 2	; 4
	
	SetupHardware();
     fc6:	a1 da       	rcall	.-2750   	; 0x50a <SetupHardware>
	
	gpib_init();
     fc8:	60 d1       	rcall	.+704    	; 0x128a <gpib_init>
     fca:	f9 99       	sbic	0x1f, 1	; 31
	
	/* apply settings from eeprom */
	eeprom_busy_wait();	
     fcc:	fe cf       	rjmp	.-4      	; 0xfca <main+0x20>
     fce:	89 e6       	ldi	r24, 0x69	; 105
	gpib_set_readtermination(eeprom_read_byte((uint8_t*)105));
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	0e 94 84 10 	call	0x2108	; 0x2108 <eeprom_read_byte>
     fd6:	f5 d2       	rcall	.+1514   	; 0x15c2 <gpib_set_readtermination>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     fd8:	78 94       	sei
	
	
	//LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	GlobalInterruptEnable();
	
	while (!gpib_is_connected())
     fda:	36 d1       	rcall	.+620    	; 0x1248 <gpib_is_connected>
     fdc:	81 11       	cpse	r24, r1
     fde:	17 c0       	rjmp	.+46     	; 0x100e <main+0x64>
     fe0:	2f ef       	ldi	r18, 0xFF	; 255
     fe2:	84 e3       	ldi	r24, 0x34	; 52
     fe4:	9c e0       	ldi	r25, 0x0C	; 12
     fe6:	21 50       	subi	r18, 0x01	; 1
     fe8:	80 40       	sbci	r24, 0x00	; 0
     fea:	90 40       	sbci	r25, 0x00	; 0
     fec:	e1 f7       	brne	.-8      	; 0xfe6 <main+0x3c>
     fee:	00 c0       	rjmp	.+0      	; 0xff0 <main+0x46>
     ff0:	00 00       	nop
     ff2:	8d 9a       	sbi	0x11, 5	; 17
	{
		_delay_ms(250);
		LED(1);
     ff4:	ef ef       	ldi	r30, 0xFF	; 255
     ff6:	f4 e3       	ldi	r31, 0x34	; 52
     ff8:	2c e0       	ldi	r18, 0x0C	; 12
     ffa:	e1 50       	subi	r30, 0x01	; 1
     ffc:	f0 40       	sbci	r31, 0x00	; 0
     ffe:	20 40       	sbci	r18, 0x00	; 0
    1000:	e1 f7       	brne	.-8      	; 0xffa <main+0x50>
    1002:	00 c0       	rjmp	.+0      	; 0x1004 <main+0x5a>
    1004:	00 00       	nop
		_delay_ms(250);
		LED(0);
		check_bootloaderEntry();
    1006:	8d 98       	cbi	0x11, 5	; 17
    1008:	64 da       	rcall	.-2872   	; 0x4d2 <check_bootloaderEntry>
    100a:	e7 cf       	rjmp	.-50     	; 0xfda <main+0x30>
			LED(0);
			_delay_ms(500);
			wdt_enable(WDTO_250MS);	
			while (1);
		}
		check_bootloaderEntry();
    100c:	62 da       	rcall	.-2876   	; 0x4d2 <check_bootloaderEntry>
    100e:	6e d9       	rcall	.-3364   	; 0x2ec <findGpibdevice>
		LED(0);
		check_bootloaderEntry();
	}
	
	/* physically GPIB is connected, now check if any GPIB address is responsive */
	while (!findGpibdevice())
    1010:	81 11       	cpse	r24, r1
    1012:	2c c0       	rjmp	.+88     	; 0x106c <main+0xc2>
    1014:	8f ef       	ldi	r24, 0xFF	; 255
    1016:	91 ee       	ldi	r25, 0xE1	; 225
    1018:	e4 e0       	ldi	r30, 0x04	; 4
    101a:	81 50       	subi	r24, 0x01	; 1
    101c:	90 40       	sbci	r25, 0x00	; 0
    101e:	e0 40       	sbci	r30, 0x00	; 0
    1020:	e1 f7       	brne	.-8      	; 0x101a <main+0x70>
    1022:	00 c0       	rjmp	.+0      	; 0x1024 <main+0x7a>
    1024:	00 00       	nop
    1026:	8d 9a       	sbi	0x11, 5	; 17
    1028:	ff ef       	ldi	r31, 0xFF	; 255
	{
		_delay_ms(100);
		LED(1);
    102a:	21 ee       	ldi	r18, 0xE1	; 225
    102c:	84 e0       	ldi	r24, 0x04	; 4
    102e:	f1 50       	subi	r31, 0x01	; 1
    1030:	20 40       	sbci	r18, 0x00	; 0
    1032:	80 40       	sbci	r24, 0x00	; 0
    1034:	e1 f7       	brne	.-8      	; 0x102e <main+0x84>
    1036:	00 c0       	rjmp	.+0      	; 0x1038 <main+0x8e>
    1038:	00 00       	nop
    103a:	8d 98       	cbi	0x11, 5	; 17
		_delay_ms(100);
		LED(0);
    103c:	05 d1       	rcall	.+522    	; 0x1248 <gpib_is_connected>
		if (!gpib_is_connected()) /* we want to reset here if the device is unplugged */
    103e:	81 11       	cpse	r24, r1
    1040:	e5 cf       	rjmp	.-54     	; 0x100c <main+0x62>
    1042:	8d 98       	cbi	0x11, 5	; 17
    1044:	9f ef       	ldi	r25, 0xFF	; 255
		{
			LED(0);
    1046:	e9 e6       	ldi	r30, 0x69	; 105
    1048:	f8 e1       	ldi	r31, 0x18	; 24
    104a:	91 50       	subi	r25, 0x01	; 1
    104c:	e0 40       	sbci	r30, 0x00	; 0
    104e:	f0 40       	sbci	r31, 0x00	; 0
    1050:	e1 f7       	brne	.-8      	; 0x104a <main+0xa0>
    1052:	00 c0       	rjmp	.+0      	; 0x1054 <main+0xaa>
    1054:	00 00       	nop
    1056:	9c e0       	ldi	r25, 0x0C	; 12
    1058:	88 e1       	ldi	r24, 0x18	; 24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	f8 94       	cli
    105e:	a8 95       	wdr
    1060:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    106a:	ff cf       	rjmp	.-2      	; 0x106a <main+0xc0>
    106c:	f9 99       	sbic	0x1f, 1	; 31
    106e:	fe cf       	rjmp	.-4      	; 0x106c <main+0xc2>
			while (1);
		}
		check_bootloaderEntry();
	}; /* Identify the GPIB Address of the connected GPIB device */
	
	eeprom_busy_wait();
    1070:	88 e6       	ldi	r24, 0x68	; 104
    1072:	90 e0       	ldi	r25, 0x00	; 0
	if (eeprom_read_byte((uint8_t*)104) != 0x01)
    1074:	0e 94 84 10 	call	0x2108	; 0x2108 <eeprom_read_byte>
    1078:	81 30       	cpi	r24, 0x01	; 1
    107a:	81 f1       	breq	.+96     	; 0x10dc <main+0x132>
    107c:	f9 99       	sbic	0x1f, 1	; 31
	{
		/* found a responsive GPIB address, now setup USB descriptor with *IDN? or ID? command response */
		eeprom_busy_wait();
    107e:	fe cf       	rjmp	.-4      	; 0x107c <main+0xd2>
    1080:	80 e0       	ldi	r24, 0x00	; 0
		prevaddr = eeprom_read_byte((uint8_t*)0); /* read previous gpib address */
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	0e 94 84 10 	call	0x2108	; 0x2108 <eeprom_read_byte>
    1088:	c8 2f       	mov	r28, r24
		if (identifyGpibDevice())
    108a:	fe d9       	rcall	.-3076   	; 0x488 <identifyGpibDevice>
    108c:	88 23       	and	r24, r24
    108e:	99 f0       	breq	.+38     	; 0x10b6 <main+0x10c>
    1090:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <gpib_addr>
		{ /* received a string over GPIB => Store it in EEPROM, if it changed */
			uint8_t *pdat, i;
			
			/* update gpib address and usb string descriptor in eeprom */
			eeprom_update_if_changed(0, gpib_addr);
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	1f da       	rcall	.-3010   	; 0x4d8 <eeprom_update_if_changed>
    109a:	0a e8       	ldi	r16, 0x8A	; 138
    109c:	11 e0       	ldi	r17, 0x01	; 1
    109e:	c0 e0       	ldi	r28, 0x00	; 0
    10a0:	d0 e0       	ldi	r29, 0x00	; 0
    10a2:	f8 01       	movw	r30, r16
			pdat = (void *)&tmc_serial_string;
			for (i=0; i<sizeof(tmc_serial_string); i++)
			{
				eeprom_update_if_changed(1+i, *pdat++);
    10a4:	61 91       	ld	r22, Z+
    10a6:	8f 01       	movw	r16, r30
    10a8:	21 96       	adiw	r28, 0x01	; 1
    10aa:	ce 01       	movw	r24, r28
    10ac:	15 da       	rcall	.-3030   	; 0x4d8 <eeprom_update_if_changed>
    10ae:	c6 36       	cpi	r28, 0x66	; 102
    10b0:	d1 05       	cpc	r29, r1
			uint8_t *pdat, i;
			
			/* update gpib address and usb string descriptor in eeprom */
			eeprom_update_if_changed(0, gpib_addr);
			pdat = (void *)&tmc_serial_string;
			for (i=0; i<sizeof(tmc_serial_string); i++)
    10b2:	b9 f7       	brne	.-18     	; 0x10a2 <main+0xf8>
    10b4:	22 c0       	rjmp	.+68     	; 0x10fa <main+0x150>
    10b6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
				eeprom_update_if_changed(1+i, *pdat++);
			}
		}
		else
		{ /* received NO string over GPIB => Check, if the GPIB addr matches the one in eeprom, then report EEProm string! */
			if (prevaddr == gpib_addr)
    10ba:	c8 13       	cpse	r28, r24
    10bc:	1e c0       	rjmp	.+60     	; 0x10fa <main+0x150>
    10be:	0a e8       	ldi	r16, 0x8A	; 138
    10c0:	11 e0       	ldi	r17, 0x01	; 1
    10c2:	c1 e0       	ldi	r28, 0x01	; 1
    10c4:	d0 e0       	ldi	r29, 0x00	; 0
    10c6:	ce 01       	movw	r24, r28
    10c8:	0e 94 84 10 	call	0x2108	; 0x2108 <eeprom_read_byte>

				/* update gpib address and usb string descriptor in eeprom */
				pdat = (void *)&tmc_serial_string;
				for (i=0; i<sizeof(tmc_serial_string); i++)
				{
					*pdat++ = eeprom_read_byte((uint8_t*)(1+i));
    10cc:	f8 01       	movw	r30, r16
    10ce:	81 93       	st	Z+, r24
    10d0:	8f 01       	movw	r16, r30
    10d2:	21 96       	adiw	r28, 0x01	; 1
			{
				uint8_t *pdat, i;

				/* update gpib address and usb string descriptor in eeprom */
				pdat = (void *)&tmc_serial_string;
				for (i=0; i<sizeof(tmc_serial_string); i++)
    10d4:	c7 36       	cpi	r28, 0x67	; 103
    10d6:	d1 05       	cpc	r29, r1
    10d8:	b1 f7       	brne	.-20     	; 0x10c6 <main+0x11c>
    10da:	0f c0       	rjmp	.+30     	; 0x10fa <main+0x150>
			}
		}
	}
	else /* user disabled fully automated detection mode */
	{
		TMC_SetInternalSerial(true);
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	37 d8       	rcall	.-3986   	; 0x14e <TMC_SetInternalSerial>
    10e0:	80 e0       	ldi	r24, 0x00	; 0
		gpib_ren(false);
    10e2:	b9 d0       	rcall	.+370    	; 0x1256 <gpib_ren>
    10e4:	ff ef       	ldi	r31, 0xFF	; 255
    10e6:	21 ee       	ldi	r18, 0xE1	; 225
    10e8:	84 e0       	ldi	r24, 0x04	; 4
    10ea:	f1 50       	subi	r31, 0x01	; 1
    10ec:	20 40       	sbci	r18, 0x00	; 0
    10ee:	80 40       	sbci	r24, 0x00	; 0
    10f0:	e1 f7       	brne	.-8      	; 0x10ea <main+0x140>
		_delay_ms(100);
		gpib_ren(true);
    10f2:	00 c0       	rjmp	.+0      	; 0x10f4 <main+0x14a>
    10f4:	00 00       	nop
    10f6:	81 e0       	ldi	r24, 0x01	; 1
	}

	/* all fine, now kickoff connect to USB to be able to communicate! */
	LED(1);
    10f8:	ae d0       	rcall	.+348    	; 0x1256 <gpib_ren>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    10fa:	8d 9a       	sbi	0x11, 5	; 17
    10fc:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
    1100:	8e 7f       	andi	r24, 0xFE	; 254
    1102:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
	USB_Attach();
	
	for (;;)
	{
		TMC_Task();
    1106:	8c dd       	rcall	.-1256   	; 0xc20 <TMC_Task>
		
		check_bootloaderEntry();
    1108:	e4 d9       	rcall	.-3128   	; 0x4d2 <check_bootloaderEntry>
    110a:	9e d0       	rcall	.+316    	; 0x1248 <gpib_is_connected>
		
		if (!gpib_is_connected()) /* check, if gpib is disconnected */
    110c:	81 11       	cpse	r24, r1
    110e:	1a c0       	rjmp	.+52     	; 0x1144 <main+0x19a>
    1110:	8d 98       	cbi	0x11, 5	; 17
    1112:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1116:	81 60       	ori	r24, 0x01	; 1
    1118:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
    111c:	9f ef       	ldi	r25, 0xFF	; 255
    111e:	e9 e6       	ldi	r30, 0x69	; 105
    1120:	f8 e1       	ldi	r31, 0x18	; 24
    1122:	91 50       	subi	r25, 0x01	; 1
    1124:	e0 40       	sbci	r30, 0x00	; 0
    1126:	f0 40       	sbci	r31, 0x00	; 0
    1128:	e1 f7       	brne	.-8      	; 0x1122 <main+0x178>
    112a:	00 c0       	rjmp	.+0      	; 0x112c <main+0x182>
    112c:	00 00       	nop
    112e:	9c e0       	ldi	r25, 0x0C	; 12
    1130:	88 e1       	ldi	r24, 0x18	; 24
    1132:	0f b6       	in	r0, 0x3f	; 63
    1134:	f8 94       	cli
    1136:	a8 95       	wdr
    1138:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    113c:	0f be       	out	0x3f, r0	; 63
    113e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    1142:	ff cf       	rjmp	.-2      	; 0x1142 <main+0x198>
    1144:	b2 d7       	rcall	.+3940   	; 0x20aa <USB_USBTask>
			_delay_ms(500);
			wdt_enable(WDTO_250MS);	
			while (1);
		}
		
		USB_USBTask();
    1146:	df cf       	rjmp	.-66     	; 0x1106 <main+0x15c>

00001148 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
	
	*DescriptorMemorySpace = MEMSPACE_FLASH;
    1148:	f9 01       	movw	r30, r18
    114a:	10 82       	st	Z, r1

	switch (DescriptorType)
    114c:	69 2f       	mov	r22, r25
    114e:	77 27       	eor	r23, r23
    1150:	62 30       	cpi	r22, 0x02	; 2
    1152:	71 05       	cpc	r23, r1
    1154:	59 f0       	breq	.+22     	; 0x116c <CALLBACK_USB_GetDescriptor+0x24>
    1156:	63 30       	cpi	r22, 0x03	; 3
    1158:	71 05       	cpc	r23, r1
    115a:	69 f0       	breq	.+26     	; 0x1176 <CALLBACK_USB_GetDescriptor+0x2e>
    115c:	61 30       	cpi	r22, 0x01	; 1
    115e:	71 05       	cpc	r23, r1
    1160:	49 f5       	brne	.+82     	; 0x11b4 <CALLBACK_USB_GetDescriptor+0x6c>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    1162:	82 e1       	ldi	r24, 0x12	; 18
    1164:	90 e0       	ldi	r25, 0x00	; 0
	*DescriptorMemorySpace = MEMSPACE_FLASH;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    1166:	21 e0       	ldi	r18, 0x01	; 1
    1168:	31 e0       	ldi	r19, 0x01	; 1
    116a:	28 c0       	rjmp	.+80     	; 0x11bc <CALLBACK_USB_GetDescriptor+0x74>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    116c:	87 e2       	ldi	r24, 0x27	; 39
    116e:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    1170:	2a ed       	ldi	r18, 0xDA	; 218
    1172:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    1174:	23 c0       	rjmp	.+70     	; 0x11bc <CALLBACK_USB_GetDescriptor+0x74>
		case DTYPE_String:
			switch (DescriptorNumber)
    1176:	99 27       	eor	r25, r25
    1178:	81 30       	cpi	r24, 0x01	; 1
    117a:	91 05       	cpc	r25, r1
    117c:	91 f0       	breq	.+36     	; 0x11a2 <CALLBACK_USB_GetDescriptor+0x5a>
    117e:	70 f0       	brcs	.+28     	; 0x119c <CALLBACK_USB_GetDescriptor+0x54>
    1180:	82 30       	cpi	r24, 0x02	; 2
    1182:	91 05       	cpc	r25, r1
    1184:	89 f0       	breq	.+34     	; 0x11a8 <CALLBACK_USB_GetDescriptor+0x60>
    1186:	03 97       	sbiw	r24, 0x03	; 3
    1188:	a9 f4       	brne	.+42     	; 0x11b4 <CALLBACK_USB_GetDescriptor+0x6c>
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
				case STRING_ID_Serial:
					Address = &tmc_serial_string;
					Size = tmc_serial_string.Header.Size;
    118a:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <tmc_serial_string>
    118e:	90 e0       	ldi	r25, 0x00	; 0
					*DescriptorMemorySpace = MEMSPACE_RAM;
    1190:	62 e0       	ldi	r22, 0x02	; 2
    1192:	f9 01       	movw	r30, r18
    1194:	60 83       	st	Z, r22
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
				case STRING_ID_Serial:
					Address = &tmc_serial_string;
    1196:	2a e8       	ldi	r18, 0x8A	; 138
    1198:	31 e0       	ldi	r19, 0x01	; 1
					Size = tmc_serial_string.Header.Size;
					*DescriptorMemorySpace = MEMSPACE_RAM;
					break;
    119a:	10 c0       	rjmp	.+32     	; 0x11bc <CALLBACK_USB_GetDescriptor+0x74>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
    119c:	e6 ed       	ldi	r30, 0xD6	; 214
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	05 c0       	rjmp	.+10     	; 0x11ac <CALLBACK_USB_GetDescriptor+0x64>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    11a2:	ee eb       	ldi	r30, 0xBE	; 190
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <CALLBACK_USB_GetDescriptor+0x64>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    11a8:	ec ea       	ldi	r30, 0xAC	; 172
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	84 91       	lpm	r24, Z
    11ae:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
    11b0:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
    11b2:	04 c0       	rjmp	.+8      	; 0x11bc <CALLBACK_USB_GetDescriptor+0x74>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	90 e0       	ldi	r25, 0x00	; 0
			                        uint8_t* const DescriptorMemorySpace)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    11b8:	20 e0       	ldi	r18, 0x00	; 0
    11ba:	30 e0       	ldi	r19, 0x00	; 0
					break;
			}
			break;
	}

	*DescriptorAddress = Address;
    11bc:	fa 01       	movw	r30, r20
    11be:	31 83       	std	Z+1, r19	; 0x01
    11c0:	20 83       	st	Z, r18
	return Size;
}
    11c2:	08 95       	ret

000011c4 <is_timedout>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11c4:	85 e3       	ldi	r24, 0x35	; 53
    11c6:	8a 95       	dec	r24
    11c8:	f1 f7       	brne	.-4      	; 0x11c6 <is_timedout+0x2>
    11ca:	00 00       	nop
}

static bool is_timedout(void)
{
	_delay_us(10);
	if (timeout_val == 0)
    11cc:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <timeout_val>
    11d0:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <timeout_val+0x1>
    11d4:	00 97       	sbiw	r24, 0x00	; 0
    11d6:	39 f0       	breq	.+14     	; 0x11e6 <is_timedout+0x22>
		return true;
		
	timeout_val--;
    11d8:	01 97       	sbiw	r24, 0x01	; 1
    11da:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <timeout_val+0x1>
    11de:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <timeout_val>
	return false;
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	08 95       	ret

static bool is_timedout(void)
{
	_delay_us(10);
	if (timeout_val == 0)
		return true;
    11e6:	81 e0       	ldi	r24, 0x01	; 1
		
	timeout_val--;
	return false;
}
    11e8:	08 95       	ret

000011ea <__vector_23>:
	timer0_100mscounter = 0;
}


ISR (TIMER0_OVF_vect)
{
    11ea:	1f 92       	push	r1
    11ec:	0f 92       	push	r0
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	0f 92       	push	r0
    11f2:	11 24       	eor	r1, r1
    11f4:	8f 93       	push	r24
	timer0_div++;
    11f6:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <timer0_div>
    11fa:	8f 5f       	subi	r24, 0xFF	; 255
    11fc:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <timer0_div>
	if (timer0_div >= 6) /* are 100ms passed? */
    1200:	86 30       	cpi	r24, 0x06	; 6
    1202:	e0 f0       	brcs	.+56     	; 0x123c <__vector_23+0x52>
	{
		timer0_100mscounter++;
    1204:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <timer0_100mscounter>
    1208:	8f 5f       	subi	r24, 0xFF	; 255
    120a:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <timer0_100mscounter>
		timer0_div = 0;
    120e:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <timer0_div>
		
		if (!s_gpib_transaction_active) /* only check, if no GPIB transaction is active */
    1212:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <s_gpib_transaction_active>
    1216:	81 11       	cpse	r24, r1
    1218:	11 c0       	rjmp	.+34     	; 0x123c <__vector_23+0x52>
		{
			if (!ATN_STATE) /* is ATN LOW? This can only happen if no GPIB device is connected/powered */
    121a:	7e 99       	sbic	0x0f, 6	; 15
    121c:	0a c0       	rjmp	.+20     	; 0x1232 <__vector_23+0x48>
			{
				if (s_gpib_disconnect_counter == 2)
    121e:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <s_gpib_disconnect_counter>
    1222:	82 30       	cpi	r24, 0x02	; 2
    1224:	11 f4       	brne	.+4      	; 0x122a <__vector_23+0x40>
				{ /* after 100-200ms with ATN low, assume, that there is no GPIB device connected */
					s_device_state = GPIB_DEVICE_CONNECTSTATE_DISCONNECTED;
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	07 c0       	rjmp	.+14     	; 0x1238 <__vector_23+0x4e>
				}
				else
				{
					s_gpib_disconnect_counter++;
    122a:	8f 5f       	subi	r24, 0xFF	; 255
    122c:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <s_gpib_disconnect_counter>
    1230:	05 c0       	rjmp	.+10     	; 0x123c <__vector_23+0x52>
				}
			}
			else
			{ /* device is connected */
				s_gpib_disconnect_counter = 0;
    1232:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <s_gpib_disconnect_counter>
				s_device_state = GPIB_DEVICE_CONNECTSTATE_CONNECTED;
    1236:	82 e0       	ldi	r24, 0x02	; 2
    1238:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <s_device_state>
			}
		}
	}
}
    123c:	8f 91       	pop	r24
    123e:	0f 90       	pop	r0
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	0f 90       	pop	r0
    1244:	1f 90       	pop	r1
    1246:	18 95       	reti

00001248 <gpib_is_connected>:
	timer_init(); /* init timeout timer */
}

bool gpib_is_connected(void)
{
	return s_device_state == GPIB_DEVICE_CONNECTSTATE_CONNECTED;
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <s_device_state>
    124e:	92 30       	cpi	r25, 0x02	; 2
    1250:	09 f0       	breq	.+2      	; 0x1254 <gpib_is_connected+0xc>
    1252:	80 e0       	ldi	r24, 0x00	; 0
}
    1254:	08 95       	ret

00001256 <gpib_ren>:

void gpib_ren(bool enable)
{
	if (enable)
    1256:	88 23       	and	r24, r24
    1258:	11 f0       	breq	.+4      	; 0x125e <gpib_ren+0x8>
	{
		REN_LOW; /* remote enable */
    125a:	25 9a       	sbi	0x04, 5	; 4
    125c:	08 95       	ret
	}
	else
	{
		REN_HIGH; /* remote disable */
    125e:	25 98       	cbi	0x04, 5	; 4
    1260:	08 95       	ret

00001262 <gpib_interface_clear>:



void gpib_interface_clear(void)
{
	IFC_LOW; /* interface clear */
    1262:	6a 9a       	sbi	0x0d, 2	; 13
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1264:	2f ef       	ldi	r18, 0xFF	; 255
    1266:	81 ee       	ldi	r24, 0xE1	; 225
    1268:	94 e0       	ldi	r25, 0x04	; 4
    126a:	21 50       	subi	r18, 0x01	; 1
    126c:	80 40       	sbci	r24, 0x00	; 0
    126e:	90 40       	sbci	r25, 0x00	; 0
    1270:	e1 f7       	brne	.-8      	; 0x126a <gpib_interface_clear+0x8>
    1272:	00 c0       	rjmp	.+0      	; 0x1274 <gpib_interface_clear+0x12>
    1274:	00 00       	nop
	_delay_ms(100);
	IFC_HIGH; /* interface clear */
    1276:	6a 98       	cbi	0x0d, 2	; 13
    1278:	8f e3       	ldi	r24, 0x3F	; 63
    127a:	9c e9       	ldi	r25, 0x9C	; 156
    127c:	01 97       	sbiw	r24, 0x01	; 1
    127e:	f1 f7       	brne	.-4      	; 0x127c <gpib_interface_clear+0x1a>
    1280:	00 c0       	rjmp	.+0      	; 0x1282 <gpib_interface_clear+0x20>
    1282:	00 00       	nop
	_delay_ms(10);
	s_gpib_transaction_active = false;
    1284:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <s_gpib_transaction_active>
    1288:	08 95       	ret

0000128a <gpib_init>:
 **********************************************************************************************************/

void gpib_init(void)
{
// PB5 = REN
	DDRD  = 0x00;
    128a:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0x00;
    128c:	1b b8       	out	0x0b, r1	; 11
	PORTB &= ~((1<<4) | (1<<5) | (1<<6));
    128e:	85 b1       	in	r24, 0x05	; 5
    1290:	8f 78       	andi	r24, 0x8F	; 143
    1292:	85 b9       	out	0x05, r24	; 5
	DDRB  &= ~((1<<4) | (1<<5) | (1<<6));
    1294:	84 b1       	in	r24, 0x04	; 4
    1296:	8f 78       	andi	r24, 0x8F	; 143
    1298:	84 b9       	out	0x04, r24	; 4
	PORTC &= ~((1<<6) | (1<<7));
    129a:	88 b1       	in	r24, 0x08	; 8
    129c:	8f 73       	andi	r24, 0x3F	; 63
    129e:	88 b9       	out	0x08, r24	; 8
	DDRC  &= ~((1<<6) | (1<<7));
    12a0:	87 b1       	in	r24, 0x07	; 7
    12a2:	8f 73       	andi	r24, 0x3F	; 63
    12a4:	87 b9       	out	0x07, r24	; 7
	PORTE &= ~(1<<2);
    12a6:	72 98       	cbi	0x0e, 2	; 14
	DDRE  &= ~(1<<2);
    12a8:	6a 98       	cbi	0x0d, 2	; 13
	PORTF &= ~((1<<6) | (1<<7));
    12aa:	81 b3       	in	r24, 0x11	; 17
    12ac:	8f 73       	andi	r24, 0x3F	; 63
    12ae:	81 bb       	out	0x11, r24	; 17
	DDRF  &= ~((1<<6) | (1<<7));
    12b0:	80 b3       	in	r24, 0x10	; 16
    12b2:	8f 73       	andi	r24, 0x3F	; 63
    12b4:	80 bb       	out	0x10, r24	; 16
	
	DDRB |= (1<<5); /* remote enable */
    12b6:	25 9a       	sbi	0x04, 5	; 4

	s_gpib_transaction_active = false;
    12b8:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <s_gpib_transaction_active>
	s_gpib_disconnect_counter = 0;
    12bc:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <s_gpib_disconnect_counter>
	
	gpib_interface_clear();
    12c0:	d0 df       	rcall	.-96     	; 0x1262 <gpib_interface_clear>
}
*/

static void timer_init(void)
{
	TCCR0B = 5; // Prescaler 1024 = 15625 Hz
    12c2:	85 e0       	ldi	r24, 0x05	; 5
    12c4:	85 bd       	out	0x25, r24	; 37
	// Overflow Interrupt erlauben
	TIMSK0 |= (1<<TOIE0);
    12c6:	ee e6       	ldi	r30, 0x6E	; 110
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	81 60       	ori	r24, 0x01	; 1
    12ce:	80 83       	st	Z, r24
	timer0_div = 0;
    12d0:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <timer0_div>
	timer0_100mscounter = 0;
    12d4:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <timer0_100mscounter>
    12d8:	08 95       	ret

000012da <gpib_tx>:
{
	gpib_init();
}

static bool gpib_tx(uint8_t dat, bool iscommand, gpibtimeout_t ptimeoutfunc)
{
    12da:	0f 93       	push	r16
    12dc:	1f 93       	push	r17
    12de:	cf 93       	push	r28
    12e0:	8a 01       	movw	r16, r20
	bool timedout;
	
	DAV_HIGH;
    12e2:	26 98       	cbi	0x04, 6	; 4
	NRFD_HIGH;
    12e4:	3e 98       	cbi	0x07, 6	; 7
	NDAC_HIGH;  /* they should be already high, but let's enforce it */
    12e6:	3f 98       	cbi	0x07, 7	; 7
	
	if (iscommand)
    12e8:	66 23       	and	r22, r22
    12ea:	11 f0       	breq	.+4      	; 0x12f0 <gpib_tx+0x16>
		ATN_LOW;
    12ec:	86 9a       	sbi	0x10, 6	; 16
    12ee:	01 c0       	rjmp	.+2      	; 0x12f2 <gpib_tx+0x18>
	else
		ATN_HIGH;
    12f0:	86 98       	cbi	0x10, 6	; 16

	DDRD = dat;   /* set Data to data bus */
    12f2:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12f4:	85 e0       	ldi	r24, 0x05	; 5
    12f6:	8a 95       	dec	r24
    12f8:	f1 f7       	brne	.-4      	; 0x12f6 <gpib_tx+0x1c>
    12fa:	00 00       	nop
	_delay_us(1); /* wait for data to settle */
		
	/* wait until ready for data acceptance (NRFD=H, NDAC=L)*/
	do
	{
		timedout = ptimeoutfunc();
    12fc:	f8 01       	movw	r30, r16
    12fe:	09 95       	icall
    1300:	c8 2f       	mov	r28, r24
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    1302:	36 99       	sbic	0x06, 6	; 6
    1304:	03 c0       	rjmp	.+6      	; 0x130c <gpib_tx+0x32>
    1306:	88 23       	and	r24, r24
    1308:	c9 f3       	breq	.-14     	; 0x12fc <gpib_tx+0x22>
    130a:	0b c0       	rjmp	.+22     	; 0x1322 <gpib_tx+0x48>

	if (!timedout)
    130c:	81 11       	cpse	r24, r1
    130e:	09 c0       	rjmp	.+18     	; 0x1322 <gpib_tx+0x48>
	{
		DAV_LOW;
    1310:	26 9a       	sbi	0x04, 6	; 4
		do
		{
			timedout = ptimeoutfunc();
    1312:	f8 01       	movw	r30, r16
    1314:	09 95       	icall
    1316:	c8 2f       	mov	r28, r24
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    1318:	37 99       	sbic	0x06, 7	; 6
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <gpib_tx+0x46>
    131c:	88 23       	and	r24, r24
    131e:	c9 f3       	breq	.-14     	; 0x1312 <gpib_tx+0x38>
		DAV_HIGH; 
    1320:	26 98       	cbi	0x04, 6	; 4
	}
	
	DDRD = 0x00; /* release data bus */
    1322:	1a b8       	out	0x0a, r1	; 10
	ATN_HIGH;	 
    1324:	86 98       	cbi	0x10, 6	; 16
	
	if (timedout)
    1326:	c1 11       	cpse	r28, r1

static char s_terminator = '\0'; /* \0 = no termination character - EOI only, other options are '\n' or '\r' */
 
static void gpib_recover(void)
{
	gpib_init();
    1328:	b0 df       	rcall	.-160    	; 0x128a <gpib_init>
	if (timedout)
	{
		gpib_recover();
	}
	return timedout;
}
    132a:	8c 2f       	mov	r24, r28
    132c:	cf 91       	pop	r28
    132e:	1f 91       	pop	r17
    1330:	0f 91       	pop	r16
    1332:	08 95       	ret

00001334 <gpib_cmd_TAG>:
	return gpib_tx(addr | 0x60, true, ptimeoutfunc);
}


static bool gpib_cmd_TAG(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    1334:	0f 93       	push	r16
    1336:	1f 93       	push	r17
    1338:	cf 93       	push	r28
    133a:	c8 2f       	mov	r28, r24
    133c:	8b 01       	movw	r16, r22
	bool result;
	result = gpib_tx((addr & 0x1f) | 0x40, true, ptimeoutfunc);
    133e:	8f 71       	andi	r24, 0x1F	; 31
    1340:	ab 01       	movw	r20, r22
    1342:	61 e0       	ldi	r22, 0x01	; 1
    1344:	80 64       	ori	r24, 0x40	; 64
    1346:	c9 df       	rcall	.-110    	; 0x12da <gpib_tx>
	if (addr & 0xe0)
    1348:	c0 7e       	andi	r28, 0xE0	; 224
    134a:	39 f0       	breq	.+14     	; 0x135a <gpib_cmd_TAG+0x26>
	{ /* send a secondary address? */
		result = gpib_tx(0x60, true, ptimeoutfunc);        // SAG (SA0)	
    134c:	a8 01       	movw	r20, r16
    134e:	61 e0       	ldi	r22, 0x01	; 1
    1350:	80 e6       	ldi	r24, 0x60	; 96
	}
	return result;
}
    1352:	cf 91       	pop	r28
    1354:	1f 91       	pop	r17
{
	bool result;
	result = gpib_tx((addr & 0x1f) | 0x40, true, ptimeoutfunc);
	if (addr & 0xe0)
	{ /* send a secondary address? */
		result = gpib_tx(0x60, true, ptimeoutfunc);        // SAG (SA0)	
    1356:	0f 91       	pop	r16
    1358:	c0 cf       	rjmp	.-128    	; 0x12da <gpib_tx>
	}
	return result;
}
    135a:	cf 91       	pop	r28
    135c:	1f 91       	pop	r17
    135e:	0f 91       	pop	r16
    1360:	08 95       	ret

00001362 <gpib_cmd_LAG>:
	return gpib_tx(dat, false, ptimeoutfunc);
}


static bool gpib_cmd_LAG(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    1362:	0f 93       	push	r16
    1364:	1f 93       	push	r17
    1366:	cf 93       	push	r28
    1368:	c8 2f       	mov	r28, r24
    136a:	8b 01       	movw	r16, r22
	bool result;
	result = gpib_tx((addr & 0x1f) | 0x20, true, ptimeoutfunc);
    136c:	8f 71       	andi	r24, 0x1F	; 31
    136e:	ab 01       	movw	r20, r22
    1370:	61 e0       	ldi	r22, 0x01	; 1
    1372:	80 62       	ori	r24, 0x20	; 32
    1374:	b2 df       	rcall	.-156    	; 0x12da <gpib_tx>
	if (addr & 0xe0)
    1376:	c0 7e       	andi	r28, 0xE0	; 224
    1378:	39 f0       	breq	.+14     	; 0x1388 <gpib_cmd_LAG+0x26>
	{ /* send a secondary address? */
		result = gpib_tx(0x60, true, ptimeoutfunc);        // SAG (SA0)
    137a:	a8 01       	movw	r20, r16
    137c:	61 e0       	ldi	r22, 0x01	; 1
    137e:	80 e6       	ldi	r24, 0x60	; 96
	}
	return result;
}
    1380:	cf 91       	pop	r28
    1382:	1f 91       	pop	r17
{
	bool result;
	result = gpib_tx((addr & 0x1f) | 0x20, true, ptimeoutfunc);
	if (addr & 0xe0)
	{ /* send a secondary address? */
		result = gpib_tx(0x60, true, ptimeoutfunc);        // SAG (SA0)
    1384:	0f 91       	pop	r16
    1386:	a9 cf       	rjmp	.-174    	; 0x12da <gpib_tx>
	}
	return result;
}
    1388:	cf 91       	pop	r28
    138a:	1f 91       	pop	r17
    138c:	0f 91       	pop	r16
    138e:	08 95       	ret

00001390 <gpib_cmd_UNL>:
	return result;
}

static bool gpib_cmd_UNL(gpibtimeout_t ptimeoutfunc)
{
	return gpib_tx(0x3F, true, ptimeoutfunc);
    1390:	ac 01       	movw	r20, r24
    1392:	61 e0       	ldi	r22, 0x01	; 1
    1394:	8f e3       	ldi	r24, 0x3F	; 63
    1396:	a1 cf       	rjmp	.-190    	; 0x12da <gpib_tx>

00001398 <gpib_trigger>:

}


bool gpib_trigger(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    1398:	cf 93       	push	r28
    139a:	df 93       	push	r29
    139c:	eb 01       	movw	r28, r22
	bool timedout;
	
	timedout = gpib_cmd_LAG(addr, ptimeoutfunc); 
    139e:	e1 df       	rcall	.-62     	; 0x1362 <gpib_cmd_LAG>
	if (!timedout)
    13a0:	81 11       	cpse	r24, r1
    13a2:	0a c0       	rjmp	.+20     	; 0x13b8 <gpib_trigger+0x20>
	return gpib_tx(0x19, true, ptimeoutfunc);
}

static bool gpib_cmd_GET(gpibtimeout_t ptimeoutfunc) // group execute trigger (addressed command)
{
	return gpib_tx(0x08, true, ptimeoutfunc);
    13a4:	ae 01       	movw	r20, r28
    13a6:	61 e0       	ldi	r22, 0x01	; 1
    13a8:	88 e0       	ldi	r24, 0x08	; 8
    13aa:	97 df       	rcall	.-210    	; 0x12da <gpib_tx>
	bool timedout;
	
	timedout = gpib_cmd_LAG(addr, ptimeoutfunc); 
	if (!timedout)
		timedout = gpib_cmd_GET(ptimeoutfunc);
	if (!timedout)
    13ac:	81 11       	cpse	r24, r1
		timedout = gpib_cmd_UNL(ptimeoutfunc);
    13ae:	04 c0       	rjmp	.+8      	; 0x13b8 <gpib_trigger+0x20>
    13b0:	ce 01       	movw	r24, r28
		
	if (timedout)
    13b2:	ee df       	rcall	.-36     	; 0x1390 <gpib_cmd_UNL>
    13b4:	88 23       	and	r24, r24

static char s_terminator = '\0'; /* \0 = no termination character - EOI only, other options are '\n' or '\r' */
 
static void gpib_recover(void)
{
	gpib_init();
    13b6:	11 f0       	breq	.+4      	; 0x13bc <gpib_trigger+0x24>
    13b8:	68 df       	rcall	.-304    	; 0x128a <gpib_init>
    13ba:	81 e0       	ldi	r24, 0x01	; 1
		timedout = gpib_cmd_UNL(ptimeoutfunc);
		
	if (timedout)
		gpib_recover();
	return timedout;
}
    13bc:	df 91       	pop	r29
    13be:	cf 91       	pop	r28
    13c0:	08 95       	ret

000013c2 <gpib_gotoLocal>:
		gpib_recover();
	return timedout;
}

bool gpib_gotoLocal(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    13c2:	cf 93       	push	r28
    13c4:	df 93       	push	r29
    13c6:	eb 01       	movw	r28, r22
	bool timedout;
	
	timedout = gpib_cmd_LAG(addr, ptimeoutfunc); 
    13c8:	cc df       	rcall	.-104    	; 0x1362 <gpib_cmd_LAG>
	if (!timedout)
    13ca:	81 11       	cpse	r24, r1
    13cc:	09 c0       	rjmp	.+18     	; 0x13e0 <gpib_gotoLocal+0x1e>
	return gpib_tx(0x11, true, ptimeoutfunc);
}

static bool gpib_cmd_GTL(gpibtimeout_t ptimeoutfunc) // goto local
{
	return gpib_tx(0x01, true, ptimeoutfunc);
    13ce:	ae 01       	movw	r20, r28
    13d0:	61 e0       	ldi	r22, 0x01	; 1
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	82 df       	rcall	.-252    	; 0x12da <gpib_tx>
	
	timedout = gpib_cmd_LAG(addr, ptimeoutfunc); 
	if (!timedout)
		timedout = gpib_cmd_GTL(ptimeoutfunc);
		
	if (!timedout)
    13d6:	81 11       	cpse	r24, r1
		timedout = gpib_cmd_UNL(ptimeoutfunc);
    13d8:	03 c0       	rjmp	.+6      	; 0x13e0 <gpib_gotoLocal+0x1e>
    13da:	ce 01       	movw	r24, r28
		
	if (timedout)
    13dc:	d9 df       	rcall	.-78     	; 0x1390 <gpib_cmd_UNL>

static char s_terminator = '\0'; /* \0 = no termination character - EOI only, other options are '\n' or '\r' */
 
static void gpib_recover(void)
{
	gpib_init();
    13de:	81 11       	cpse	r24, r1
    13e0:	54 df       	rcall	.-344    	; 0x128a <gpib_init>
		timedout = gpib_cmd_UNL(ptimeoutfunc);
		
	if (timedout)
		gpib_recover();

}
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	df 91       	pop	r29
    13e6:	cf 91       	pop	r28
    13e8:	08 95       	ret

000013ea <gpib_localLockout>:
		gpib_recover();	
	return status;
}

bool gpib_localLockout(gpibtimeout_t ptimeoutfunc)
{
    13ea:	cf 93       	push	r28
	return gpib_tx(0x5F, true, ptimeoutfunc);
}

static bool gpib_cmd_LLO(gpibtimeout_t ptimeoutfunc) // local lockout
{
	return gpib_tx(0x11, true, ptimeoutfunc);
    13ec:	ac 01       	movw	r20, r24
    13ee:	61 e0       	ldi	r22, 0x01	; 1
    13f0:	81 e1       	ldi	r24, 0x11	; 17
    13f2:	73 df       	rcall	.-282    	; 0x12da <gpib_tx>
    13f4:	c8 2f       	mov	r28, r24

static char s_terminator = '\0'; /* \0 = no termination character - EOI only, other options are '\n' or '\r' */
 
static void gpib_recover(void)
{
	gpib_init();
    13f6:	81 11       	cpse	r24, r1
    13f8:	48 df       	rcall	.-368    	; 0x128a <gpib_init>

	timedout = gpib_cmd_LLO(ptimeoutfunc);
	if (timedout)
		gpib_recover();
	return timedout;
}
    13fa:	8c 2f       	mov	r24, r28
    13fc:	cf 91       	pop	r28
    13fe:	08 95       	ret

00001400 <gpib_readdat>:




uint8_t gpib_readdat(bool *pEoi, bool *ptimedout, gpibtimeout_t ptimeoutfunc)
{
    1400:	af 92       	push	r10
    1402:	bf 92       	push	r11
    1404:	df 92       	push	r13
    1406:	ef 92       	push	r14
    1408:	ff 92       	push	r15
    140a:	0f 93       	push	r16
    140c:	1f 93       	push	r17
    140e:	cf 93       	push	r28
    1410:	df 93       	push	r29
    1412:	8c 01       	movw	r16, r24
    1414:	7b 01       	movw	r14, r22
    1416:	5a 01       	movw	r10, r20
	
	c = 0;
	eoi = false;	
	
	/* skipping NRFD LOW step, because we are able to handshake and response to data */
	NDAC_LOW;
    1418:	3f 9a       	sbi	0x07, 7	; 7
	NRFD_HIGH;
    141a:	3e 98       	cbi	0x07, 6	; 7
	
	do
	{
		timedout = ptimeoutfunc();
    141c:	f5 01       	movw	r30, r10
    141e:	09 95       	icall
    1420:	d8 2f       	mov	r29, r24
	}
	while ( (DAV_STATE != 0) && !timedout ); /* wait until DAV gets low */
    1422:	1e 9b       	sbis	0x03, 6	; 3
    1424:	03 c0       	rjmp	.+6      	; 0x142c <gpib_readdat+0x2c>
    1426:	88 23       	and	r24, r24
    1428:	c9 f3       	breq	.-14     	; 0x141c <gpib_readdat+0x1c>
    142a:	14 c0       	rjmp	.+40     	; 0x1454 <gpib_readdat+0x54>
	
	if (!timedout)
    142c:	81 11       	cpse	r24, r1
    142e:	12 c0       	rjmp	.+36     	; 0x1454 <gpib_readdat+0x54>
	{
		NRFD_LOW;
    1430:	3e 9a       	sbi	0x07, 6	; 7
		c = ~PIND;
    1432:	c9 b1       	in	r28, 0x09	; 9
    1434:	c0 95       	com	r28
		eoi = (EOI_STATE == 0) ;
    1436:	d3 b0       	in	r13, 0x03	; 3
    1438:	d4 fa       	bst	r13, 4
    143a:	dd 24       	eor	r13, r13
    143c:	d0 f8       	bld	r13, 0
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	d8 26       	eor	r13, r24
		NDAC_HIGH;
    1442:	3f 98       	cbi	0x07, 7	; 7
		
		do
		{
			timedout = ptimeoutfunc();
    1444:	f5 01       	movw	r30, r10
    1446:	09 95       	icall
    1448:	d8 2f       	mov	r29, r24
		}
		while ( (DAV_STATE == 0) && !timedout ); /* wait until DAV gets high */
    144a:	1e 99       	sbic	0x03, 6	; 3
    144c:	05 c0       	rjmp	.+10     	; 0x1458 <gpib_readdat+0x58>
    144e:	88 23       	and	r24, r24
    1450:	c9 f3       	breq	.-14     	; 0x1444 <gpib_readdat+0x44>
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <gpib_readdat+0x58>
{
	uint8_t c;
	bool eoi, timedout;	
	
	c = 0;
	eoi = false;	
    1454:	d1 2c       	mov	r13, r1
uint8_t gpib_readdat(bool *pEoi, bool *ptimedout, gpibtimeout_t ptimeoutfunc)
{
	uint8_t c;
	bool eoi, timedout;	
	
	c = 0;
    1456:	c0 e0       	ldi	r28, 0x00	; 0
		}
		while ( (DAV_STATE == 0) && !timedout ); /* wait until DAV gets high */
	}

	
	if (s_terminator == '\0')
    1458:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <s_terminator>
    145c:	91 11       	cpse	r25, r1
    145e:	03 c0       	rjmp	.+6      	; 0x1466 <gpib_readdat+0x66>
		*pEoi = eoi;
    1460:	f8 01       	movw	r30, r16
    1462:	d0 82       	st	Z, r13
    1464:	08 c0       	rjmp	.+16     	; 0x1476 <gpib_readdat+0x76>
	else
		*pEoi = eoi || (c == s_terminator);
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	d1 10       	cpse	r13, r1
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <gpib_readdat+0x70>
    146c:	c9 13       	cpse	r28, r25
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	81 70       	andi	r24, 0x01	; 1
    1472:	f8 01       	movw	r30, r16
    1474:	80 83       	st	Z, r24

	if (timedout)
    1476:	d1 11       	cpse	r29, r1

static char s_terminator = '\0'; /* \0 = no termination character - EOI only, other options are '\n' or '\r' */
 
static void gpib_recover(void)
{
	gpib_init();
    1478:	08 df       	rcall	.-496    	; 0x128a <gpib_init>

	if (timedout)
	{
		gpib_recover();
	}
	*ptimedout = timedout;
    147a:	f7 01       	movw	r30, r14
    147c:	d0 83       	st	Z, r29
	return c;
};
    147e:	8c 2f       	mov	r24, r28
    1480:	df 91       	pop	r29
    1482:	cf 91       	pop	r28
    1484:	1f 91       	pop	r17
    1486:	0f 91       	pop	r16
    1488:	ff 90       	pop	r15
    148a:	ef 90       	pop	r14
    148c:	df 90       	pop	r13
    148e:	bf 90       	pop	r11
    1490:	af 90       	pop	r10
    1492:	08 95       	ret

00001494 <gpib_readStatusByte>:
}



uint8_t gpib_readStatusByte(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    1494:	ff 92       	push	r15
    1496:	0f 93       	push	r16
    1498:	1f 93       	push	r17
    149a:	cf 93       	push	r28
    149c:	df 93       	push	r29
    149e:	00 d0       	rcall	.+0      	; 0x14a0 <gpib_readStatusByte+0xc>
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
    14a4:	f8 2e       	mov	r15, r24
    14a6:	8b 01       	movw	r16, r22
	bool timedout, eoi;
	uint8_t status;
	
	timedout = false;
    14a8:	1a 82       	std	Y+2, r1	; 0x02
}


static bool gpib_cmd_SPE(gpibtimeout_t ptimeoutfunc) // serial poll enable
{
	return gpib_tx(0x18, true, ptimeoutfunc);
    14aa:	ab 01       	movw	r20, r22
    14ac:	61 e0       	ldi	r22, 0x01	; 1
    14ae:	88 e1       	ldi	r24, 0x18	; 24
    14b0:	14 df       	rcall	.-472    	; 0x12da <gpib_tx>
	
	timedout = false;
	status = 0;
	
	if (!timedout)
		timedout = gpib_cmd_SPE(ptimeoutfunc);
    14b2:	8a 83       	std	Y+2, r24	; 0x02
	if (!timedout)
    14b4:	81 11       	cpse	r24, r1
    14b6:	04 c0       	rjmp	.+8      	; 0x14c0 <gpib_readStatusByte+0x2c>
		timedout = gpib_cmd_TAG(addr, ptimeoutfunc); 
    14b8:	b8 01       	movw	r22, r16
    14ba:	8f 2d       	mov	r24, r15
    14bc:	3b df       	rcall	.-394    	; 0x1334 <gpib_cmd_TAG>
    14be:	8a 83       	std	Y+2, r24	; 0x02
	ATN_HIGH; /* make ATN H */	
    14c0:	86 98       	cbi	0x10, 6	; 16
	NDAC_LOW;   /* make NDAC L */
    14c2:	3f 9a       	sbi	0x07, 7	; 7

	if (!timedout)
    14c4:	8a 81       	ldd	r24, Y+2	; 0x02
    14c6:	81 11       	cpse	r24, r1
    14c8:	09 c0       	rjmp	.+18     	; 0x14dc <gpib_readStatusByte+0x48>
		status = gpib_readdat(&eoi, &timedout, ptimeoutfunc);
    14ca:	a8 01       	movw	r20, r16
    14cc:	be 01       	movw	r22, r28
    14ce:	6e 5f       	subi	r22, 0xFE	; 254
    14d0:	7f 4f       	sbci	r23, 0xFF	; 255
    14d2:	ce 01       	movw	r24, r28
    14d4:	01 96       	adiw	r24, 0x01	; 1
    14d6:	94 df       	rcall	.-216    	; 0x1400 <gpib_readdat>
    14d8:	f8 2e       	mov	r15, r24
    14da:	01 c0       	rjmp	.+2      	; 0x14de <gpib_readStatusByte+0x4a>
{
	bool timedout, eoi;
	uint8_t status;
	
	timedout = false;
	status = 0;
    14dc:	f1 2c       	mov	r15, r1
	NDAC_LOW;   /* make NDAC L */

	if (!timedout)
		status = gpib_readdat(&eoi, &timedout, ptimeoutfunc);
	
	if (!timedout)
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	81 11       	cpse	r24, r1
    14e2:	05 c0       	rjmp	.+10     	; 0x14ee <gpib_readStatusByte+0x5a>
	return gpib_tx(0x3F, true, ptimeoutfunc);
}

static bool gpib_cmd_UNT(gpibtimeout_t ptimeoutfunc)
{
	return gpib_tx(0x5F, true, ptimeoutfunc);
    14e4:	a8 01       	movw	r20, r16
    14e6:	61 e0       	ldi	r22, 0x01	; 1
    14e8:	8f e5       	ldi	r24, 0x5F	; 95
    14ea:	f7 de       	rcall	.-530    	; 0x12da <gpib_tx>

	if (!timedout)
		status = gpib_readdat(&eoi, &timedout, ptimeoutfunc);
	
	if (!timedout)
		timedout = gpib_cmd_UNT(ptimeoutfunc); 
    14ec:	8a 83       	std	Y+2, r24	; 0x02
	if (!timedout)
    14ee:	8a 81       	ldd	r24, Y+2	; 0x02
    14f0:	81 11       	cpse	r24, r1
	return gpib_tx(0x18, true, ptimeoutfunc);
}

static bool gpib_cmd_SPD(gpibtimeout_t ptimeoutfunc) // serial poll disable
{
	return gpib_tx(0x19, true, ptimeoutfunc);
    14f2:	05 c0       	rjmp	.+10     	; 0x14fe <gpib_readStatusByte+0x6a>
    14f4:	a8 01       	movw	r20, r16
    14f6:	61 e0       	ldi	r22, 0x01	; 1
    14f8:	89 e1       	ldi	r24, 0x19	; 25
		status = gpib_readdat(&eoi, &timedout, ptimeoutfunc);
	
	if (!timedout)
		timedout = gpib_cmd_UNT(ptimeoutfunc); 
	if (!timedout)
		timedout = gpib_cmd_SPD(ptimeoutfunc);
    14fa:	ef de       	rcall	.-546    	; 0x12da <gpib_tx>
	if (timedout)
    14fc:	8a 83       	std	Y+2, r24	; 0x02
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02

static char s_terminator = '\0'; /* \0 = no termination character - EOI only, other options are '\n' or '\r' */
 
static void gpib_recover(void)
{
	gpib_init();
    1500:	81 11       	cpse	r24, r1
    1502:	c3 de       	rcall	.-634    	; 0x128a <gpib_init>
	if (!timedout)
		timedout = gpib_cmd_SPD(ptimeoutfunc);
	if (timedout)
		gpib_recover();	
	return status;
}
    1504:	8f 2d       	mov	r24, r15
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	df 91       	pop	r29
    150c:	cf 91       	pop	r28
    150e:	1f 91       	pop	r17
    1510:	0f 91       	pop	r16
    1512:	ff 90       	pop	r15
    1514:	08 95       	ret

00001516 <gpib_untalk_unlisten>:
	*ptimedout = timedout;
	return c;
};

bool gpib_untalk_unlisten(gpibtimeout_t ptimeoutfunc)
{
    1516:	cf 93       	push	r28
    1518:	df 93       	push	r29
    151a:	ec 01       	movw	r28, r24
	bool timedout;	
	timedout = gpib_cmd_UNL(ptimeoutfunc);
    151c:	39 df       	rcall	.-398    	; 0x1390 <gpib_cmd_UNL>
	if (!timedout)
    151e:	88 23       	and	r24, r24

static char s_terminator = '\0'; /* \0 = no termination character - EOI only, other options are '\n' or '\r' */
 
static void gpib_recover(void)
{
	gpib_init();
    1520:	19 f0       	breq	.+6      	; 0x1528 <gpib_untalk_unlisten+0x12>
    1522:	b3 de       	rcall	.-666    	; 0x128a <gpib_init>
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	06 c0       	rjmp	.+12     	; 0x1534 <gpib_untalk_unlisten+0x1e>
	return gpib_tx(0x3F, true, ptimeoutfunc);
}

static bool gpib_cmd_UNT(gpibtimeout_t ptimeoutfunc)
{
	return gpib_tx(0x5F, true, ptimeoutfunc);
    1528:	ae 01       	movw	r20, r28
    152a:	61 e0       	ldi	r22, 0x01	; 1
    152c:	8f e5       	ldi	r24, 0x5F	; 95
    152e:	d5 de       	rcall	.-598    	; 0x12da <gpib_tx>
{
	bool timedout;	
	timedout = gpib_cmd_UNL(ptimeoutfunc);
	if (!timedout)
		timedout = gpib_cmd_UNT(ptimeoutfunc);
	if (timedout)
    1530:	81 11       	cpse	r24, r1
    1532:	f7 cf       	rjmp	.-18     	; 0x1522 <gpib_untalk_unlisten+0xc>
		gpib_recover();
		
	s_gpib_transaction_active = false;
    1534:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <s_gpib_transaction_active>
	return timedout;
}
    1538:	df 91       	pop	r29
    153a:	cf 91       	pop	r28
    153c:	08 95       	ret

0000153e <gpib_make_talker>:

bool  gpib_make_talker(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    153e:	0f 93       	push	r16
    1540:	1f 93       	push	r17
    1542:	cf 93       	push	r28
    1544:	df 93       	push	r29
    1546:	d8 2f       	mov	r29, r24
    1548:	8b 01       	movw	r16, r22
	bool timedout;
	
	s_gpib_transaction_active = true;
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <s_gpib_transaction_active>
	
	timedout = gpib_cmd_UNL(ptimeoutfunc);
    1550:	cb 01       	movw	r24, r22
    1552:	1e df       	rcall	.-452    	; 0x1390 <gpib_cmd_UNL>
    1554:	c8 2f       	mov	r28, r24
	if (!timedout)
    1556:	81 11       	cpse	r24, r1
    1558:	04 c0       	rjmp	.+8      	; 0x1562 <gpib_make_talker+0x24>
		timedout = gpib_cmd_TAG(addr, ptimeoutfunc); /* address as talker*/
    155a:	b8 01       	movw	r22, r16
    155c:	8d 2f       	mov	r24, r29
    155e:	ea de       	rcall	.-556    	; 0x1334 <gpib_cmd_TAG>
    1560:	c8 2f       	mov	r28, r24
	ATN_HIGH; /* make ATN H */	
    1562:	86 98       	cbi	0x10, 6	; 16
	NDAC_LOW;   /* make NDAC L */
	
	if (timedout)
    1564:	3f 9a       	sbi	0x07, 7	; 7

static char s_terminator = '\0'; /* \0 = no termination character - EOI only, other options are '\n' or '\r' */
 
static void gpib_recover(void)
{
	gpib_init();
    1566:	c1 11       	cpse	r28, r1
    1568:	90 de       	rcall	.-736    	; 0x128a <gpib_init>
	NDAC_LOW;   /* make NDAC L */
	
	if (timedout)
		gpib_recover();
	return timedout;
}
    156a:	8c 2f       	mov	r24, r28
    156c:	df 91       	pop	r29
    156e:	cf 91       	pop	r28
    1570:	1f 91       	pop	r17
    1572:	0f 91       	pop	r16
    1574:	08 95       	ret

00001576 <gpib_make_listener>:

bool gpib_make_listener(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    1576:	1f 93       	push	r17
    1578:	cf 93       	push	r28
    157a:	df 93       	push	r29
    157c:	18 2f       	mov	r17, r24
    157e:	eb 01       	movw	r28, r22
	bool timedout;
	s_gpib_transaction_active = true;
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <s_gpib_transaction_active>
	return gpib_tx(0x3F, true, ptimeoutfunc);
}

static bool gpib_cmd_UNT(gpibtimeout_t ptimeoutfunc)
{
	return gpib_tx(0x5F, true, ptimeoutfunc);
    1586:	ab 01       	movw	r20, r22
    1588:	61 e0       	ldi	r22, 0x01	; 1
    158a:	8f e5       	ldi	r24, 0x5F	; 95
    158c:	a6 de       	rcall	.-692    	; 0x12da <gpib_tx>
bool gpib_make_listener(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
	bool timedout;
	s_gpib_transaction_active = true;
	timedout = gpib_cmd_UNT(ptimeoutfunc);
	if (!timedout)
    158e:	88 23       	and	r24, r24
    1590:	11 f0       	breq	.+4      	; 0x1596 <gpib_make_listener+0x20>
		gpib_recover();
	return timedout;
}

bool gpib_make_listener(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    1592:	c1 e0       	ldi	r28, 0x01	; 1
    1594:	08 c0       	rjmp	.+16     	; 0x15a6 <gpib_make_listener+0x30>
	bool timedout;
	s_gpib_transaction_active = true;
	timedout = gpib_cmd_UNT(ptimeoutfunc);
	if (!timedout)
		timedout = gpib_cmd_UNL(ptimeoutfunc);
    1596:	ce 01       	movw	r24, r28
    1598:	fb de       	rcall	.-522    	; 0x1390 <gpib_cmd_UNL>
	if (!timedout)
    159a:	81 11       	cpse	r24, r1
    159c:	fa cf       	rjmp	.-12     	; 0x1592 <gpib_make_listener+0x1c>
		timedout = gpib_cmd_LAG(addr, ptimeoutfunc); /* address target as listener*/
    159e:	be 01       	movw	r22, r28
    15a0:	81 2f       	mov	r24, r17
    15a2:	df de       	rcall	.-578    	; 0x1362 <gpib_cmd_LAG>
    15a4:	c8 2f       	mov	r28, r24
		
	ATN_HIGH;    /* make ATN H */
    15a6:	86 98       	cbi	0x10, 6	; 16
	
	if (timedout)
    15a8:	c1 11       	cpse	r28, r1

static char s_terminator = '\0'; /* \0 = no termination character - EOI only, other options are '\n' or '\r' */
 
static void gpib_recover(void)
{
	gpib_init();
    15aa:	6f de       	rcall	.-802    	; 0x128a <gpib_init>
    15ac:	8c 2f       	mov	r24, r28
	ATN_HIGH;    /* make ATN H */
	
	if (timedout)
		gpib_recover();
	return timedout;
}
    15ae:	df 91       	pop	r29
    15b0:	cf 91       	pop	r28
    15b2:	1f 91       	pop	r17
    15b4:	08 95       	ret

000015b6 <gpib_writedat>:
    15b6:	61 11       	cpse	r22, r1
bool gpib_writedat(uint8_t dat, bool Eoi, gpibtimeout_t ptimeoutfunc)
{
	bool timedout;
	if (Eoi)
	{
		EOI_LOW; /* make EOI L */
    15b8:	24 9a       	sbi	0x04, 4	; 4
	return timedout;
}

static bool gpib_dat(uint8_t dat, gpibtimeout_t ptimeoutfunc)
{
	return gpib_tx(dat, false, ptimeoutfunc);
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	8e de       	rcall	.-740    	; 0x12da <gpib_tx>
	if (Eoi)
	{
		EOI_LOW; /* make EOI L */
	}
	timedout = gpib_dat(dat, ptimeoutfunc);
	EOI_HIGH;    /* make EOI H */
    15be:	24 98       	cbi	0x04, 4	; 4
	return timedout;
}
    15c0:	08 95       	ret

000015c2 <gpib_set_readtermination>:

void gpib_set_readtermination(char terminator)
{
	switch(terminator)
    15c2:	8a 30       	cpi	r24, 0x0A	; 10
    15c4:	11 f0       	breq	.+4      	; 0x15ca <gpib_set_readtermination+0x8>
    15c6:	8d 30       	cpi	r24, 0x0D	; 13
    15c8:	19 f4       	brne	.+6      	; 0x15d0 <gpib_set_readtermination+0xe>
	{
		case '\n':
			s_terminator = '\n';
			break;
		case '\r':
			s_terminator = '\r';
    15ca:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <s_terminator>
			break;
    15ce:	08 95       	ret
		default:
			s_terminator = '\0';
    15d0:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <s_terminator>
    15d4:	08 95       	ret

000015d6 <gpib_search>:
	timeout_val--;
	return false;
}

uint8_t gpib_search(void)
{
    15d6:	0f 93       	push	r16
    15d8:	1f 93       	push	r17
    15da:	cf 93       	push	r28
    15dc:	df 93       	push	r29

static uint16_t timeout_val;

static void timeout_start(uint16_t timeout)
{
	timeout_val = timeout;
    15de:	84 ef       	ldi	r24, 0xF4	; 244
    15e0:	91 e0       	ldi	r25, 0x01	; 1
    15e2:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <timeout_val+0x1>
    15e6:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <timeout_val>
{
	int8_t addr;
	uint8_t foundaddr;
	
	timeout_start(500);
	gpib_tx(0x3F, true, is_timedout); // UNL
    15ea:	42 ee       	ldi	r20, 0xE2	; 226
    15ec:	58 e0       	ldi	r21, 0x08	; 8
    15ee:	61 e0       	ldi	r22, 0x01	; 1
    15f0:	8f e3       	ldi	r24, 0x3F	; 63
    15f2:	73 de       	rcall	.-794    	; 0x12da <gpib_tx>
	
	foundaddr = 255;

	for (addr = 0x3e; addr >= 0; --addr)
    15f4:	ce e3       	ldi	r28, 0x3E	; 62

static uint16_t timeout_val;

static void timeout_start(uint16_t timeout)
{
	timeout_val = timeout;
    15f6:	04 ef       	ldi	r16, 0xF4	; 244
    15f8:	11 e0       	ldi	r17, 0x01	; 1
	
	foundaddr = 255;

	for (addr = 0x3e; addr >= 0; --addr)
	{
		if ((addr & 0x1f) == 0x1f)
    15fa:	8c 2f       	mov	r24, r28
    15fc:	8f 71       	andi	r24, 0x1F	; 31
    15fe:	8f 31       	cpi	r24, 0x1F	; 31
    1600:	21 f4       	brne	.+8      	; 0x160a <gpib_search+0x34>
    1602:	c1 50       	subi	r28, 0x01	; 1
    1604:	d0 f7       	brcc	.-12     	; 0x15fa <gpib_search+0x24>
	uint8_t foundaddr;
	
	timeout_start(500);
	gpib_tx(0x3F, true, is_timedout); // UNL
	
	foundaddr = 255;
    1606:	df ef       	ldi	r29, 0xFF	; 255
    1608:	14 c0       	rjmp	.+40     	; 0x1632 <gpib_search+0x5c>

static uint16_t timeout_val;

static void timeout_start(uint16_t timeout)
{
	timeout_val = timeout;
    160a:	10 93 7e 01 	sts	0x017E, r17	; 0x80017e <timeout_val+0x1>
    160e:	00 93 7d 01 	sts	0x017D, r16	; 0x80017d <timeout_val>
	{
		if ((addr & 0x1f) == 0x1f)
			continue;

		timeout_start(500);
		gpib_cmd_LAG(addr, is_timedout);
    1612:	dc 2f       	mov	r29, r28
    1614:	62 ee       	ldi	r22, 0xE2	; 226
    1616:	78 e0       	ldi	r23, 0x08	; 8
    1618:	8c 2f       	mov	r24, r28
    161a:	a3 de       	rcall	.-698    	; 0x1362 <gpib_cmd_LAG>
			
		ATN_HIGH; /* make ATN H */
    161c:	86 98       	cbi	0x10, 6	; 16
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    161e:	8f e3       	ldi	r24, 0x3F	; 63
    1620:	9f e1       	ldi	r25, 0x1F	; 31
    1622:	01 97       	sbiw	r24, 0x01	; 1
    1624:	f1 f7       	brne	.-4      	; 0x1622 <gpib_search+0x4c>
    1626:	00 c0       	rjmp	.+0      	; 0x1628 <gpib_search+0x52>
    1628:	00 00       	nop
		_delay_ms(2);
		if ((NDAC_STATE == 0) && (ATN_STATE != 0))
    162a:	37 99       	sbic	0x06, 7	; 6
    162c:	ea cf       	rjmp	.-44     	; 0x1602 <gpib_search+0x2c>
    162e:	7e 9b       	sbis	0x0f, 6	; 15
    1630:	e8 cf       	rjmp	.-48     	; 0x1602 <gpib_search+0x2c>

static uint16_t timeout_val;

static void timeout_start(uint16_t timeout)
{
	timeout_val = timeout;
    1632:	84 ef       	ldi	r24, 0xF4	; 244
    1634:	91 e0       	ldi	r25, 0x01	; 1
    1636:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <timeout_val+0x1>
    163a:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <timeout_val>
			break;
		}
	}
	
	timeout_start(500);
	gpib_tx(0x3F, true, is_timedout); // UNL
    163e:	42 ee       	ldi	r20, 0xE2	; 226
    1640:	58 e0       	ldi	r21, 0x08	; 8
    1642:	61 e0       	ldi	r22, 0x01	; 1
    1644:	8f e3       	ldi	r24, 0x3F	; 63
    1646:	49 de       	rcall	.-878    	; 0x12da <gpib_tx>

	/* if the device needs a secondary address, ensure, that it really cannot be addressed without secondary address */
	if (addr & 0x20)
    1648:	c5 ff       	sbrs	r28, 5
    164a:	1b c0       	rjmp	.+54     	; 0x1682 <gpib_search+0xac>
	{
		/* address once without SA. If it responds, force it to this primary addressing only! */
		gpib_cmd_LAG(addr & 0x1f, is_timedout);
    164c:	cf 71       	andi	r28, 0x1F	; 31
    164e:	62 ee       	ldi	r22, 0xE2	; 226
    1650:	78 e0       	ldi	r23, 0x08	; 8
    1652:	8c 2f       	mov	r24, r28
    1654:	86 de       	rcall	.-756    	; 0x1362 <gpib_cmd_LAG>
		ATN_HIGH; /* make ATN H */
    1656:	86 98       	cbi	0x10, 6	; 16
    1658:	8f e3       	ldi	r24, 0x3F	; 63
    165a:	9f e1       	ldi	r25, 0x1F	; 31
    165c:	01 97       	sbiw	r24, 0x01	; 1
    165e:	f1 f7       	brne	.-4      	; 0x165c <gpib_search+0x86>
    1660:	00 c0       	rjmp	.+0      	; 0x1662 <gpib_search+0x8c>
    1662:	00 00       	nop
		_delay_ms(2);
		if ((NDAC_STATE == 0) && (ATN_STATE != 0))
    1664:	37 99       	sbic	0x06, 7	; 6
    1666:	02 c0       	rjmp	.+4      	; 0x166c <gpib_search+0x96>
    1668:	7e 99       	sbic	0x0f, 6	; 15
		{
			foundaddr = addr & 0x1f;
    166a:	dc 2f       	mov	r29, r28

static uint16_t timeout_val;

static void timeout_start(uint16_t timeout)
{
	timeout_val = timeout;
    166c:	84 ef       	ldi	r24, 0xF4	; 244
    166e:	91 e0       	ldi	r25, 0x01	; 1
    1670:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <timeout_val+0x1>
    1674:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <timeout_val>
		if ((NDAC_STATE == 0) && (ATN_STATE != 0))
		{
			foundaddr = addr & 0x1f;
		}
		timeout_start(500);
		gpib_tx(0x3F, true, is_timedout); // UNL
    1678:	42 ee       	ldi	r20, 0xE2	; 226
    167a:	58 e0       	ldi	r21, 0x08	; 8
    167c:	61 e0       	ldi	r22, 0x01	; 1
    167e:	8f e3       	ldi	r24, 0x3F	; 63
    1680:	2c de       	rcall	.-936    	; 0x12da <gpib_tx>
	}
		
	return foundaddr;
}
    1682:	8d 2f       	mov	r24, r29
    1684:	df 91       	pop	r29
    1686:	cf 91       	pop	r28
    1688:	1f 91       	pop	r17
    168a:	0f 91       	pop	r16
    168c:	08 95       	ret

0000168e <Endpoint_Write_Stream_LE>:
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    168e:	cf 92       	push	r12
    1690:	df 92       	push	r13
    1692:	ef 92       	push	r14
    1694:	ff 92       	push	r15
    1696:	0f 93       	push	r16
    1698:	1f 93       	push	r17
    169a:	cf 93       	push	r28
    169c:	df 93       	push	r29
    169e:	ec 01       	movw	r28, r24
    16a0:	8b 01       	movw	r16, r22
    16a2:	7a 01       	movw	r14, r20
    16a4:	12 d2       	rcall	.+1060   	; 0x1aca <Endpoint_WaitUntilReady>
    16a6:	81 11       	cpse	r24, r1
    16a8:	32 c0       	rjmp	.+100    	; 0x170e <Endpoint_Write_Stream_LE+0x80>
    16aa:	e1 14       	cp	r14, r1
    16ac:	f1 04       	cpc	r15, r1
    16ae:	39 f0       	breq	.+14     	; 0x16be <Endpoint_Write_Stream_LE+0x30>
    16b0:	f7 01       	movw	r30, r14
    16b2:	80 81       	ld	r24, Z
    16b4:	91 81       	ldd	r25, Z+1	; 0x01
    16b6:	08 1b       	sub	r16, r24
    16b8:	19 0b       	sbc	r17, r25
    16ba:	c8 0f       	add	r28, r24
    16bc:	d9 1f       	adc	r29, r25
    16be:	c1 2c       	mov	r12, r1
    16c0:	d1 2c       	mov	r13, r1
    16c2:	01 15       	cp	r16, r1
    16c4:	11 05       	cpc	r17, r1
    16c6:	11 f1       	breq	.+68     	; 0x170c <Endpoint_Write_Stream_LE+0x7e>
    16c8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    16cc:	85 fd       	sbrc	r24, 5
    16ce:	15 c0       	rjmp	.+42     	; 0x16fa <Endpoint_Write_Stream_LE+0x6c>
    16d0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    16d4:	8e 77       	andi	r24, 0x7E	; 126
    16d6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    16da:	e1 14       	cp	r14, r1
    16dc:	f1 04       	cpc	r15, r1
    16de:	49 f0       	breq	.+18     	; 0x16f2 <Endpoint_Write_Stream_LE+0x64>
    16e0:	f7 01       	movw	r30, r14
    16e2:	80 81       	ld	r24, Z
    16e4:	91 81       	ldd	r25, Z+1	; 0x01
    16e6:	c8 0e       	add	r12, r24
    16e8:	d9 1e       	adc	r13, r25
    16ea:	d1 82       	std	Z+1, r13	; 0x01
    16ec:	c0 82       	st	Z, r12
    16ee:	85 e0       	ldi	r24, 0x05	; 5
    16f0:	0e c0       	rjmp	.+28     	; 0x170e <Endpoint_Write_Stream_LE+0x80>
    16f2:	eb d1       	rcall	.+982    	; 0x1aca <Endpoint_WaitUntilReady>
    16f4:	88 23       	and	r24, r24
    16f6:	29 f3       	breq	.-54     	; 0x16c2 <Endpoint_Write_Stream_LE+0x34>
    16f8:	0a c0       	rjmp	.+20     	; 0x170e <Endpoint_Write_Stream_LE+0x80>
    16fa:	89 91       	ld	r24, Y+
    16fc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    1700:	01 50       	subi	r16, 0x01	; 1
    1702:	11 09       	sbc	r17, r1
    1704:	ff ef       	ldi	r31, 0xFF	; 255
    1706:	cf 1a       	sub	r12, r31
    1708:	df 0a       	sbc	r13, r31
    170a:	db cf       	rjmp	.-74     	; 0x16c2 <Endpoint_Write_Stream_LE+0x34>
    170c:	80 e0       	ldi	r24, 0x00	; 0
    170e:	df 91       	pop	r29
    1710:	cf 91       	pop	r28
    1712:	1f 91       	pop	r17
    1714:	0f 91       	pop	r16
    1716:	ff 90       	pop	r15
    1718:	ef 90       	pop	r14
    171a:	df 90       	pop	r13
    171c:	cf 90       	pop	r12
    171e:	08 95       	ret

00001720 <Endpoint_Read_Stream_LE>:
    1720:	cf 92       	push	r12
    1722:	df 92       	push	r13
    1724:	ef 92       	push	r14
    1726:	ff 92       	push	r15
    1728:	0f 93       	push	r16
    172a:	1f 93       	push	r17
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    1730:	ec 01       	movw	r28, r24
    1732:	8b 01       	movw	r16, r22
    1734:	7a 01       	movw	r14, r20
    1736:	c9 d1       	rcall	.+914    	; 0x1aca <Endpoint_WaitUntilReady>
    1738:	81 11       	cpse	r24, r1
    173a:	32 c0       	rjmp	.+100    	; 0x17a0 <Endpoint_Read_Stream_LE+0x80>
    173c:	e1 14       	cp	r14, r1
    173e:	f1 04       	cpc	r15, r1
    1740:	39 f0       	breq	.+14     	; 0x1750 <Endpoint_Read_Stream_LE+0x30>
    1742:	f7 01       	movw	r30, r14
    1744:	80 81       	ld	r24, Z
    1746:	91 81       	ldd	r25, Z+1	; 0x01
    1748:	08 1b       	sub	r16, r24
    174a:	19 0b       	sbc	r17, r25
    174c:	c8 0f       	add	r28, r24
    174e:	d9 1f       	adc	r29, r25
    1750:	c1 2c       	mov	r12, r1
    1752:	d1 2c       	mov	r13, r1
    1754:	01 15       	cp	r16, r1
    1756:	11 05       	cpc	r17, r1
    1758:	11 f1       	breq	.+68     	; 0x179e <Endpoint_Read_Stream_LE+0x7e>
    175a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    175e:	85 fd       	sbrc	r24, 5
    1760:	15 c0       	rjmp	.+42     	; 0x178c <Endpoint_Read_Stream_LE+0x6c>
    1762:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1766:	8b 77       	andi	r24, 0x7B	; 123
    1768:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    176c:	e1 14       	cp	r14, r1
    176e:	f1 04       	cpc	r15, r1
    1770:	49 f0       	breq	.+18     	; 0x1784 <Endpoint_Read_Stream_LE+0x64>
    1772:	f7 01       	movw	r30, r14
    1774:	80 81       	ld	r24, Z
    1776:	91 81       	ldd	r25, Z+1	; 0x01
    1778:	c8 0e       	add	r12, r24
    177a:	d9 1e       	adc	r13, r25
    177c:	d1 82       	std	Z+1, r13	; 0x01
    177e:	c0 82       	st	Z, r12
    1780:	85 e0       	ldi	r24, 0x05	; 5
    1782:	0e c0       	rjmp	.+28     	; 0x17a0 <Endpoint_Read_Stream_LE+0x80>
    1784:	a2 d1       	rcall	.+836    	; 0x1aca <Endpoint_WaitUntilReady>
    1786:	88 23       	and	r24, r24
    1788:	29 f3       	breq	.-54     	; 0x1754 <Endpoint_Read_Stream_LE+0x34>
    178a:	0a c0       	rjmp	.+20     	; 0x17a0 <Endpoint_Read_Stream_LE+0x80>
    178c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    1790:	89 93       	st	Y+, r24
    1792:	01 50       	subi	r16, 0x01	; 1
    1794:	11 09       	sbc	r17, r1
    1796:	ff ef       	ldi	r31, 0xFF	; 255
    1798:	cf 1a       	sub	r12, r31
    179a:	df 0a       	sbc	r13, r31
    179c:	db cf       	rjmp	.-74     	; 0x1754 <Endpoint_Read_Stream_LE+0x34>
    179e:	80 e0       	ldi	r24, 0x00	; 0
    17a0:	df 91       	pop	r29
    17a2:	cf 91       	pop	r28
    17a4:	1f 91       	pop	r17
    17a6:	0f 91       	pop	r16
    17a8:	ff 90       	pop	r15
    17aa:	ef 90       	pop	r14
    17ac:	df 90       	pop	r13
    17ae:	cf 90       	pop	r12
    17b0:	08 95       	ret

000017b2 <Endpoint_Write_Control_Stream_LE>:
    17b2:	20 91 fb 01 	lds	r18, 0x01FB	; 0x8001fb <USB_ControlRequest+0x6>
    17b6:	30 91 fc 01 	lds	r19, 0x01FC	; 0x8001fc <USB_ControlRequest+0x7>
    17ba:	26 17       	cp	r18, r22
    17bc:	37 07       	cpc	r19, r23
    17be:	48 f0       	brcs	.+18     	; 0x17d2 <Endpoint_Write_Control_Stream_LE+0x20>
    17c0:	61 15       	cp	r22, r1
    17c2:	71 05       	cpc	r23, r1
    17c4:	39 f4       	brne	.+14     	; 0x17d4 <Endpoint_Write_Control_Stream_LE+0x22>
    17c6:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    17ca:	2e 77       	andi	r18, 0x7E	; 126
    17cc:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    17d0:	01 c0       	rjmp	.+2      	; 0x17d4 <Endpoint_Write_Control_Stream_LE+0x22>
    17d2:	b9 01       	movw	r22, r18
    17d4:	fc 01       	movw	r30, r24
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	61 15       	cp	r22, r1
    17da:	71 05       	cpc	r23, r1
    17dc:	79 f1       	breq	.+94     	; 0x183c <Endpoint_Write_Control_Stream_LE+0x8a>
    17de:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <USB_DeviceState>
    17e2:	88 23       	and	r24, r24
    17e4:	f1 f1       	breq	.+124    	; 0x1862 <Endpoint_Write_Control_Stream_LE+0xb0>
    17e6:	85 30       	cpi	r24, 0x05	; 5
    17e8:	f1 f1       	breq	.+124    	; 0x1866 <Endpoint_Write_Control_Stream_LE+0xb4>
    17ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    17ee:	83 fd       	sbrc	r24, 3
    17f0:	3c c0       	rjmp	.+120    	; 0x186a <Endpoint_Write_Control_Stream_LE+0xb8>
    17f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    17f6:	82 fd       	sbrc	r24, 2
    17f8:	2e c0       	rjmp	.+92     	; 0x1856 <Endpoint_Write_Control_Stream_LE+0xa4>
    17fa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    17fe:	80 ff       	sbrs	r24, 0
    1800:	eb cf       	rjmp	.-42     	; 0x17d8 <Endpoint_Write_Control_Stream_LE+0x26>
    1802:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
    1806:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	92 2b       	or	r25, r18
    180e:	61 15       	cp	r22, r1
    1810:	71 05       	cpc	r23, r1
    1812:	51 f0       	breq	.+20     	; 0x1828 <Endpoint_Write_Control_Stream_LE+0x76>
    1814:	88 30       	cpi	r24, 0x08	; 8
    1816:	91 05       	cpc	r25, r1
    1818:	38 f4       	brcc	.+14     	; 0x1828 <Endpoint_Write_Control_Stream_LE+0x76>
    181a:	21 91       	ld	r18, Z+
    181c:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    1820:	61 50       	subi	r22, 0x01	; 1
    1822:	71 09       	sbc	r23, r1
    1824:	01 96       	adiw	r24, 0x01	; 1
    1826:	f3 cf       	rjmp	.-26     	; 0x180e <Endpoint_Write_Control_Stream_LE+0x5c>
    1828:	21 e0       	ldi	r18, 0x01	; 1
    182a:	08 97       	sbiw	r24, 0x08	; 8
    182c:	09 f0       	breq	.+2      	; 0x1830 <Endpoint_Write_Control_Stream_LE+0x7e>
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1834:	8e 77       	andi	r24, 0x7E	; 126
    1836:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    183a:	ce cf       	rjmp	.-100    	; 0x17d8 <Endpoint_Write_Control_Stream_LE+0x26>
    183c:	21 11       	cpse	r18, r1
    183e:	cf cf       	rjmp	.-98     	; 0x17de <Endpoint_Write_Control_Stream_LE+0x2c>
    1840:	0a c0       	rjmp	.+20     	; 0x1856 <Endpoint_Write_Control_Stream_LE+0xa4>
    1842:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <USB_DeviceState>
    1846:	88 23       	and	r24, r24
    1848:	61 f0       	breq	.+24     	; 0x1862 <Endpoint_Write_Control_Stream_LE+0xb0>
    184a:	85 30       	cpi	r24, 0x05	; 5
    184c:	61 f0       	breq	.+24     	; 0x1866 <Endpoint_Write_Control_Stream_LE+0xb4>
    184e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1852:	83 fd       	sbrc	r24, 3
    1854:	0a c0       	rjmp	.+20     	; 0x186a <Endpoint_Write_Control_Stream_LE+0xb8>
    1856:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    185a:	82 ff       	sbrs	r24, 2
    185c:	f2 cf       	rjmp	.-28     	; 0x1842 <Endpoint_Write_Control_Stream_LE+0x90>
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	08 95       	ret
    1862:	82 e0       	ldi	r24, 0x02	; 2
    1864:	08 95       	ret
    1866:	83 e0       	ldi	r24, 0x03	; 3
    1868:	08 95       	ret
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	08 95       	ret

0000186e <Endpoint_Write_Control_PStream_LE>:
    186e:	20 91 fb 01 	lds	r18, 0x01FB	; 0x8001fb <USB_ControlRequest+0x6>
    1872:	30 91 fc 01 	lds	r19, 0x01FC	; 0x8001fc <USB_ControlRequest+0x7>
    1876:	26 17       	cp	r18, r22
    1878:	37 07       	cpc	r19, r23
    187a:	48 f0       	brcs	.+18     	; 0x188e <Endpoint_Write_Control_PStream_LE+0x20>
    187c:	61 15       	cp	r22, r1
    187e:	71 05       	cpc	r23, r1
    1880:	39 f4       	brne	.+14     	; 0x1890 <Endpoint_Write_Control_PStream_LE+0x22>
    1882:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1886:	2e 77       	andi	r18, 0x7E	; 126
    1888:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    188c:	01 c0       	rjmp	.+2      	; 0x1890 <Endpoint_Write_Control_PStream_LE+0x22>
    188e:	b9 01       	movw	r22, r18
    1890:	fc 01       	movw	r30, r24
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	61 15       	cp	r22, r1
    1896:	71 05       	cpc	r23, r1
    1898:	91 f1       	breq	.+100    	; 0x18fe <Endpoint_Write_Control_PStream_LE+0x90>
    189a:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <USB_DeviceState>
    189e:	88 23       	and	r24, r24
    18a0:	09 f4       	brne	.+2      	; 0x18a4 <Endpoint_Write_Control_PStream_LE+0x36>
    18a2:	40 c0       	rjmp	.+128    	; 0x1924 <Endpoint_Write_Control_PStream_LE+0xb6>
    18a4:	85 30       	cpi	r24, 0x05	; 5
    18a6:	09 f4       	brne	.+2      	; 0x18aa <Endpoint_Write_Control_PStream_LE+0x3c>
    18a8:	3f c0       	rjmp	.+126    	; 0x1928 <Endpoint_Write_Control_PStream_LE+0xba>
    18aa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    18ae:	83 fd       	sbrc	r24, 3
    18b0:	3d c0       	rjmp	.+122    	; 0x192c <Endpoint_Write_Control_PStream_LE+0xbe>
    18b2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    18b6:	82 fd       	sbrc	r24, 2
    18b8:	2f c0       	rjmp	.+94     	; 0x1918 <Endpoint_Write_Control_PStream_LE+0xaa>
    18ba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    18be:	80 ff       	sbrs	r24, 0
    18c0:	e9 cf       	rjmp	.-46     	; 0x1894 <Endpoint_Write_Control_PStream_LE+0x26>
    18c2:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
    18c6:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	92 2b       	or	r25, r18
    18ce:	61 15       	cp	r22, r1
    18d0:	71 05       	cpc	r23, r1
    18d2:	59 f0       	breq	.+22     	; 0x18ea <Endpoint_Write_Control_PStream_LE+0x7c>
    18d4:	88 30       	cpi	r24, 0x08	; 8
    18d6:	91 05       	cpc	r25, r1
    18d8:	40 f4       	brcc	.+16     	; 0x18ea <Endpoint_Write_Control_PStream_LE+0x7c>
    18da:	24 91       	lpm	r18, Z
    18dc:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    18e0:	31 96       	adiw	r30, 0x01	; 1
    18e2:	61 50       	subi	r22, 0x01	; 1
    18e4:	71 09       	sbc	r23, r1
    18e6:	01 96       	adiw	r24, 0x01	; 1
    18e8:	f2 cf       	rjmp	.-28     	; 0x18ce <Endpoint_Write_Control_PStream_LE+0x60>
    18ea:	21 e0       	ldi	r18, 0x01	; 1
    18ec:	08 97       	sbiw	r24, 0x08	; 8
    18ee:	09 f0       	breq	.+2      	; 0x18f2 <Endpoint_Write_Control_PStream_LE+0x84>
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    18f6:	8e 77       	andi	r24, 0x7E	; 126
    18f8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    18fc:	cb cf       	rjmp	.-106    	; 0x1894 <Endpoint_Write_Control_PStream_LE+0x26>
    18fe:	21 11       	cpse	r18, r1
    1900:	cc cf       	rjmp	.-104    	; 0x189a <Endpoint_Write_Control_PStream_LE+0x2c>
    1902:	0a c0       	rjmp	.+20     	; 0x1918 <Endpoint_Write_Control_PStream_LE+0xaa>
    1904:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <USB_DeviceState>
    1908:	88 23       	and	r24, r24
    190a:	61 f0       	breq	.+24     	; 0x1924 <Endpoint_Write_Control_PStream_LE+0xb6>
    190c:	85 30       	cpi	r24, 0x05	; 5
    190e:	61 f0       	breq	.+24     	; 0x1928 <Endpoint_Write_Control_PStream_LE+0xba>
    1910:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1914:	83 fd       	sbrc	r24, 3
    1916:	0a c0       	rjmp	.+20     	; 0x192c <Endpoint_Write_Control_PStream_LE+0xbe>
    1918:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    191c:	82 ff       	sbrs	r24, 2
    191e:	f2 cf       	rjmp	.-28     	; 0x1904 <Endpoint_Write_Control_PStream_LE+0x96>
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	08 95       	ret
    1924:	82 e0       	ldi	r24, 0x02	; 2
    1926:	08 95       	ret
    1928:	83 e0       	ldi	r24, 0x03	; 3
    192a:	08 95       	ret
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	08 95       	ret

00001930 <Endpoint_Write_Control_EStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    1930:	cf 92       	push	r12
    1932:	df 92       	push	r13
    1934:	ef 92       	push	r14
    1936:	ff 92       	push	r15
    1938:	0f 93       	push	r16
    193a:	1f 93       	push	r17
    193c:	cf 93       	push	r28
    193e:	df 93       	push	r29
    1940:	eb 01       	movw	r28, r22
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1942:	20 91 fb 01 	lds	r18, 0x01FB	; 0x8001fb <USB_ControlRequest+0x6>
    1946:	30 91 fc 01 	lds	r19, 0x01FC	; 0x8001fc <USB_ControlRequest+0x7>
    194a:	26 17       	cp	r18, r22
    194c:	37 07       	cpc	r19, r23
    194e:	40 f0       	brcs	.+16     	; 0x1960 <Endpoint_Write_Control_EStream_LE+0x30>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1950:	20 97       	sbiw	r28, 0x00	; 0
    1952:	39 f4       	brne	.+14     	; 0x1962 <Endpoint_Write_Control_EStream_LE+0x32>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1954:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1958:	2e 77       	andi	r18, 0x7E	; 126
    195a:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    195e:	01 c0       	rjmp	.+2      	; 0x1962 <Endpoint_Write_Control_EStream_LE+0x32>
    1960:	e9 01       	movw	r28, r18
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();
    1962:	6c 01       	movw	r12, r24
    1964:	20 e0       	ldi	r18, 0x00	; 0
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1966:	20 97       	sbiw	r28, 0x00	; 0
    1968:	d9 f1       	breq	.+118    	; 0x19e0 <Endpoint_Write_Control_EStream_LE+0xb0>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    196a:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    196e:	88 23       	and	r24, r24
    1970:	09 f4       	brne	.+2      	; 0x1974 <Endpoint_Write_Control_EStream_LE+0x44>
    1972:	49 c0       	rjmp	.+146    	; 0x1a06 <Endpoint_Write_Control_EStream_LE+0xd6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1974:	85 30       	cpi	r24, 0x05	; 5
    1976:	09 f4       	brne	.+2      	; 0x197a <Endpoint_Write_Control_EStream_LE+0x4a>
    1978:	48 c0       	rjmp	.+144    	; 0x1a0a <Endpoint_Write_Control_EStream_LE+0xda>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    197a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    197e:	83 fd       	sbrc	r24, 3
    1980:	46 c0       	rjmp	.+140    	; 0x1a0e <Endpoint_Write_Control_EStream_LE+0xde>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1982:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1986:	82 fd       	sbrc	r24, 2
    1988:	38 c0       	rjmp	.+112    	; 0x19fa <Endpoint_Write_Control_EStream_LE+0xca>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    198a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		  break;

		if (Endpoint_IsINReady())
    198e:	80 ff       	sbrs	r24, 0
    1990:	ea cf       	rjmp	.-44     	; 0x1966 <Endpoint_Write_Control_EStream_LE+0x36>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1992:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
    1996:	00 91 f2 00 	lds	r16, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    199a:	10 e0       	ldi	r17, 0x00	; 0
    199c:	18 2b       	or	r17, r24
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();
    199e:	78 01       	movw	r14, r16
    19a0:	c7 01       	movw	r24, r14
    19a2:	80 1b       	sub	r24, r16
    19a4:	91 0b       	sbc	r25, r17
    19a6:	8c 0d       	add	r24, r12
    19a8:	9d 1d       	adc	r25, r13

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    19aa:	20 97       	sbiw	r28, 0x00	; 0
    19ac:	61 f0       	breq	.+24     	; 0x19c6 <Endpoint_Write_Control_EStream_LE+0x96>
    19ae:	38 e0       	ldi	r19, 0x08	; 8
    19b0:	e3 16       	cp	r14, r19
    19b2:	f1 04       	cpc	r15, r1
    19b4:	40 f4       	brcc	.+16     	; 0x19c6 <Endpoint_Write_Control_EStream_LE+0x96>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    19b6:	a8 d3       	rcall	.+1872   	; 0x2108 <eeprom_read_byte>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    19b8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    19bc:	21 97       	sbiw	r28, 0x01	; 1
				BytesInEndpoint++;
    19be:	2f ef       	ldi	r18, 0xFF	; 255
    19c0:	e2 1a       	sub	r14, r18
    19c2:	f2 0a       	sbc	r15, r18
    19c4:	ed cf       	rjmp	.-38     	; 0x19a0 <Endpoint_Write_Control_EStream_LE+0x70>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    19c6:	21 e0       	ldi	r18, 0x01	; 1
    19c8:	38 e0       	ldi	r19, 0x08	; 8
    19ca:	e3 16       	cp	r14, r19
    19cc:	f1 04       	cpc	r15, r1
    19ce:	09 f0       	breq	.+2      	; 0x19d2 <Endpoint_Write_Control_EStream_LE+0xa2>
    19d0:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    19d2:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    19d6:	3e 77       	andi	r19, 0x7E	; 126
    19d8:	30 93 e8 00 	sts	0x00E8, r19	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    19dc:	6c 01       	movw	r12, r24
    19de:	c3 cf       	rjmp	.-122    	; 0x1966 <Endpoint_Write_Control_EStream_LE+0x36>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    19e0:	21 11       	cpse	r18, r1
    19e2:	c3 cf       	rjmp	.-122    	; 0x196a <Endpoint_Write_Control_EStream_LE+0x3a>
    19e4:	0a c0       	rjmp	.+20     	; 0x19fa <Endpoint_Write_Control_EStream_LE+0xca>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    19e6:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    19ea:	88 23       	and	r24, r24
    19ec:	61 f0       	breq	.+24     	; 0x1a06 <Endpoint_Write_Control_EStream_LE+0xd6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    19ee:	85 30       	cpi	r24, 0x05	; 5
    19f0:	61 f0       	breq	.+24     	; 0x1a0a <Endpoint_Write_Control_EStream_LE+0xda>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    19f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    19f6:	83 fd       	sbrc	r24, 3
    19f8:	0a c0       	rjmp	.+20     	; 0x1a0e <Endpoint_Write_Control_EStream_LE+0xde>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    19fa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    19fe:	82 ff       	sbrs	r24, 2
    1a00:	f2 cf       	rjmp	.-28     	; 0x19e6 <Endpoint_Write_Control_EStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	05 c0       	rjmp	.+10     	; 0x1a10 <Endpoint_Write_Control_EStream_LE+0xe0>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1a06:	82 e0       	ldi	r24, 0x02	; 2
    1a08:	03 c0       	rjmp	.+6      	; 0x1a10 <Endpoint_Write_Control_EStream_LE+0xe0>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1a0a:	83 e0       	ldi	r24, 0x03	; 3
    1a0c:	01 c0       	rjmp	.+2      	; 0x1a10 <Endpoint_Write_Control_EStream_LE+0xe0>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1a10:	df 91       	pop	r29
    1a12:	cf 91       	pop	r28
    1a14:	1f 91       	pop	r17
    1a16:	0f 91       	pop	r16
    1a18:	ff 90       	pop	r15
    1a1a:	ef 90       	pop	r14
    1a1c:	df 90       	pop	r13
    1a1e:	cf 90       	pop	r12
    1a20:	08 95       	ret

00001a22 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    1a22:	98 2f       	mov	r25, r24
    1a24:	97 30       	cpi	r25, 0x07	; 7
    1a26:	68 f5       	brcc	.+90     	; 0x1a82 <Endpoint_ConfigureEndpoint_Prv+0x60>
    1a28:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    1a2c:	98 17       	cp	r25, r24
    1a2e:	39 f0       	breq	.+14     	; 0x1a3e <Endpoint_ConfigureEndpoint_Prv+0x1c>
    1a30:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
    1a34:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
    1a38:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
    1a3c:	03 c0       	rjmp	.+6      	; 0x1a44 <Endpoint_ConfigureEndpoint_Prv+0x22>
    1a3e:	24 2f       	mov	r18, r20
    1a40:	76 2f       	mov	r23, r22
    1a42:	50 e0       	ldi	r21, 0x00	; 0
    1a44:	21 fd       	sbrc	r18, 1
    1a46:	02 c0       	rjmp	.+4      	; 0x1a4c <Endpoint_ConfigureEndpoint_Prv+0x2a>
    1a48:	9f 5f       	subi	r25, 0xFF	; 255
    1a4a:	ec cf       	rjmp	.-40     	; 0x1a24 <Endpoint_ConfigureEndpoint_Prv+0x2>
    1a4c:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    1a50:	3e 7f       	andi	r19, 0xFE	; 254
    1a52:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    1a56:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
    1a5a:	3d 7f       	andi	r19, 0xFD	; 253
    1a5c:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
    1a60:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    1a64:	31 60       	ori	r19, 0x01	; 1
    1a66:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    1a6a:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
    1a6e:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
    1a72:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
    1a76:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f80ee>
    1a7a:	27 fd       	sbrc	r18, 7
    1a7c:	e5 cf       	rjmp	.-54     	; 0x1a48 <Endpoint_ConfigureEndpoint_Prv+0x26>
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	08 95       	ret
    1a82:	8f 70       	andi	r24, 0x0F	; 15
    1a84:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	08 95       	ret

00001a8c <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1a8c:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <USB_ControlRequest>
    1a90:	87 ff       	sbrs	r24, 7
    1a92:	11 c0       	rjmp	.+34     	; 0x1ab6 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a94:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    1a98:	82 fd       	sbrc	r24, 2
    1a9a:	05 c0       	rjmp	.+10     	; 0x1aa6 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1a9c:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <USB_DeviceState>
    1aa0:	81 11       	cpse	r24, r1
    1aa2:	f8 cf       	rjmp	.-16     	; 0x1a94 <Endpoint_ClearStatusStage+0x8>
    1aa4:	11 c0       	rjmp	.+34     	; 0x1ac8 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1aa6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1aaa:	8b 77       	andi	r24, 0x7B	; 123
    1aac:	0b c0       	rjmp	.+22     	; 0x1ac4 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1aae:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <USB_DeviceState>
    1ab2:	88 23       	and	r24, r24
    1ab4:	49 f0       	breq	.+18     	; 0x1ac8 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1ab6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1aba:	80 ff       	sbrs	r24, 0
    1abc:	f8 cf       	rjmp	.-16     	; 0x1aae <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1abe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1ac2:	8e 77       	andi	r24, 0x7E	; 126
    1ac4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1ac8:	08 95       	ret

00001aca <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1aca:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
    1ace:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7f80e5>
    1ad2:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1ad4:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
    1ad8:	84 2f       	mov	r24, r20
    1ada:	81 70       	andi	r24, 0x01	; 1
    1adc:	40 ff       	sbrs	r20, 0
    1ade:	23 c0       	rjmp	.+70     	; 0x1b26 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1ae0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1ae4:	80 fd       	sbrc	r24, 0
    1ae6:	1d c0       	rjmp	.+58     	; 0x1b22 <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1ae8:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1aec:	88 23       	and	r24, r24
    1aee:	99 f0       	breq	.+38     	; 0x1b16 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1af0:	85 30       	cpi	r24, 0x05	; 5
    1af2:	99 f0       	breq	.+38     	; 0x1b1a <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1af4:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1af8:	85 fd       	sbrc	r24, 5
    1afa:	11 c0       	rjmp	.+34     	; 0x1b1e <Endpoint_WaitUntilReady+0x54>
    1afc:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
    1b00:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7f80e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1b04:	24 17       	cp	r18, r20
    1b06:	35 07       	cpc	r19, r21
    1b08:	29 f3       	breq	.-54     	; 0x1ad4 <Endpoint_WaitUntilReady+0xa>
    1b0a:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1b0c:	11 f0       	breq	.+4      	; 0x1b12 <Endpoint_WaitUntilReady+0x48>
    1b0e:	9a 01       	movw	r18, r20
    1b10:	e1 cf       	rjmp	.-62     	; 0x1ad4 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    1b12:	84 e0       	ldi	r24, 0x04	; 4
    1b14:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1b16:	82 e0       	ldi	r24, 0x02	; 2
    1b18:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1b1a:	83 e0       	ldi	r24, 0x03	; 3
    1b1c:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b26:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1b2a:	42 ff       	sbrs	r20, 2
    1b2c:	dd cf       	rjmp	.-70     	; 0x1ae8 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1b2e:	08 95       	ret

00001b30 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1b30:	67 d0       	rcall	.+206    	; 0x1c00 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1b32:	6e d0       	rcall	.+220    	; 0x1c10 <USB_INT_ClearAllInterrupts>
    1b34:	e0 ee       	ldi	r30, 0xE0	; 224
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	81 60       	ori	r24, 0x01	; 1
    1b3c:	80 83       	st	Z, r24
    1b3e:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	8f 77       	andi	r24, 0x7F	; 127
    1b46:	80 83       	st	Z, r24
    1b48:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1b4a:	a7 ed       	ldi	r26, 0xD7	; 215

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	8c 91       	ld	r24, X
    1b50:	8e 7f       	andi	r24, 0xFE	; 254
    1b52:	8c 93       	st	X, r24
    1b54:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1b56:	8f 7e       	andi	r24, 0xEF	; 239
    1b58:	80 83       	st	Z, r24
    1b5a:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <USB_IsInitialized>

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1b5e:	08 95       	ret

00001b60 <USB_ResetInterface>:
    1b60:	0f 93       	push	r16
}

void USB_ResetInterface(void)
{
    1b62:	1f 93       	push	r17
    1b64:	cf 93       	push	r28
    1b66:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1b68:	4b d0       	rcall	.+150    	; 0x1c00 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1b6a:	52 d0       	rcall	.+164    	; 0x1c10 <USB_INT_ClearAllInterrupts>
    1b6c:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1b6e:	d0 e0       	ldi	r29, 0x00	; 0
    1b70:	88 81       	ld	r24, Y
    1b72:	8f 77       	andi	r24, 0x7F	; 127
    1b74:	88 83       	st	Y, r24
    1b76:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
    1b78:	80 68       	ori	r24, 0x80	; 128
    1b7a:	88 83       	st	Y, r24
    1b7c:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1b7e:	8f 7d       	andi	r24, 0xDF	; 223
    1b80:	88 83       	st	Y, r24
    1b82:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1b84:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1b88:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
    1b8c:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1b90:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1b94:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1b96:	10 e0       	ldi	r17, 0x00	; 0
    1b98:	f8 01       	movw	r30, r16
    1b9a:	80 81       	ld	r24, Z
    1b9c:	8b 7f       	andi	r24, 0xFB	; 251
    1b9e:	80 83       	st	Z, r24
    1ba0:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1ba2:	81 60       	ori	r24, 0x01	; 1
    1ba4:	88 83       	st	Y, r24
    1ba6:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1ba8:	60 e0       	ldi	r22, 0x00	; 0
    1baa:	80 e0       	ldi	r24, 0x00	; 0
    1bac:	3a df       	rcall	.-396    	; 0x1a22 <Endpoint_ConfigureEndpoint_Prv>
    1bae:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	8e 7f       	andi	r24, 0xFE	; 254
    1bb6:	80 83       	st	Z, r24
    1bb8:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	81 60       	ori	r24, 0x01	; 1
    1bc0:	80 83       	st	Z, r24
    1bc2:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1bc4:	88 60       	ori	r24, 0x08	; 8
    1bc6:	80 83       	st	Z, r24
    1bc8:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1bca:	80 81       	ld	r24, Z
    1bcc:	8e 7f       	andi	r24, 0xFE	; 254
    1bce:	80 83       	st	Z, r24
    1bd0:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1bd2:	80 61       	ori	r24, 0x10	; 16
    1bd4:	88 83       	st	Y, r24
    1bd6:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1bd8:	cf 91       	pop	r28
    1bda:	1f 91       	pop	r17
    1bdc:	0f 91       	pop	r16
    1bde:	08 95       	ret

00001be0 <USB_Init>:
    1be0:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	8f 7e       	andi	r24, 0xEF	; 239
    1be8:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1bea:	e7 ed       	ldi	r30, 0xD7	; 215
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	81 60       	ori	r24, 0x01	; 1
    1bf2:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1bf4:	84 e0       	ldi	r24, 0x04	; 4
    1bf6:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <USB_IsInitialized>

	USB_ResetInterface();
    1bfe:	b0 cf       	rjmp	.-160    	; 0x1b60 <USB_ResetInterface>

00001c00 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1c00:	e8 ed       	ldi	r30, 0xD8	; 216
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	8e 7f       	andi	r24, 0xFE	; 254
    1c08:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1c0a:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1c0e:	08 95       	ret

00001c10 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1c10:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1c14:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    1c18:	08 95       	ret

00001c1a <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1c1a:	1f 92       	push	r1
    1c1c:	0f 92       	push	r0
    1c1e:	0f b6       	in	r0, 0x3f	; 63
    1c20:	0f 92       	push	r0
    1c22:	11 24       	eor	r1, r1
    1c24:	2f 93       	push	r18
    1c26:	3f 93       	push	r19
    1c28:	4f 93       	push	r20
    1c2a:	5f 93       	push	r21
    1c2c:	6f 93       	push	r22
    1c2e:	7f 93       	push	r23
    1c30:	8f 93       	push	r24
    1c32:	9f 93       	push	r25
    1c34:	af 93       	push	r26
    1c36:	bf 93       	push	r27
    1c38:	ef 93       	push	r30
    1c3a:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1c3c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1c40:	82 ff       	sbrs	r24, 2
    1c42:	0a c0       	rjmp	.+20     	; 0x1c58 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1c44:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1c48:	82 ff       	sbrs	r24, 2
    1c4a:	06 c0       	rjmp	.+12     	; 0x1c58 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1c4c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    1c50:	8b 7f       	andi	r24, 0xFB	; 251
    1c52:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1c56:	28 d2       	rcall	.+1104   	; 0x20a8 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1c58:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1c5c:	80 ff       	sbrs	r24, 0
    1c5e:	1f c0       	rjmp	.+62     	; 0x1c9e <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1c60:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
    1c64:	80 ff       	sbrs	r24, 0
    1c66:	1b c0       	rjmp	.+54     	; 0x1c9e <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1c68:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
    1c6c:	8e 7f       	andi	r24, 0xFE	; 254
    1c6e:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1c72:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f80d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1c76:	80 ff       	sbrs	r24, 0
    1c78:	0d c0       	rjmp	.+26     	; 0x1c94 <__vector_10+0x7a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1c7a:	80 e1       	ldi	r24, 0x10	; 16
    1c7c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1c7e:	82 e1       	ldi	r24, 0x12	; 18
    1c80:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1c82:	09 b4       	in	r0, 0x29	; 41
    1c84:	00 fe       	sbrs	r0, 0
    1c86:	fd cf       	rjmp	.-6      	; 0x1c82 <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <USB_DeviceState>
			EVENT_USB_Device_Connect();
    1c8e:	0e 94 a8 02 	call	0x550	; 0x550 <EVENT_USB_Device_Connect>
    1c92:	05 c0       	rjmp	.+10     	; 0x1c9e <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1c94:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1c96:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    1c9a:	0e 94 a9 02 	call	0x552	; 0x552 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1c9e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1ca2:	80 ff       	sbrs	r24, 0
    1ca4:	18 c0       	rjmp	.+48     	; 0x1cd6 <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1ca6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1caa:	80 ff       	sbrs	r24, 0
    1cac:	14 c0       	rjmp	.+40     	; 0x1cd6 <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1cae:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1cb2:	8e 7f       	andi	r24, 0xFE	; 254
    1cb4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1cb8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1cbc:	80 61       	ori	r24, 0x10	; 16
    1cbe:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1cc2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
    1cc6:	80 62       	ori	r24, 0x20	; 32
    1cc8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1ccc:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1cce:	85 e0       	ldi	r24, 0x05	; 5
    1cd0:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    1cd4:	e9 d1       	rcall	.+978    	; 0x20a8 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1cd6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1cda:	84 ff       	sbrs	r24, 4
    1cdc:	2f c0       	rjmp	.+94     	; 0x1d3c <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1cde:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1ce2:	84 ff       	sbrs	r24, 4
    1ce4:	2b c0       	rjmp	.+86     	; 0x1d3c <__vector_10+0x122>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1ce6:	80 e1       	ldi	r24, 0x10	; 16
    1ce8:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1cea:	82 e1       	ldi	r24, 0x12	; 18
    1cec:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1cee:	09 b4       	in	r0, 0x29	; 41
    1cf0:	00 fe       	sbrs	r0, 0
    1cf2:	fd cf       	rjmp	.-6      	; 0x1cee <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1cf4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
    1cf8:	8f 7d       	andi	r24, 0xDF	; 223
    1cfa:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1cfe:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    1d02:	8f 7e       	andi	r24, 0xEF	; 239
    1d04:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1d08:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1d0c:	8f 7e       	andi	r24, 0xEF	; 239
    1d0e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1d12:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1d16:	81 60       	ori	r24, 0x01	; 1
    1d18:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1d1c:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <USB_Device_ConfigurationNumber>
    1d20:	88 23       	and	r24, r24
    1d22:	11 f0       	breq	.+4      	; 0x1d28 <__vector_10+0x10e>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1d24:	84 e0       	ldi	r24, 0x04	; 4
    1d26:	07 c0       	rjmp	.+14     	; 0x1d36 <__vector_10+0x11c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1d28:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1d2c:	87 fd       	sbrc	r24, 7
    1d2e:	02 c0       	rjmp	.+4      	; 0x1d34 <__vector_10+0x11a>
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	01 c0       	rjmp	.+2      	; 0x1d36 <__vector_10+0x11c>
    1d34:	83 e0       	ldi	r24, 0x03	; 3
    1d36:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1d3a:	b6 d1       	rcall	.+876    	; 0x20a8 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1d3c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1d40:	83 ff       	sbrs	r24, 3
    1d42:	27 c0       	rjmp	.+78     	; 0x1d92 <__vector_10+0x178>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1d44:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1d48:	83 ff       	sbrs	r24, 3
    1d4a:	23 c0       	rjmp	.+70     	; 0x1d92 <__vector_10+0x178>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1d4c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    1d50:	87 7f       	andi	r24, 0xF7	; 247
    1d52:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1d56:	82 e0       	ldi	r24, 0x02	; 2
    1d58:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    1d5c:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1d60:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    1d64:	8e 7f       	andi	r24, 0xFE	; 254
    1d66:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1d6a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1d6e:	8e 7f       	andi	r24, 0xFE	; 254
    1d70:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1d74:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1d78:	80 61       	ori	r24, 0x10	; 16
    1d7a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1d7e:	42 e0       	ldi	r20, 0x02	; 2
    1d80:	60 e0       	ldi	r22, 0x00	; 0
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	4e de       	rcall	.-868    	; 0x1a22 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1d86:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
    1d8a:	88 60       	ori	r24, 0x08	; 8
    1d8c:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1d90:	8b d1       	rcall	.+790    	; 0x20a8 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1d92:	ff 91       	pop	r31
    1d94:	ef 91       	pop	r30
    1d96:	bf 91       	pop	r27
    1d98:	af 91       	pop	r26
    1d9a:	9f 91       	pop	r25
    1d9c:	8f 91       	pop	r24
    1d9e:	7f 91       	pop	r23
    1da0:	6f 91       	pop	r22
    1da2:	5f 91       	pop	r21
    1da4:	4f 91       	pop	r20
    1da6:	3f 91       	pop	r19
    1da8:	2f 91       	pop	r18
    1daa:	0f 90       	pop	r0
    1dac:	0f be       	out	0x3f, r0	; 63
    1dae:	0f 90       	pop	r0
    1db0:	1f 90       	pop	r1
    1db2:	18 95       	reti

00001db4 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1db4:	1f 92       	push	r1
    1db6:	0f 92       	push	r0
    1db8:	0f b6       	in	r0, 0x3f	; 63
    1dba:	0f 92       	push	r0
    1dbc:	11 24       	eor	r1, r1
    1dbe:	2f 93       	push	r18
    1dc0:	3f 93       	push	r19
    1dc2:	4f 93       	push	r20
    1dc4:	5f 93       	push	r21
    1dc6:	6f 93       	push	r22
    1dc8:	7f 93       	push	r23
    1dca:	8f 93       	push	r24
    1dcc:	9f 93       	push	r25
    1dce:	af 93       	push	r26
    1dd0:	bf 93       	push	r27
    1dd2:	cf 93       	push	r28
    1dd4:	df 93       	push	r29
    1dd6:	ef 93       	push	r30
    1dd8:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1dda:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    1dde:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1de0:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
    1de4:	d8 2f       	mov	r29, r24
    1de6:	d1 70       	andi	r29, 0x01	; 1
    1de8:	80 fd       	sbrc	r24, 0
    1dea:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1dec:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1df0:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
    1df4:	87 7f       	andi	r24, 0xF7	; 247
    1df6:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1dfa:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1dfc:	1e d0       	rcall	.+60     	; 0x1e3a <USB_Device_ProcessControlRequest>
    1dfe:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1e02:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
    1e06:	88 60       	ori	r24, 0x08	; 8
    1e08:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
    1e0c:	cd 2b       	or	r28, r29
    1e0e:	cf 70       	andi	r28, 0x0F	; 15
    1e10:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1e14:	ff 91       	pop	r31
    1e16:	ef 91       	pop	r30
    1e18:	df 91       	pop	r29
    1e1a:	cf 91       	pop	r28
    1e1c:	bf 91       	pop	r27
    1e1e:	af 91       	pop	r26
    1e20:	9f 91       	pop	r25
    1e22:	8f 91       	pop	r24
    1e24:	7f 91       	pop	r23
    1e26:	6f 91       	pop	r22
    1e28:	5f 91       	pop	r21
    1e2a:	4f 91       	pop	r20
    1e2c:	3f 91       	pop	r19
    1e2e:	2f 91       	pop	r18
    1e30:	0f 90       	pop	r0
    1e32:	0f be       	out	0x3f, r0	; 63
    1e34:	0f 90       	pop	r0
    1e36:	1f 90       	pop	r1
    1e38:	18 95       	reti

00001e3a <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1e3a:	1f 93       	push	r17
    1e3c:	cf 93       	push	r28
    1e3e:	df 93       	push	r29
    1e40:	00 d0       	rcall	.+0      	; 0x1e42 <USB_Device_ProcessControlRequest+0x8>
    1e42:	1f 92       	push	r1
    1e44:	cd b7       	in	r28, 0x3d	; 61
    1e46:	de b7       	in	r29, 0x3e	; 62
    1e48:	e5 ef       	ldi	r30, 0xF5	; 245
    1e4a:	f1 e0       	ldi	r31, 0x01	; 1
    1e4c:	8d ef       	ldi	r24, 0xFD	; 253
    1e4e:	91 e0       	ldi	r25, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1e50:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1e54:	21 93       	st	Z+, r18
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1e56:	8e 17       	cp	r24, r30
    1e58:	9f 07       	cpc	r25, r31
    1e5a:	d1 f7       	brne	.-12     	; 0x1e50 <USB_Device_ProcessControlRequest+0x16>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1e5c:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1e60:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	if (Endpoint_IsSETUPReceived())
    1e64:	83 ff       	sbrs	r24, 3
    1e66:	0b c1       	rjmp	.+534    	; 0x207e <USB_Device_ProcessControlRequest+0x244>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1e68:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    1e6c:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <USB_ControlRequest+0x1>
    1e70:	95 30       	cpi	r25, 0x05	; 5
    1e72:	09 f4       	brne	.+2      	; 0x1e76 <USB_Device_ProcessControlRequest+0x3c>
    1e74:	83 c0       	rjmp	.+262    	; 0x1f7c <USB_Device_ProcessControlRequest+0x142>
    1e76:	30 f4       	brcc	.+12     	; 0x1e84 <USB_Device_ProcessControlRequest+0x4a>
    1e78:	91 30       	cpi	r25, 0x01	; 1
    1e7a:	a9 f1       	breq	.+106    	; 0x1ee6 <USB_Device_ProcessControlRequest+0xac>
    1e7c:	68 f0       	brcs	.+26     	; 0x1e98 <USB_Device_ProcessControlRequest+0x5e>
    1e7e:	93 30       	cpi	r25, 0x03	; 3
    1e80:	91 f1       	breq	.+100    	; 0x1ee6 <USB_Device_ProcessControlRequest+0xac>
    1e82:	fd c0       	rjmp	.+506    	; 0x207e <USB_Device_ProcessControlRequest+0x244>
    1e84:	98 30       	cpi	r25, 0x08	; 8
    1e86:	09 f4       	brne	.+2      	; 0x1e8a <USB_Device_ProcessControlRequest+0x50>
    1e88:	c9 c0       	rjmp	.+402    	; 0x201c <USB_Device_ProcessControlRequest+0x1e2>
    1e8a:	99 30       	cpi	r25, 0x09	; 9
    1e8c:	09 f4       	brne	.+2      	; 0x1e90 <USB_Device_ProcessControlRequest+0x56>
    1e8e:	d5 c0       	rjmp	.+426    	; 0x203a <USB_Device_ProcessControlRequest+0x200>
    1e90:	96 30       	cpi	r25, 0x06	; 6
    1e92:	09 f0       	breq	.+2      	; 0x1e96 <USB_Device_ProcessControlRequest+0x5c>
    1e94:	f4 c0       	rjmp	.+488    	; 0x207e <USB_Device_ProcessControlRequest+0x244>
    1e96:	94 c0       	rjmp	.+296    	; 0x1fc0 <USB_Device_ProcessControlRequest+0x186>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1e98:	80 38       	cpi	r24, 0x80	; 128
    1e9a:	21 f0       	breq	.+8      	; 0x1ea4 <USB_Device_ProcessControlRequest+0x6a>
    1e9c:	82 38       	cpi	r24, 0x82	; 130
    1e9e:	09 f0       	breq	.+2      	; 0x1ea2 <USB_Device_ProcessControlRequest+0x68>
    1ea0:	ee c0       	rjmp	.+476    	; 0x207e <USB_Device_ProcessControlRequest+0x244>
    1ea2:	08 c0       	rjmp	.+16     	; 0x1eb4 <USB_Device_ProcessControlRequest+0x7a>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1ea4:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1ea8:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <USB_Device_RemoteWakeupEnabled>
    1eac:	99 23       	and	r25, r25
    1eae:	89 f0       	breq	.+34     	; 0x1ed2 <USB_Device_ProcessControlRequest+0x98>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1eb0:	82 60       	ori	r24, 0x02	; 2
    1eb2:	0f c0       	rjmp	.+30     	; 0x1ed2 <USB_Device_ProcessControlRequest+0x98>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1eb4:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <USB_ControlRequest+0x4>
    1eb8:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    1eba:	87 30       	cpi	r24, 0x07	; 7
    1ebc:	08 f0       	brcs	.+2      	; 0x1ec0 <USB_Device_ProcessControlRequest+0x86>
    1ebe:	df c0       	rjmp	.+446    	; 0x207e <USB_Device_ProcessControlRequest+0x244>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ec0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1ec4:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
    1ec8:	85 fb       	bst	r24, 5
    1eca:	88 27       	eor	r24, r24
    1ecc:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ece:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ed2:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1ed6:	97 7f       	andi	r25, 0xF7	; 247
    1ed8:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1edc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				UEDATX = (Data >> 8);
    1ee0:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    1ee4:	a6 c0       	rjmp	.+332    	; 0x2032 <USB_Device_ProcessControlRequest+0x1f8>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1ee6:	28 2f       	mov	r18, r24
    1ee8:	2d 7f       	andi	r18, 0xFD	; 253
    1eea:	09 f0       	breq	.+2      	; 0x1eee <USB_Device_ProcessControlRequest+0xb4>
    1eec:	c8 c0       	rjmp	.+400    	; 0x207e <USB_Device_ProcessControlRequest+0x244>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1eee:	88 23       	and	r24, r24
    1ef0:	19 f0       	breq	.+6      	; 0x1ef8 <USB_Device_ProcessControlRequest+0xbe>
    1ef2:	82 30       	cpi	r24, 0x02	; 2
    1ef4:	61 f0       	breq	.+24     	; 0x1f0e <USB_Device_ProcessControlRequest+0xd4>
    1ef6:	c3 c0       	rjmp	.+390    	; 0x207e <USB_Device_ProcessControlRequest+0x244>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1ef8:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <USB_ControlRequest+0x2>
    1efc:	81 30       	cpi	r24, 0x01	; 1
    1efe:	09 f0       	breq	.+2      	; 0x1f02 <USB_Device_ProcessControlRequest+0xc8>
    1f00:	be c0       	rjmp	.+380    	; 0x207e <USB_Device_ProcessControlRequest+0x244>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1f02:	93 30       	cpi	r25, 0x03	; 3
    1f04:	09 f0       	breq	.+2      	; 0x1f08 <USB_Device_ProcessControlRequest+0xce>
    1f06:	80 e0       	ldi	r24, 0x00	; 0
    1f08:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <USB_Device_RemoteWakeupEnabled>
    1f0c:	2e c0       	rjmp	.+92     	; 0x1f6a <USB_Device_ProcessControlRequest+0x130>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1f0e:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <USB_ControlRequest+0x2>
    1f12:	81 11       	cpse	r24, r1
    1f14:	2a c0       	rjmp	.+84     	; 0x1f6a <USB_Device_ProcessControlRequest+0x130>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1f16:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <USB_ControlRequest+0x4>
    1f1a:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    1f1c:	2f ef       	ldi	r18, 0xFF	; 255
    1f1e:	28 0f       	add	r18, r24
    1f20:	26 30       	cpi	r18, 0x06	; 6
    1f22:	08 f0       	brcs	.+2      	; 0x1f26 <USB_Device_ProcessControlRequest+0xec>
    1f24:	ac c0       	rjmp	.+344    	; 0x207e <USB_Device_ProcessControlRequest+0x244>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f26:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1f2a:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1f2e:	20 ff       	sbrs	r18, 0
    1f30:	1c c0       	rjmp	.+56     	; 0x1f6a <USB_Device_ProcessControlRequest+0x130>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1f32:	93 30       	cpi	r25, 0x03	; 3
    1f34:	21 f4       	brne	.+8      	; 0x1f3e <USB_Device_ProcessControlRequest+0x104>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1f36:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    1f3a:	80 62       	ori	r24, 0x20	; 32
    1f3c:	14 c0       	rjmp	.+40     	; 0x1f66 <USB_Device_ProcessControlRequest+0x12c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1f3e:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    1f42:	90 61       	ori	r25, 0x10	; 16
    1f44:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1f48:	21 e0       	ldi	r18, 0x01	; 1
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	a9 01       	movw	r20, r18
    1f4e:	02 c0       	rjmp	.+4      	; 0x1f54 <USB_Device_ProcessControlRequest+0x11a>
    1f50:	44 0f       	add	r20, r20
    1f52:	55 1f       	adc	r21, r21
    1f54:	8a 95       	dec	r24
    1f56:	e2 f7       	brpl	.-8      	; 0x1f50 <USB_Device_ProcessControlRequest+0x116>
    1f58:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>
				UERST = 0;
    1f5c:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1f60:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    1f64:	88 60       	ori	r24, 0x08	; 8
    1f66:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f6a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f6e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1f72:	87 7f       	andi	r24, 0xF7	; 247
    1f74:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1f78:	89 dd       	rcall	.-1262   	; 0x1a8c <Endpoint_ClearStatusStage>
    1f7a:	81 c0       	rjmp	.+258    	; 0x207e <USB_Device_ProcessControlRequest+0x244>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1f7c:	81 11       	cpse	r24, r1
    1f7e:	7f c0       	rjmp	.+254    	; 0x207e <USB_Device_ProcessControlRequest+0x244>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1f80:	10 91 f7 01 	lds	r17, 0x01F7	; 0x8001f7 <USB_ControlRequest+0x2>
    1f84:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1f86:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
    1f8a:	80 78       	andi	r24, 0x80	; 128
    1f8c:	81 2b       	or	r24, r17
    1f8e:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
    1f92:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1f96:	87 7f       	andi	r24, 0xF7	; 247
    1f98:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1f9c:	77 dd       	rcall	.-1298   	; 0x1a8c <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1f9e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	while (!(Endpoint_IsINReady()));
    1fa2:	80 ff       	sbrs	r24, 0
    1fa4:	fc cf       	rjmp	.-8      	; 0x1f9e <USB_Device_ProcessControlRequest+0x164>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1fa6:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
    1faa:	80 68       	ori	r24, 0x80	; 128
    1fac:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1fb0:	11 11       	cpse	r17, r1
    1fb2:	02 c0       	rjmp	.+4      	; 0x1fb8 <USB_Device_ProcessControlRequest+0x17e>
    1fb4:	82 e0       	ldi	r24, 0x02	; 2
    1fb6:	01 c0       	rjmp	.+2      	; 0x1fba <USB_Device_ProcessControlRequest+0x180>
    1fb8:	83 e0       	ldi	r24, 0x03	; 3
    1fba:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <USB_DeviceState>
    1fbe:	5f c0       	rjmp	.+190    	; 0x207e <USB_Device_ProcessControlRequest+0x244>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1fc0:	80 58       	subi	r24, 0x80	; 128
    1fc2:	82 30       	cpi	r24, 0x02	; 2
    1fc4:	08 f0       	brcs	.+2      	; 0x1fc8 <USB_Device_ProcessControlRequest+0x18e>
    1fc6:	5b c0       	rjmp	.+182    	; 0x207e <USB_Device_ProcessControlRequest+0x244>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1fc8:	60 91 f9 01 	lds	r22, 0x01F9	; 0x8001f9 <USB_ControlRequest+0x4>
    1fcc:	70 91 fa 01 	lds	r23, 0x01FA	; 0x8001fa <USB_ControlRequest+0x5>
    1fd0:	9e 01       	movw	r18, r28
    1fd2:	2d 5f       	subi	r18, 0xFD	; 253
    1fd4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd6:	ae 01       	movw	r20, r28
    1fd8:	4f 5f       	subi	r20, 0xFF	; 255
    1fda:	5f 4f       	sbci	r21, 0xFF	; 255
    1fdc:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <USB_ControlRequest+0x2>
    1fe0:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <USB_ControlRequest+0x3>
    1fe4:	b1 d8       	rcall	.-3742   	; 0x1148 <CALLBACK_USB_GetDescriptor>
    1fe6:	bc 01       	movw	r22, r24
    1fe8:	89 2b       	or	r24, r25
    1fea:	09 f4       	brne	.+2      	; 0x1fee <USB_Device_ProcessControlRequest+0x1b4>
    1fec:	48 c0       	rjmp	.+144    	; 0x207e <USB_Device_ProcessControlRequest+0x244>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1fee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1ff2:	87 7f       	andi	r24, 0xF7	; 247
    1ff4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
	#else
	if (DescriptorAddressSpace == MEMSPACE_FLASH)
    1ff8:	2b 81       	ldd	r18, Y+3	; 0x03
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
    1ffc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffe:	21 11       	cpse	r18, r1
	  Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    2000:	02 c0       	rjmp	.+4      	; 0x2006 <USB_Device_ProcessControlRequest+0x1cc>
    2002:	35 dc       	rcall	.-1942   	; 0x186e <Endpoint_Write_Control_PStream_LE>
	else if (DescriptorAddressSpace == MEMSPACE_EEPROM)
    2004:	05 c0       	rjmp	.+10     	; 0x2010 <USB_Device_ProcessControlRequest+0x1d6>
	  Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
    2006:	21 30       	cpi	r18, 0x01	; 1
    2008:	11 f4       	brne	.+4      	; 0x200e <USB_Device_ProcessControlRequest+0x1d4>
    200a:	92 dc       	rcall	.-1756   	; 0x1930 <Endpoint_Write_Control_EStream_LE>
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    200c:	01 c0       	rjmp	.+2      	; 0x2010 <USB_Device_ProcessControlRequest+0x1d6>
    200e:	d1 db       	rcall	.-2142   	; 0x17b2 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2010:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    2014:	8b 77       	andi	r24, 0x7B	; 123
    2016:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    201a:	31 c0       	rjmp	.+98     	; 0x207e <USB_Device_ProcessControlRequest+0x244>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    201c:	80 38       	cpi	r24, 0x80	; 128
    201e:	79 f5       	brne	.+94     	; 0x207e <USB_Device_ProcessControlRequest+0x244>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2020:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    2024:	87 7f       	andi	r24, 0xF7	; 247
    2026:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    202a:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    202e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2032:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    2036:	8e 77       	andi	r24, 0x7E	; 126
    2038:	9d cf       	rjmp	.-198    	; 0x1f74 <USB_Device_ProcessControlRequest+0x13a>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    203a:	81 11       	cpse	r24, r1
    203c:	20 c0       	rjmp	.+64     	; 0x207e <USB_Device_ProcessControlRequest+0x244>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    203e:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <USB_ControlRequest+0x2>
    2042:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <USB_ControlRequest+0x3>
    2046:	99 27       	eor	r25, r25
    2048:	02 97       	sbiw	r24, 0x02	; 2
    204a:	cc f4       	brge	.+50     	; 0x207e <USB_Device_ProcessControlRequest+0x244>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    204c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    2050:	87 7f       	andi	r24, 0xF7	; 247
    2052:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    2056:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <USB_ControlRequest+0x2>
    205a:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    205e:	16 dd       	rcall	.-1492   	; 0x1a8c <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    2060:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <USB_Device_ConfigurationNumber>
    2064:	81 11       	cpse	r24, r1
    2066:	06 c0       	rjmp	.+12     	; 0x2074 <USB_Device_ProcessControlRequest+0x23a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2068:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    206c:	87 fd       	sbrc	r24, 7
    206e:	02 c0       	rjmp	.+4      	; 0x2074 <USB_Device_ProcessControlRequest+0x23a>
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	01 c0       	rjmp	.+2      	; 0x2076 <USB_Device_ProcessControlRequest+0x23c>
    2074:	84 e0       	ldi	r24, 0x04	; 4
    2076:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    207a:	0e 94 aa 02 	call	0x554	; 0x554 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    207e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    2082:	83 ff       	sbrs	r24, 3
    2084:	0a c0       	rjmp	.+20     	; 0x209a <USB_Device_ProcessControlRequest+0x260>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2086:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    208a:	87 7f       	andi	r24, 0xF7	; 247
    208c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2090:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    2094:	80 62       	ori	r24, 0x20	; 32
    2096:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    209a:	0f 90       	pop	r0
    209c:	0f 90       	pop	r0
    209e:	0f 90       	pop	r0
    20a0:	df 91       	pop	r29
    20a2:	cf 91       	pop	r28
    20a4:	1f 91       	pop	r17
    20a6:	08 95       	ret

000020a8 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    20a8:	08 95       	ret

000020aa <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    20aa:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    20ac:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <USB_DeviceState>
    20b0:	88 23       	and	r24, r24
    20b2:	99 f0       	breq	.+38     	; 0x20da <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    20b4:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    20b8:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    20ba:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
    20be:	89 2f       	mov	r24, r25
    20c0:	81 70       	andi	r24, 0x01	; 1
    20c2:	90 fd       	sbrc	r25, 0
    20c4:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    20c6:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    20c8:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    20cc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    20d0:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    20d2:	b3 de       	rcall	.-666    	; 0x1e3a <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    20d4:	cf 70       	andi	r28, 0x0F	; 15
    20d6:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    20da:	cf 91       	pop	r28
    20dc:	08 95       	ret

000020de <__udivmodqi4>:
    20de:	99 1b       	sub	r25, r25
    20e0:	79 e0       	ldi	r23, 0x09	; 9
    20e2:	04 c0       	rjmp	.+8      	; 0x20ec <__udivmodqi4_ep>

000020e4 <__udivmodqi4_loop>:
    20e4:	99 1f       	adc	r25, r25
    20e6:	96 17       	cp	r25, r22
    20e8:	08 f0       	brcs	.+2      	; 0x20ec <__udivmodqi4_ep>
    20ea:	96 1b       	sub	r25, r22

000020ec <__udivmodqi4_ep>:
    20ec:	88 1f       	adc	r24, r24
    20ee:	7a 95       	dec	r23
    20f0:	c9 f7       	brne	.-14     	; 0x20e4 <__udivmodqi4_loop>
    20f2:	80 95       	com	r24
    20f4:	08 95       	ret

000020f6 <memcpy>:
    20f6:	fb 01       	movw	r30, r22
    20f8:	dc 01       	movw	r26, r24
    20fa:	02 c0       	rjmp	.+4      	; 0x2100 <memcpy+0xa>
    20fc:	01 90       	ld	r0, Z+
    20fe:	0d 92       	st	X+, r0
    2100:	41 50       	subi	r20, 0x01	; 1
    2102:	50 40       	sbci	r21, 0x00	; 0
    2104:	d8 f7       	brcc	.-10     	; 0x20fc <memcpy+0x6>
    2106:	08 95       	ret

00002108 <eeprom_read_byte>:
    2108:	f9 99       	sbic	0x1f, 1	; 31
    210a:	fe cf       	rjmp	.-4      	; 0x2108 <eeprom_read_byte>
    210c:	92 bd       	out	0x22, r25	; 34
    210e:	81 bd       	out	0x21, r24	; 33
    2110:	f8 9a       	sbi	0x1f, 0	; 31
    2112:	99 27       	eor	r25, r25
    2114:	80 b5       	in	r24, 0x20	; 32
    2116:	08 95       	ret

00002118 <eeprom_write_byte>:
    2118:	26 2f       	mov	r18, r22

0000211a <eeprom_write_r18>:
    211a:	f9 99       	sbic	0x1f, 1	; 31
    211c:	fe cf       	rjmp	.-4      	; 0x211a <eeprom_write_r18>
    211e:	1f ba       	out	0x1f, r1	; 31
    2120:	92 bd       	out	0x22, r25	; 34
    2122:	81 bd       	out	0x21, r24	; 33
    2124:	20 bd       	out	0x20, r18	; 32
    2126:	0f b6       	in	r0, 0x3f	; 63
    2128:	f8 94       	cli
    212a:	fa 9a       	sbi	0x1f, 2	; 31
    212c:	f9 9a       	sbi	0x1f, 1	; 31
    212e:	0f be       	out	0x3f, r0	; 63
    2130:	01 96       	adiw	r24, 0x01	; 1
    2132:	08 95       	ret

00002134 <_exit>:
    2134:	f8 94       	cli

00002136 <__stop_program>:
    2136:	ff cf       	rjmp	.-2      	; 0x2136 <__stop_program>
